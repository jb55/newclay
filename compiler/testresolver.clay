import newclay.common.*;
import newclay.lexer;
import newclay.parser;
import newclay.core.*;
import newclay.loader.*;
import newclay.ast as ast;

record TestResolverVisitor (depth:Int);

depth(d) {
    var s = String();
    for (i in range(d)) s += "  ";
    return s;
}

overload visitASTNode(v:TestResolverVisitor, node:ast.Symbol) {
    println(depth(v.depth), "symbol ", node.name.name.str);
    v.depth += 1;
    visitASTFields(v, node);
    v.depth -= 1;
}

overload visitASTNode(v:TestResolverVisitor, node:ast.LambdaExpr) {
    print(depth(v.depth), "lambda (capturing ");
    interleave(node.capturedOrder,
        () ref=> { print(", "); },
        name ref=> { print(name); },
    );
    println(")");
    v.depth += 1;
    visitASTFields(v, node);
    v.depth -= 1;
}

overload visitASTNode(v:TestResolverVisitor, node:ast.Overload) {
    println(depth(v.depth), "overload ", node.target);
    v.depth += 1;
    visitASTFields(v, node);
    v.depth -= 1;
}

overload visitASTNode(v:TestResolverVisitor, node:ast.StaticOverload) {
    println(depth(v.depth), "static overload ", node.target);
    v.depth += 1;
    visitASTFields(v, node);
    v.depth -= 1;
}

overload visitASTNode(v:TestResolverVisitor, node:ast.Block) {
    println(depth(v.depth), "block");
    v.depth += 1;
    visitASTFields(v, node);
    v.depth -= 1;
}

overload visitASTNode(v:TestResolverVisitor, node:ast.IfStatement) {
    println(depth(v.depth), "if statement");
    v.depth += 1;
    visitASTFields(v, node);
    v.depth -= 1;
}

overload visitASTNode(v:TestResolverVisitor, node:ast.WhileStatement) {
    println(depth(v.depth), "while statement");
    v.depth += 1;
    visitASTFields(v, node);
    v.depth -= 1;
}

overload visitASTNode(v:TestResolverVisitor, node:ast.ForStatement) {
    println(depth(v.depth), "for statement");
    v.depth += 1;
    visitASTFields(v, node);
    v.depth -= 1;
}

overload visitASTNode(v:TestResolverVisitor, node:ast.StaticForStatement) {
    println(depth(v.depth), "static for statement");
    v.depth += 1;
    visitASTFields(v, node);
    v.depth -= 1;
}

overload visitASTNode(v:TestResolverVisitor, node:ast.SwitchStatement) {
    println(depth(v.depth), "switch statement");
    v.depth += 1;
    visitASTFields(v, node);
    v.depth -= 1;
}

overload visitASTNode(v:TestResolverVisitor, node:ast.TryStatement) {
    println(depth(v.depth), "try statement");
    v.depth += 1;
    visitASTFields(v, node);
    v.depth -= 1;
}

overload visitASTNode(v:TestResolverVisitor, node:ast.CatchBlock) {
    println(depth(v.depth), "catch block");
    v.depth += 1;
    visitASTFields(v, node);
    v.depth -= 1;
}

overload visitASTNode(v:TestResolverVisitor, node:ast.BindingStatement) {
    println(depth(v.depth), "bindings ", node);
    v.depth += 1;
    visitASTFields(v, node);
    v.depth -= 1;
}

printDottedPath(x:Vector[ast.Identifier]) {
    interleave(x,
        () => {print(".");},
        i  => {print(i.str);}
    );
}

overload visitAST(v:TestResolverVisitor, node:ast.NameRef) {
    print(depth(v.depth));
    printDottedPath(node.name);
    println(" references ", node.env);
}

overload visitAST(v:TestResolverVisitor, node:ast.SimpleNameRef) {
    print(depth(v.depth));
    print(node.name.str);
    println(" references ", node.env);
}

main(args) {
    if (size(args) != 2) {
        println("usage: ", args[0], " <file>");
        return -1;
    }
    try {
        var program = loadProgram(args[1]);
        for (moduleName, module in items(program.modules)) {
            println(moduleName, ":");
            visitAST(TestResolverVisitor(1), module.ast);
        }
    }
    catch (e:ClayError) {
        displayError(e);
    }
    return 0;
}
