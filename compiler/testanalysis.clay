
import newclay.common.*;
import newclay.lexer;
import newclay.parser;
import newclay.ast as ast;
import newclay.core.*;
import newclay.loader.*;
import newclay.hooks.*;
import newclay.analysis.*;
import newclay.optimizer.*;
import newclay.ir as ir;
import maybe.*;

var withIds = false;

[T]
LeafTypeName(x:T) = StaticName(T);
[V | Variant?(V)]
overload LeafTypeName(x:V) = LeafTypeName(*x);

printDepth(depth) {
    for (i in range(depth))
        print("  ");
}

printNode(depth, node) {
    printDepth(depth);
    print(LeafTypeName(node), " ");
    printNodeData(depth, *node);
}

asPtr(x) = RawPointer(referencePtr(x).ptr);

printCallOutputs(depth, mOutputs) {
    maybe(mOutputs,
        outputs ref=> {
            for (v in outputs) {
                printDepth(depth);
                print("out ");
                print(if (v.returnByRef?) "ref   " else "value ");
                printVar(v.value);
            }
        },
        () ref=> { printDepth(depth); println("nonterminating"); }
    );
}

procedure printNodeData;

overload printNodeData(depth, node:ir.LiteralCodeBody) {
    println();
}

overload printNodeData(depth, node:ir.Call) {
    print(LeafTypeName(node.ast), " ");
    if (withIds)
        print("specialization ", asPtr(node.specialization), " ");
    println(
        node.specialization.callable, ArgumentList(node.specialization.args)
    );
    printVars(depth+1, "in  ", node.inputs);
    printCallOutputs(depth+1, node.outputs);
}

overload printNodeData(depth, node:ir.DereferenceCall) {
    println(LeafTypeName(node.ast));
    printDepth(depth+1);
    print("code pointer ");
    printVar(node.codePointer);
    printVars(depth+1, "in  ", node.inputs);
    printCallOutputs(depth+1, node.outputs);
}

overload printNodeData(depth, node:ir.If) {
    println(LeafTypeName(node.ast));
    printDepth(depth+1);
    print("condition ");
    printVar(node.condition);
    printDepth(depth+1);
    println("then:");
    for (thenNode in node.thenBody)
        printNode(depth+2, thenNode);
    printDepth(depth+1);
    println("else:");
    for (elseNode in node.elseBody)
        printNode(depth+2, elseNode);
}

overload printNodeData(depth, node:ir.While) {
    println(LeafTypeName(node.ast), " ", node.label);
    printDepth(depth+1);
    print("condition ");
    printVar(node.condition);
    printDepth(depth+1);
    println("condition body:");
    for (condNode in node.conditionBody)
        printNode(depth+2, condNode);

    printDepth(depth+1);
    println("body:");
    for (bodyNode in node.body)
        printNode(depth+2, bodyNode);
}

overload printNodeData(depth, node:ir.Block) {
    println(node.label);
    for (bodyNode in node.body)
        printNode(depth+1, bodyNode);
}

overload printNodeData(depth, node:ir.Statement) {
    println();
    for (bodyNode in node.body)
        printNode(depth+1, bodyNode);
}

overload printNodeData(depth, node:ir.Initialize) {
    println(LeafTypeName(node.ast));

    printDepth(depth+1);
    print("in  ");
    printVar(node.input);

    printDepth(depth+1);
    print("out ");
    printVar(node.output);
}

overload printNodeData(depth, node:ir.Adopt) {
    println();

    printDepth(depth+1);
    print("value ");
    printVar(node.value);
}

overload printNodeData(depth, node:ir.Consume) {
    println();

    printDepth(depth+1);
    print("value ");
    printVar(node.value);
}

overload printNodeData(depth, node:ir.Bind) {
    println(LeafTypeName(node.ast));

    printDepth(depth+1);
    print("in  ");
    printVar(node.input);

    printDepth(depth+1);
    print("out ");
    printVar(node.output);
}

overload printNodeData(depth, node:ir.AddressOf) {
    println(LeafTypeName(node.ast));

    printDepth(depth+1);
    print("in  ");
    printVar(node.input);

    printDepth(depth+1);
    print("out ");
    printVar(node.output);
}

overload printNodeData(depth, node:ir.AddressOfCode) {
    print(LeafTypeName(node.ast), " ");
    if (withIds)
        print("specialization ", asPtr(node.specialization), " ");
    println(
        node.specialization.callable, ArgumentList(node.specialization.args)
    );

    printDepth(depth+1);
    print("out ");
    printVar(node.output);
}

overload printNodeData(depth, node:ir.AddressOfExternalCode) {
    print(LeafTypeName(node.ast), " ");
    if (withIds)
        print("specialization ", asPtr(node.specialization), " ");
    println(
        node.specialization.callable, ArgumentList(node.specialization.args)
    );

    printDepth(depth+1);
    print("out ");
    printVar(node.output);
}

overload printNodeData(depth, node:ir.Not) {
    println(LeafTypeName(node.ast));

    printDepth(depth+1);
    print("in  ");
    printVar(node.input);

    printDepth(depth+1);
    print("out ");
    printVar(node.output);
}

overload printNodeData(depth, node:ir.Nop) {
    println();
}

overload printNodeData(depth, node:ir.Break) {
    println(LeafTypeName(node.ast), " ", node.target);
}

overload printNodeData(depth, node:ir.Continue) {
    println(LeafTypeName(node.ast), " ", node.target);
}

overload printNodeData(depth, node:ir.Throw) {
    println(LeafTypeName(node.ast));
    printDepth(depth+1);
    print("exception ");
    printVar(node.exception);
}

printVar(variable) {
    if (withIds)
        print(asPtr(variable), " ");
    println(variable);
}

printVars(depth, prefix, vars) {
    for (v in vars) {
        printDepth(depth);
        print(prefix);
        printVar(v);
    }
}

printInputsOutputs(depth, inputs:RTValues, mOutputs:Maybe[RTValues]) {
    printVars(depth, "in  ", inputs);
    printOutputs(depth, mOutputs);
}

printOutputs(depth, mOutputs:Maybe[RTValues]) {
    maybe(mOutputs,
        outputs ref=> {
            printVars(depth, "out ", outputs);
        },
        () ref=> { printDepth(depth); println("nonterminating"); }
    );
}

printSpecialization(depth, s) {
    printDepth(depth);
    print("specialization");
    if (withIds)
        print(" ", asPtr(s));
    println();
    printDepth(depth);
    println("results:");
    printOutputs(depth+1, s.results);
    printDepth(depth);
    println("args:");
    printVars(depth+1, "in  ", s.args);
    printDepth(depth);
    println("internal named returns:");
    printVars(depth+1, "out ", s.internalNamedResults);
    printDepth(depth);
    println("analysis nodes:");
    maybe(s.body,
        body ref=> {
            for (node in body)
                printNode(depth+1, node);
        },
        () ref=> {
            printDepth(depth+1);
            println("<body not analyzed>");
        }
    );
}

printInvokeTable(name, table) {
    for (args, invoke in items(table)) {
        println(name, args, ":");
        maybe(invoke.specialization,
            s => {
                printSpecialization(1, s);
                maybe(s.body, body ref=> {
                    println("  optimized:");
                    optimizeSpecialization(s);
                    printSpecialization(2, s);
                });
            },
            () => { println("  <no specialization!>"); },
        );
    }
}

printGlobal(g:RTGlobal, constructorBody:Vector[ir.Node]) {
    printDepth(1);
    println("global ", g);
    printDepth(1);
    println("constructor analysis nodes:");
    for (node in constructorBody)
        printNode(2, node);
}

main(args) {
    if (size(args) < 2) {
        println("usage: ", args[0], " <file> [ids]");
        return -1;
    }
    try {
        var program = loadProgram(args[1]);
        if (size(args) >= 3 and args[2] == "ids")
            withIds = true;

        withProgram(program, () ref=> {
            initializeClayHooks();

            var s = analyzeMain();
            analyzeCallableBody(s);

            for (symbolHead in program.allSymbolHeads) {
                printInvokeTable(symbolHead.astName.name.str, symbolHead.invokeTable);
                for (args, inst in items(symbolHead.instances)) {
                    if (variantIs?(inst, Value)) {
                        var symbol = variantAs(variantAs(inst, Value), Symbol);
                        printInvokeTable(
                            printString(symbolHead.astName.name.str, args),
                            symbol.invokeTable
                        );
                    }
                }
            }

            println("globals:");
            for (g in reversed(program.globalMap.globalOrder)) {
                printGlobal(g, program.globalMap.constructors[g]);
            }
        });
    }
    catch (e:ClayError) {
        displayError(e);
    }
    return 0;
}
