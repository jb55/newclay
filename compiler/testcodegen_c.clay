import newclay.common.*;
import newclay.lexer;
import newclay.parser;
import newclay.ast as ast;
import newclay.core.*;
import newclay.loader.*;
import newclay.hooks.*;
import newclay.analysis.*;
import newclay.codegen.c.*;
import maybe.*;

main(args) {
    if (size(args) < 2) {
        println("usage: ", args[0], " <file> [msvc|gcc]");
        return -1;
    }
    try {
        var program = loadProgram(args[1]);
        withProgram(program, () ref=> {
            initializeClayHooks();

            var dialect = GCC_DIALECT;
            if (size(args) >= 3) {
                switch (args[2]) {
                case "gcc":
                    dialect = GCC_DIALECT;
                    break;
                case "msvc":
                    dialect = MSVC_DIALECT;
                    break;
                default:
                    error("unknown C dialect ", args[2]);
                    break;
                }
            }

            codegenStandaloneProgramTo(CodegenConfig(dialect), stdout);
        });
    }
    catch (e:ClayError) {
        displayError(e);
    }
    return 0;
}
