import newclay.ast as ast;
import newclay.core.(
    RTValue,
    RTValueList,
    Value,
    Specialization,
    RTValues,
    ValueList,
    genericError,
    privateLookup
);
import newclay.evaluator.*;
import maybe.*;

record OutputVariable (
    value:RTValue,
    returnByRef?:Bool,
);

variant Node = LiteralCodeBody
             | Call
             | DereferenceCall
             | Not
             | AddressOf
             | AddressOfCode
             | AddressOfExternalCode
             | If
             | While
             | Initialize
             | Bind
             | Break
             | Continue
             | Throw
             | Nop
             | Block
             | Statement
             | Adopt
             | Consume;

alias BreakTargetId = Int;

variant ASTNode = Nothing
                | ast.ExprListItem
                | ast.ReturnExprListItem
                | ast.CaseBlock
                | ast.Statement;
overload ASTNode(x:ast.Expr) = ASTNode(ast.ExprListItem(x));
[E | VariantMember?(ast.Expr, E)]
overload ASTNode(x:E) = ASTNode(ast.ExprListItem(ast.Expr(x)));
[S | VariantMember?(ast.Statement, S)]
overload ASTNode(x:S) = ASTNode(ast.Statement(x));

// XXX hack to deal with destructors not having a definite AST node attached
overload ast.getFileLocation(astNode:ASTNode) = ...match(astNode,
    Nothing, x ref=> ...(String("(destructors)"), 1, 0),
    MatchDefault, a ref=> ...ast.getFileLocation(a),
);

variant LiteralCodeToken = String
                         | RTValue
                         | Value
                         | RTValueList
                         | ValueList;

alias LiteralCode = Vector[LiteralCodeToken];

record LiteralCodeBody = referenceType(
    ast: ast.LiteralCodeBody,
    kind: ast.LiteralCodeBodyKind,
    code: LiteralCode,
);

record Block = referenceType(
    label: BreakTargetId,
    body: Vector[Node],
);

overload Block(label:BreakTargetId) = Block(label, Vector[Node]());

record Statement = referenceType(
    body: Vector[Node],
);

record Call = referenceType(
    ast: ASTNode,
    inputs: RTValues,
    outputs: Maybe[Vector[OutputVariable]],
    specialization: Specialization,
);

record DereferenceCall = referenceType(
    ast: ASTNode,
    codePointer: RTValue,
    inputs: RTValues,
    outputs: Maybe[Vector[OutputVariable]],
);

record If = referenceType(
    ast: ASTNode,
    condition: RTValue,
    thenBody: Vector[Node],
    elseBody: Vector[Node],
);

record Not = referenceType(
    ast: ASTNode,
    input: RTValue,
    output: RTValue,
);

record AddressOf = referenceType(
    ast: ASTNode,
    input: RTValue,
    output: RTValue,
);

record AddressOfCode = referenceType(
    ast: ASTNode,
    specialization: Specialization,
    output: RTValue,
);

record AddressOfExternalCode = referenceType(
    ast: ASTNode,
    specialization: Specialization,
    output: RTValue,
);

record While = referenceType(
    label: BreakTargetId,
    ast: ASTNode,
    conditionBody: Vector[Node],
    condition: RTValue,
    body: Vector[Node],
);

record Bind = referenceType(
    ast: ASTNode,
    input: RTValue,
    output: RTValue,
);

record Initialize = referenceType(
    ast: ASTNode,
    input: RTValue,
    output: RTValue,
);

record Break = referenceType(
    ast: ASTNode,
    target: BreakTargetId,
);

record Continue = referenceType(
    ast: ASTNode,
    target: BreakTargetId,
);

[A | VariantMember?(ast.Statement, A)]
overload Break(ast:A, target:BreakTargetId) = Break(ASTNode(ast), target);
[A | VariantMember?(ast.Statement, A)]
overload Continue(ast:A, target:BreakTargetId) = Continue(ASTNode(ast), target);

record Throw = referenceType(
    ast: ast.ThrowExpr,
    exception: RTValue,
);

record Adopt = referenceType(
    value: RTValue,
);

record Consume = referenceType(
    value: RTValue,
);

record Nop();

pushNode(body, n:Node) { push(body, n); }
[T | VariantMember?(Node, T)]
overload pushNode(body, n:T) { push(body, Node(n)); }


//
// nodeOutputs
//

procedure nodeOutputs;
procedure nodeInputs;

private callOutputs(mOutputs) = maybe(mOutputs,
    outputs => map(o => o.value, outputs),
    () => RTValues()
);

overload nodeOutputs(node) = RTValues();
overload nodeOutputs(node:Call) = callOutputs(node.outputs);
overload nodeOutputs(node:DereferenceCall) = callOutputs(node.outputs);
overload nodeOutputs(node:Not) = RTValues(node.output);
overload nodeOutputs(node:AddressOf) = RTValues(node.output);
overload nodeOutputs(node:AddressOfCode) = RTValues(node.output);
overload nodeOutputs(node:AddressOfExternalCode) = RTValues(node.output);
overload nodeOutputs(node:Bind) = RTValues(node.output);
// Initialize doesn't return its "output" because it isn't actually a new value

overload nodeOutputs(node:Node) = nodeOutputs(*node);


overload nodeInputs(node) = RTValues();
overload nodeInputs(node:Call) = node.inputs;
overload nodeInputs(node:DereferenceCall) {
    var inputs = RTValues(node.codePointer);
    push(inputs, node.inputs);
    return move(inputs);
}
overload nodeInputs(node:If) = RTValues(node.condition);
overload nodeInputs(node:Not) = RTValues(node.input);
overload nodeInputs(node:AddressOf) = RTValues(node.input);
overload nodeInputs(node:Bind) = RTValues(node.input);
overload nodeInputs(node:Initialize) = RTValues(node.input);
overload nodeInputs(node:Throw) = RTValues(node.exception);
overload nodeInputs(node:Adopt) = RTValues(node.value);
overload nodeInputs(node:Consume) = RTValues(node.value);

overload nodeInputs(node:Node) = nodeInputs(*node);


//
// parseLiteralCodeBody
//

private literalCodeWhiteSpace?(c) = inValues?(c, ' ', '\t', '\r', '\n');
private literalCodeIdentifierChar?(c)
    = inValues?(c, '_', '?')
      or (c >= 'a' and c <= 'z')
      or (c >= 'A' and c <= 'Z')
      or (c >= '0' and c <= '9');

private enum LiteralTokenMode {
    STRING,
    PATTERN_SUBSTITUTION, SUBSTITUTION,
    MULTI1,
    MULTI_PATTERN_SUBSTITUTION, MULTI_SUBSTITUTION
}

private literalCodeSubstitutionToken(env, token) {
    var value = privateLookup(env, token);
    return match(value,
        RTValue,      v => LiteralCodeToken(v),
        Value,        v => LiteralCodeToken(v),
        RTValueList, m => {
            genericError("multiple values substituted in single-value literal code substitution");
            return LiteralCodeToken(Value());
        },
        ValueList, m => {
            genericError("multiple values substituted in single-value literal code substitution");
            return LiteralCodeToken(Value());
        },
        MatchDefault, x => {
            genericError("invalid literal code substitution: ", value);
            return LiteralCodeToken(Value());
        },
    );
}

private literalCodeMultiSubstitutionToken(env, token) {
    var value = privateLookup(env, token);
    return match(value,
        RTValueList, m => LiteralCodeToken(m),
        ValueList,   m => LiteralCodeToken(m),
        RTValue, v => {
            genericError("single value substituted in multiple-value literal code substitution");
            return LiteralCodeToken(Value());
        },
        Value, v => {
            genericError("single value substituted in multiple-value literal code substitution");
            return LiteralCodeToken(Value());
        },
        MatchDefault, x => {
            genericError("invalid literal code substitution: ", value);
            return LiteralCodeToken(Value());
        },
    );
}

parseLiteralCodeBody(env, codeString:String) {
    assert(
        sliceUpto(codeString, 3) == "\"\"\""
        and sliceFrom(codeString, size(codeString) - 3) == "\"\"\""
    );

    var code = LiteralCode();

    var currentToken = String();
    var currentTokenMode = STRING;

    for (c in sliced(codeString, 3, size(codeString) - 3)) {
        switch (currentTokenMode) {
        case STRING:
            if (c == '$') {
                if (not empty?(currentToken))
                    push(code, LiteralCodeToken(move(currentToken)));
                currentTokenMode = SUBSTITUTION;
            } else
                push(currentToken, c);
            break;

        case PATTERN_SUBSTITUTION:
            if (not literalCodeIdentifierChar?(c)) {
                if (empty?(currentToken))
                    genericError("invalid pattern substitution in literal code body");
                push(code, LiteralCodeToken(derefPattern(env, ast.Identifier(move(currentToken)))));
                currentTokenMode = STRING;
            }
            push(currentToken, c);
            break;

        case SUBSTITUTION:
            if (empty?(currentToken) and c == '\'') {
                currentTokenMode = PATTERN_SUBSTITUTION;
                break;
            }

            if (empty?(currentToken) and c == '.') {
                currentTokenMode = MULTI1;
                break;
            }

            if (not literalCodeIdentifierChar?(c)) {
                if (empty?(currentToken))
                    genericError("invalid substitution in literal code body");
                push(code, literalCodeSubstitutionToken(env, move(currentToken)));
                currentTokenMode = STRING;
            }
            push(currentToken, c);
            break;

        case MULTI_SUBSTITUTION:
            if (empty?(currentToken) and c == '\'') {
                currentTokenMode = MULTI_PATTERN_SUBSTITUTION;
                break;
            }

            if (not literalCodeIdentifierChar?(c)) {
                if (empty?(currentToken))
                    genericError("invalid multiple-value substitution in literal code body");
                push(code, literalCodeMultiSubstitutionToken(env, move(currentToken)));
                currentTokenMode = STRING;
            }
            push(currentToken, c);
            break;

        case MULTI_PATTERN_SUBSTITUTION:
            if (not literalCodeIdentifierChar?(c)) {
                if (empty?(currentToken))
                    genericError("invalid multiple-value pattern substitution in literal code body");
                push(code, LiteralCodeToken(derefListPattern(env, ast.Identifier(move(currentToken)))));
                currentTokenMode = STRING;
            }
            push(currentToken, c);
            break;

        case MULTI1:
            if (c == '.') {
                currentTokenMode = MULTI_SUBSTITUTION;
                break;
            }
            genericError("invalid substitution in literal code body");
            break;

        default:
            assert(false);
            break;
        }
    }

    switch (currentTokenMode) {
    case STRING:
        if (not empty?(currentToken))
            push(code, LiteralCodeToken(move(currentToken)));
        break;
    case PATTERN_SUBSTITUTION:
        if (empty?(currentToken))
            genericError("invalid pattern substitution in literal code body");
        push(code, LiteralCodeToken(derefPattern(env, ast.Identifier(move(currentToken)))));
        break;
    case SUBSTITUTION:
        if (empty?(currentToken))
            genericError("invalid substitution in literal code body");
        push(code, literalCodeSubstitutionToken(env, move(currentToken)));
        break;
    case MULTI_PATTERN_SUBSTITUTION:
        if (empty?(currentToken))
            genericError("invalid multiple-value pattern substitution in literal code body");
        push(code, LiteralCodeToken(derefListPattern(env, ast.Identifier(move(currentToken)))));
        break;
    case MULTI_SUBSTITUTION:
        if (empty?(currentToken))
            genericError("invalid multiple-value substitution in literal code body");
        push(code, literalCodeMultiSubstitutionToken(env, move(currentToken)));
        break;
    default:
        assert(false);
        break;
    }

    return move(code);
}

