
import maybe.*;
import externals.*;
import parsing.combinators.wrapper.*;
import newclay.common.*;
import newclay.lexer.*;
import newclay.ast.*;
import newclay.diagnostics.*;



//
// parser input
//

record ParserInput(
    tokens: SourceTokens,
    current: SizeT,
    maxCurrent: SizeT,
);

overload ParserInput(tokens: SourceTokens) =
    ParserInput(tokens, SizeT(0), SizeT(0));

overload iterator(x:ParserInput) = x;

overload hasNext?(x:ParserInput) =
    (x.current < size(x.tokens.vector));

overload next(x:ParserInput) {
    ref token = x.tokens.vector[x.current];
    x.current += 1;
    return ref token;
}

overload assign(dest:ParserInput, lvalue src:ParserInput) {
    if (dest.tokens == src.tokens) {
        var destMax = max(dest.maxCurrent, dest.current);
        var srcMax = max(src.maxCurrent, src.current);
        dest.maxCurrent = max(destMax, srcMax);
        dest.current = src.current;
    }
    else {
        dest.tokens = src.tokens;
        dest.current = src.current;
        dest.maxCurrent = src.maxCurrent;
    }
}


//
// ParserError
//

record ParserError(
    tokens: SourceTokens,
    where: SizeT,
);

instance ClayError = ParserError;

overload displayError(e:ParserError) {
    var offset = e.tokens.vector[e.where].indexRange.begin;
    errorWithLocation(e.tokens.file, offset, "parse error");
}


//
// parse
//

external parser_parse(
    ex:ExternalException,
    inTokens:Pointer[SourceTokens],
    out:Pointer[SourceAST]
);

external parser_parseInteractorInput(
    ex:ExternalException,
    inTokens:Pointer[SourceTokens],
    out:Pointer[InteractorInput]
);

parseInteractorInput(tokens) = callExternal(parser_parseInteractorInput, tokens);
parse(tokens) = callExternal(parser_parse, tokens);
