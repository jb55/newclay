import newclay.common.*;
import newclay.lexer.*;
import newclay.parser.*;
import newclay.ast.*;
import newclay.diagnostics.*;
import newclay.lexer.*;
import parsing.combinators.wrapper.*;
import maybe.*;
import externals.*;



//
// combinator specialization
//

private var combinators = Combinators[ParserInput]();

private var Parser? = combinators.Parser?;
private var Parsers? = combinators.Parsers?;
private var ParseResult = combinators.ParseResult;

private var nextToken = combinators.nextToken;

private var condition = combinators.condition;
private var literal = combinators.literal;
private var literalString = combinators.literalString;
private var optional = combinators.optional;
private var choice = combinators.choice;
private var sequence = combinators.sequence;
private var sequenceAs = combinators.sequenceAs;
private var modify = combinators.modify;
private var repeated = combinators.repeated;
private var repeatedAs = combinators.repeatedAs;
private var zeroOrMore = combinators.zeroOrMore;
private var oneOrMore = combinators.oneOrMore;
private var zeroOrMoreAs = combinators.zeroOrMoreAs;
private var oneOrMoreAs = combinators.oneOrMoreAs;
private var separatedList = combinators.separatedList;
private var optSeparatedList = combinators.optSeparatedList;
private var separatedListStrict = combinators.separatedListStrict;



//
// bounds combinator
//

[Parser]
private includeBounds(parser:Parser) {
    return input => {
        alias T = ParseResult(Parser);
        var start = input.current;
        return maybe(parser(input),
            x ref=> {
                var tokenRange = TokenRange(start, input.current);
                var bounds = Location(input.tokens, tokenRange, start);
                return Maybe(Tuple(move(bounds), move(x)));
            },
            () => nothing(Tuple[Location,T]),
        );
    };
}

[Parser]
private bounds(parser:Parser) = modify(
    x => { setLocation(x.1, move(x.0)); return move(x.1); },
    includeBounds(parser),
);

[P | Type(P()(ParserInput())) == Maybe[Argument]]
overload bounds(p:P);


//
// keywords
//

private keyword(s) {
    var i = keywordIndex(s);
    assert(i >= 0, "invalid keyword");
    var pred = (x => ((x.kind == KEYWORD) and (x.subKind == i)));
    return modify(x => (), condition(pred));
}

private var kw_import = keyword("import");
private var kw_as = keyword("as");
private var kw_with = keyword("with");
private var kw_external = keyword("external");
private var kw_inline = keyword("inline");
private var kw_noreturn = keyword("noreturn");
private var kw_nothrow = keyword("nothrow");
private var kw_define = keyword("define");
private var kw_extend = keyword("extend");
private var kw_overload = keyword("overload");
private var kw_static = keyword("static");
private var kw_var = keyword("var");
private var kw_const = keyword("const");
private var kw_ref = keyword("ref");
private var kw_rvalue = keyword("rvalue");
private var kw_forward = keyword("forward");
private var kw_alias = keyword("alias");
private var kw_true = keyword("true");
private var kw_false = keyword("false");
private var kw_if = keyword("if");
private var kw_else = keyword("else");
private var kw_and = keyword("and");
private var kw_or = keyword("or");
private var kw_not = keyword("not");
private var kw_div = keyword("div");
private var kw_mod = keyword("mod");
private var kw_public = keyword("public");
private var kw_private = keyword("private");
private var kw_return = keyword("return");
private var kw_break = keyword("break");
private var kw_continue = keyword("continue");
private var kw_try = keyword("try");
private var kw_catch = keyword("catch");
private var kw_throw = keyword("throw");
private var kw_for = keyword("for");
private var kw_in = keyword("in");
private var kw_while = keyword("while");
private var kw_switch = keyword("switch");
private var kw_case = keyword("case");
private var kw_c = keyword("__c__");
private var kw_llvm = keyword("__llvm__");
private var kw_asm = keyword("__asm__");
private var kw_unreachable = keyword("__unreachable__");



//
// punctuations
//

private punctuationParser(Ident) {
    var i = punctuationIndex(StaticName(Ident));
    assert(i >= 0, "invalid punctuation");
    var pred = (x => ((x.kind == PUNCTUATION) and (x.subKind == i)));
    return modify(x => (), condition(pred));
}

private var punctuationParserTable[Ident] = punctuationParser(Ident);

[Ident]
private punc(static Ident) = punctuationParserTable[Ident];

private var ellipsis = punc(#"..");


//
// utility combinators
//

private commaList(forward parser) = separatedList(punc(#","), parser);
private optCommaList(forward parser) = optSeparatedList(punc(#","), parser);

private commaListStrict(forward parser) =
    separatedListStrict(punc(#","), parser);

private optCommaListStrict(forward parser) =
    optSeparatedListStrict(punc(#","), parser);

private tailItem(item) = modify(x => x.0, sequence(item, optional(punc(#","))));

private commaAndItem(item) = modify(x => move(x.1), sequence(punc(#","), optional(tailItem(item))));
private optCommaAndItem(item) = modify(x => maybe(x, v => v),
    optional(commaAndItem(item))
);


[Item, VariadicItem | Parsers?(Item, VariadicItem)]
private variadicListPair(item:Item, variadicItem:VariadicItem) {
    alias T = ParseResult(Item);
    return choice(
        modify(
            x => (move(x.0), move(x.1)),
            sequence(
                commaListStrict(item), optCommaAndItem(variadicItem)
            ),
        ),
        modify(
            x => (Vector[T](), move(x)),
            optional(tailItem(variadicItem)),
        ),
    );
}

private variadicList(item, variadicItem) = modify(
    x => VariadicList(move(x.0), move(x.1)),
    variadicListPair(item, variadicItem)
);



//
// token parser
//

private token(tokenKind) = condition(x => (x.kind == tokenKind));

private tokenData(tokenKind) {
    var parser = token(tokenKind);
    return input => {
        ref data = input.tokens.file.data;
        return maybe(parser(input),
            x ref=> Maybe(sliced(data, x.range.begin, x.range.end)),
            () ref=> nothing(Type(sliced(data, SizeT(0), SizeT(0)))),
        );
    };
}



//
// identifier
//

private var identifier = bounds(modify(Identifier, tokenData(IDENTIFIER)));
private var identifierList = commaList(identifier);

private var variadicIdentifierList = variadicList(
    identifier,
    modify(
        x => move(x.1),
        sequence(ellipsis, identifier),
    ),
);



//
// exprParser combinator
//

private exprParser(forward modifier, forward parser) = modify(
    x => Expr(move(x)),
    bounds(modify(modifier, parser)),
);



//
// literals
//

private var boolTrue = modify(x => true, kw_true);
private var boolFalse = modify(x => false, kw_false);

private var boolLiteral = exprParser(
    BoolLiteral,
    choice(boolTrue, boolFalse),
);

private var identStr = modify(String, tokenData(IDENTIFIER));

private var charLiteral = exprParser(
    x => CharLiteral(String(x)),
    tokenData(CHAR_LITERAL),
);

private var optSign = modify(
    x => just(x, false),
    optional(choice(
        modify(x => false, punc(#"+")),
        modify(x => true, punc(#"-")),
    ))
);

private var intLiteral = exprParser(
    x => IntLiteral(x.0, String(x.1)),
    sequence(optSign, tokenData(INT_LITERAL)),
);

private var floatLiteral = exprParser(
    x => FloatLiteral(x.0, String(x.1)),
    sequence(optSign, tokenData(FLOAT_LITERAL)),
);

private var stringLiteral = exprParser(
    x => StringLiteral(String(x)),
    tokenData(STRING_LITERAL),
);

private var literalExpr = choice(
    boolLiteral, charLiteral, intLiteral, floatLiteral, stringLiteral
);



//
// atomic expr
//

private var nameRef = exprParser(
    x => NameRef(move(x)),
    namePath,
);

private var simpleNameRef = exprParser(
    x => SimpleNameRef(move(x)),
    identifier,
);

private var patternNameRef = exprParser(
    x => PatternNameRef(move(x.1)),
    sequence(punc(#"'"), identifier),
);

private var optStatementExprBody = bounds(modify(
    x => StatementExpr(move(x.0), move(x.1)),
    sequence(zeroOrMore(statement), expr),
));

private var statementExprBody = bounds(modify(
    x => StatementExpr(move(x.0), move(x.1)),
    sequence(oneOrMore(statement), expr),
));

private var statementExpr = exprParser(
    x => move(x.1),
    sequence(punc(#"("), statementExprBody, punc(#")")),
);

private var bracketedExpr = modify(
    x => move(x.1),
    sequence(punc(#"("), expr, punc(#")")),
);

private var tupleExpr = exprParser(
    x => TupleExpr(move(x.1)),
    sequence(punc(#"["), optExprList, punc(#"]")),
);

private var atomicExpr = choice(
    literalExpr, simpleNameRef, patternNameRef,
    lambdaExpr, bracketedExpr, statementExpr, tupleExpr,
);



//
// setBase, foldTail
//

private exprTokenRange(x) = ref x.location.tokenRange;

private setBase2(root, field, base) {
    fieldRef(root, field) = base;
    root.location.tokenRange.begin = exprTokenRange(*base).begin;
}

private setBase(x, y) { assert(false, "baseless expression!"); }
overload setBase(x:Indexing, y) { setBase2(x, #expr, y); }
overload setBase(x:StaticIndexing, y) { setBase2(x, #expr, y); }
overload setBase(x:FieldRef, y) { setBase2(x, #expr, y); }
overload setBase(x:Call,     y) { setBase2(x, #expr, y); }
overload setBase(x:AndExpr,  y) { setBase2(x, #expr1, y); }
overload setBase(x:OrExpr,   y) { setBase2(x, #expr1, y); }
overload setBase(x:NotExpr,  y) { setBase2(x, #expr, y); }
overload setBase(x:UnaryOpExpr, y)  { setBase2(x, #expr, y); }
overload setBase(x:BinaryOpExpr, y) { setBase2(x, #expr1, y); }

private foldTail(x) {
    var result = x.0;
    for (y in x.1) {
        setBase(*y, result);
        result = y;
    }
    return result;
}

private maybeFoldTail(x) {
    var result = x.0;
    maybe(x.1, y ref=> {
        setBase(*y, result);
        result = y;
    });
    return result;
}



//
// suffix expr
//

private var indexingSuffix = exprParser(
    x => Indexing(Expr(), move(x.1)),
    sequence(punc(#"["), optExprList, punc(#"]")),
);

private intLiteralFromStaticIndexToken(data) {
    assert(size(data) > 1 and data[0] == '.', "static index token must begin with .");
    return String(slicedFrom(data, 1));
}

private var staticIndexingLiteral = bounds(modify(
    x => IntLiteral(false, intLiteralFromStaticIndexToken(x)),
    tokenData(STATIC_INDEX),
));

private var staticIndexingSuffix = exprParser(
    x => StaticIndexing(Expr(), x),
    staticIndexingLiteral,
);

private var fieldRefSuffix = exprParser(
    x => FieldRef(Expr(), move(x.1)),
    sequence(punc(#"."), identifier),
);

private var callSuffix = exprParser(
    x => Call(Expr(), move(x.1)),
    sequence(punc(#"("), optExprList, punc(#")")),
);

private var dereferenceSuffix = exprParser(
    x => UnaryOpExpr(OP_DEREFERENCE, Expr()),
    punc(#"^"),
);

private var suffix = choice(
    indexingSuffix, callSuffix, staticIndexingSuffix, fieldRefSuffix, dereferenceSuffix,
);

private var suffixExpr = modify(
    foldTail,
    sequence(atomicExpr, zeroOrMore(suffix)),
);


//
// prefix expr
//

private var prefixExpr2 = choice(
    suffixExpr,
    plusExpr,
    minusExpr,
    addressOfExpr,
    unpackOpExpr,
    staticExpr,
);

private prefixExpr(input) Maybe[Expr] = prefixExpr2(input);

private var prefixOp[p, op] = exprParser(
    x => UnaryOpExpr(op(), move(x.1)),
    sequence(punc(p), prefixExpr),
);

private var plusExpr      = prefixOp[#"+", () => OP_PLUS];
private var minusExpr     = prefixOp[#"-", () => OP_MINUS];
private var addressOfExpr = prefixOp[#"&", () => OP_ADDRESS_OF];
private var unpackOpExpr    = prefixOp[#"*", () => OP_UNPACK];

private var staticExpr2 = exprParser(
    x => StaticExpr(x.1),
    sequence(punc(#"#"), prefixExpr),
);

private staticExpr(input) Maybe[Expr] = staticExpr2(input);


//
// mul/div/rem expr
//

private binaryOpChoiceBranch(p, op) = modify(x => op(), p);

private binaryOpChoice(p, op, ...ops) = binaryOpChoiceBranch(p, op), ...binaryOpChoice(...ops);
overload binaryOpChoice() = ;

private binaryOpChain(term, ...ops) = modify(
    foldTail,
    sequence(term, zeroOrMore(exprParser(
        x => BinaryOpExpr(x.0, Expr(), move(x.1)),
        sequence(choice(...binaryOpChoice(...ops)), term),
    ))),
);

private var mulDivExpr = binaryOpChain(prefixExpr,
    punc(#"*"), () => OP_MULTIPLY,
    punc(#"/"), () => OP_DIVIDE,
    kw_div, () => OP_QUOTIENT,
    kw_mod, () => OP_REMAINDER,
);


//
// add/sub expr
//

private var addSubExpr = binaryOpChain(mulDivExpr,
    punc(#"+"), () => OP_ADD,
    punc(#"-"), () => OP_SUBTRACT,
);



//
// compare expr
//

private binaryOp(term, ...ops) = modify(
    maybeFoldTail,
    sequence(term, optional(exprParser(
        x => BinaryOpExpr(x.0, Expr(), move(x.1)),
        sequence(choice(...binaryOpChoice(...ops)), term),
    ))),
);

private var compareExpr = binaryOp(addSubExpr,
    punc(#"<="), () => OP_LESSER_EQUALS?,
    punc(#"<"),  () => OP_LESSER?,
    punc(#">"),  () => OP_GREATER?,
    punc(#">="), () => OP_GREATER_EQUALS?,
);


//
// equality expr
//

private var equalityExpr = binaryOp(compareExpr,
    punc(#"!="), () => OP_NOT_EQUALS?,
    punc(#"=="), () => OP_EQUALS?,
);


//
// not expr
//

private var notExpr = choice(notOpExpr, equalityExpr);

private var notOpExpr = exprParser(x => NotExpr(x.1), sequence(kw_not, equalityExpr));


//
// and/or expr
//

private andOrOpChain(node, op, term) = modify(
    foldTail,
    sequence(term, zeroOrMore(exprParser(
        x => node(Expr(), move(x.1)),
        sequence(op, term),
    ))),
);

private var andExpr = andOrOpChain(AndExpr, kw_and, notExpr);
private var orExpr = andOrOpChain(OrExpr, kw_or, andExpr);



//
// lambda
//

private var lambdaCodeBody = choice(
    modify(x => (x.0, CodeBody(ExprCodeBody(ReturnExprList(x.1)))),
        sequence(lambdaCaptureKind, returnExprListItem)
    ),
    modify(x => (x.0, CodeBody(x.1)),
        sequence(lambdaCaptureKind, block)
    ),
);

private var lambdaCaptureKind = choice(
    modify(x => LAMBDA_CAPTURE_BY_VALUE,     punc(#"=>")),
    modify(x => LAMBDA_CAPTURE_BY_REFERENCE, punc(#"->")),
);

private var optLambdaArguments = modify(
    m => maybe(m, x => x.1, () => ArgumentList()),
    optional(sequence(punc(#"("), optArguments, punc(#")"))),
);

private var optLambdaCaptureKind = modify(
    x => just(x, LAMBDA_CAPTURE_BY_REFERENCE),
    optional(lambdaCaptureKind),
);

private var lambdaExpr = exprParser(
    x => LambdaExpr(x.1 .0, x.0, x.1 .1),
    sequence(optLambdaArguments, lambdaCodeBody),
);



//
// if expr
//

private var ifExpr = exprParser(
    x => IfExpr(move(x.2), move(x.4), move(x.6)),
    sequence(kw_if, punc(#"("), optStatementExprBody, punc(#")"), expr, kw_else, expr),
);



//
// pair expr
//

private var pairExpr = exprParser(
    x => PairExpr(move(x.0), move(x.2)),
    sequence(identifier, punc(#":"), expr),
);


//
// throw expr
//

private var throwExpr = exprParser(
    x => ThrowExpr(x.1),
    sequence(kw_throw, expr),
);


//
// expr
//

private var expr2 = choice(
    pairExpr, ifExpr, orExpr, throwExpr,
);

private expr(input) Maybe[Expr] { return expr2(input); }



//
// exprList
//

private var unpackExpr = bounds(modify(
    x => UnpackExpr(move(x.1)),
    sequence(ellipsis, expr),
));

private var exprListItem = choice(
    modify(x => ExprListItem(move(x)), unpackExpr),
    modify(x => ExprListItem(move(x)), statementExprList),
    modify(x => ExprListItem(move(x)), expr),
    modify(x => ExprListItem(SubExprList(move(x.1))), sequence(punc(#"("), optExprList, punc(#")"))),
);

private var statementExprList2 = modify(
    x => StatementExprList(x.1, x.2),
    sequence(punc(#"("), oneOrMore(statement), optExprList, punc(#")")),
);

private statementExprList(input) Maybe[StatementExprList] = statementExprList2(input);

private var exprList2 = commaList(exprListItem);

private exprList(input) Maybe[ExprList] { return exprList2(input); }

private var optExprList = modify(
    x => maybe(x, move, () => ExprList()),
    optional(exprList),
);



//
// patterns
//

private patternParser(forward modifier, forward parser) = modify(
    x => Pattern(move(x)),
    bounds(modify(modifier, parser)),
);

private var boolLiteralPattern = patternParser(
    BoolLiteral,
    choice(boolTrue, boolFalse),
);

private var intLiteralPattern = patternParser(
    x => IntLiteral(x.0, String(x.1)),
    sequence(optSign, tokenData(INT_LITERAL)),
);

private var charLiteralPattern = patternParser(
    x => CharLiteral(String(x)),
    tokenData(CHAR_LITERAL),
);

private var stringLiteralPattern = patternParser(
    x => StringLiteral(String(x)),
    tokenData(STRING_LITERAL),
);

private var nameRefPattern = patternParser(
    x => NameRef(move(x)),
    namePath,
);

private var patternNameRefPattern = patternParser(
    x => PatternNameRef(move(x.1)),
    sequence(punc(#"'"), identifier),
);

private var indexingPattern = patternParser(
    x => IndexingPattern(move(x.0), move(x.2)),
    sequence(nameRef, punc(#"["), listPattern, punc(#"]")),
);

private var tuplePattern = patternParser(
    x => TuplePattern(move(x.1)),
    sequence(punc(#"["), listPattern, punc(#"]")),
);

private var targetPattern = choice(
    indexingPattern, nameRefPattern, patternNameRefPattern, tuplePattern,
);

private var pattern2 = choice(
    boolLiteralPattern, charLiteralPattern, intLiteralPattern, stringLiteralPattern,
    targetPattern,
);

private pattern(input) Maybe[Pattern] { return pattern2(input); }

private var listPattern2 = variadicList(
    pattern,
    modify(
        x => move(x.1),
        sequence(ellipsis, patternNameRefPattern),
    ),
);

private listPattern(input) Maybe[ListPattern] { return listPattern2(input); }

private var optListPattern = modify(
    x => maybe(x, move, () => ListPattern()),
    optional(listPattern),
);



//
// typePattern, multiTypePattern
//

private var typePattern = modify(
    x => move(x.1),
    sequence(punc(#":"), pattern),
);
private var optTypePattern = optional(typePattern);

private var typeExpr = modify(
    x => move(x.1),
    sequence(punc(#":"), expr),
);
private var optTypeExpr = optional(typeExpr);

private var multiTypePattern = modify(
    x => move(x.1),
    sequence(punc(#":"), patternNameRefPattern),
);
private var optMultiTypePattern = optional(multiTypePattern);



//
// top level items
//

private topLevelItemParser(forward modifier, forward parser) = modify(
    x => TopLevelItem(move(x)),
    bounds(modify(modifier, parser)),
);

private var patternVar = modify(
    x => move(x.1),
    sequence(punc(#"'"), identifier),
);

private var variadicPatternVarList = variadicList(
    patternVar,
    modify(
        x => move(x.1),
        sequence(ellipsis, patternVar),
    ),
);

// visibility

private var visibility = optional(choice(
        modify(x => VIS_PUBLIC,  kw_public),
        modify(x => VIS_PRIVATE, kw_private),
    ));

// importDef

private var namePath = separatedListStrict(punc(#"."), identifier);

private var importAlias = optional(modify(x => x.1, sequence(kw_as, identifier)));

private importSpecParser(forward modifier, forward parser) = modify(
    x => ImportSpec(move(x)),
    bounds(modify(modifier, parser)),
);


private var qualifiedImportSpec = importSpecParser(
    x => QualifiedImportSpec(),
    punc(#";")
);
private var generalImportSpec = importSpecParser(
    x => GeneralImportSpec(),
    sequence(punc(#"."), punc(#"*"), punc(#";"))
);
private var aliasedImportSpec = importSpecParser(
    x => AliasedImportSpec(x.1),
    sequence(kw_as, identifier, punc(#";"))
);
private var specificImportSpec = bounds(modify(
    x => SpecificImportSpec(just(x.0, VIS_PUBLIC), x.1, x.2),
    sequence(visibility, identifier, importAlias)
));
private var specificImportSpecList = modify(
    x => ImportSpec(x.2),
    sequence(punc(#"."), punc(#"("), optCommaList(specificImportSpec), punc(#")"), punc(#";")),
);
private var importSpec = choice(
    qualifiedImportSpec,
    generalImportSpec,
    aliasedImportSpec,
    specificImportSpecList,
);

private var importDef = topLevelItemParser(
    x => Import(just(x.0, VIS_PRIVATE), move(x.2), move(x.3)),
    sequence(visibility, kw_import, namePath, importSpec),
);

// symbolDef

private var symbolParams = modify(
    x => move(x.1),
    sequence(punc(#"["), variadicPatternVarList, punc(#"]")),
);

private var optSymbolParams = modify(
    x => maybe(x, move, () => VariadicList[Identifier]()),
    optional(symbolParams),
);

private var symbolName = bounds(modify(
    x => SymbolName(x.0, x.1),
    sequence(identifier, optSymbolParams),
));

private var symbolDef = topLevelItemParser(
    x => Symbol(just(x.0, VIS_PUBLIC), move(x.2), move(x.3)),
    sequence(
        visibility, kw_define, symbolName,
        optional(symbolExprList), punc(#";")
    ),
);

private var symbolExprList = modify(
    x => move(x.1),
    sequence(kw_as, exprList),
);

// attributeDef

private var optPredicate = optional(modify(
    x => move(x.1),
    sequence(punc(#"|"), expr),
));

private var attributeDef = topLevelItemParser(
    x => Attribute(move(x.1), move(x.2), move(x.4)),
    sequence(
        kw_extend, targetPattern, optPredicate,
        kw_with, expr, punc(#";"),
    ),
);

// staticOverloadDef

private var staticArguments = modify(
    x => move(x.1),
    sequence(punc(#"("), optListPattern, punc(#")")),
);

private var staticOverloadDefinition = modify(
    x => StaticOverloadDefinition(move(x.0), move(x.1), move(x.3)),
    sequence(staticArguments, optPredicate, punc(#"="), optExprList, punc(#";")),
);

private var staticOverloadDef = topLevelItemParser(
    x => StaticOverload(move(x.2), move(x.3)),
    sequence(kw_overload, punc(#"#"), targetPattern, staticOverloadDefinition),
);

// overloadDef

private var argumentKind = choice(
    modify(x => ARG_CONST, kw_const),
    modify(x => ARG_REF, kw_ref),
    modify(x => ARG_RVALUE, kw_rvalue),
    modify(x => ARG_FORWARD, kw_forward),
);

private var boundArgument = bounds(modify(
    x => BoundArgument(move(x.0), move(x.1), move(x.2)),
    sequence(optional(argumentKind), identifier, optTypePattern),
));

private var staticArgument = bounds(modify(
    x => StaticArgument(move(x.1)),
    sequence(punc(#"#"), pattern),
));

private var argument = choice(
    modify(Argument, boundArgument),
    modify(Argument, staticArgument),
);

private var multiBoundArgument = bounds(modify(
    x => BoundArgument(move(x.0), move(x.2), move(x.3)),
    sequence(
        optional(argumentKind), ellipsis,
        identifier, optMultiTypePattern
    ),
));

private var multiStaticArgument = modify(
    x => move(x.1),
    sequence(ellipsis, staticArgument),
);

private var multiArgument = choice(
    modify(x => Argument(x), multiBoundArgument),
    modify(x => Argument(x), multiStaticArgument),
);

private var arguments = variadicList(
    argument, multiArgument,
);

private var optArguments = modify(
    x => maybe(x, move, () => VariadicList[Argument]()),
    optional(arguments),
);

private var baseReturn = choice(
    modify(
        x => (Maybe(move(x.0)), move(x.2)),
        sequence(identifier, punc(#":"), expr),
    ),
    modify(x => (nothing(Identifier), move(x)), expr),
);

private var returnKind = choice(
    modify(x => RETURN_CONST, kw_const),
    modify(x => RETURN_REF, kw_ref),
    modify(x => RETURN_RVALUE, kw_rvalue),
);

private var returnArityKind = modify(
    x => maybe(x, x => RETURN_MULTI, () => RETURN_SINGLE),
    optional(ellipsis),
);

private var namedReturn2 = bounds(modify(
    x => NamedReturn(move(x.2), ReturnSpec(x.0, x.1, move(x.4))),
    sequence(
        optional(returnKind), returnArityKind, identifier, punc(#":"), expr,
    ),
));

private var namedReturn = modify(
    x => { x.spec.location = x.location; return x; },
    namedReturn2
);

private var namedReturnList = modify(
    x => x.1,
    sequence(punc(#"-->"), optCommaList(namedReturn)),
);

private var unnamedReturn = bounds(modify(
    x => ReturnSpec(x.0, x.1, move(x.2)),
    sequence(optional(returnKind), returnArityKind, expr),
));

private var unnamedReturnList = modify(
    x => x.1,
    sequence(punc(#":"), optCommaList(unnamedReturn)),
);

private var returnList = choice(
    modify(x => ReturnList(x), namedReturnList),
    modify(x => ReturnList(x), unnamedReturnList),
);

private var returnExprKind = choice(
    modify(x => RETURN_EXPR_CONST, kw_const),
    modify(x => RETURN_EXPR_REF, kw_ref),
    modify(x => RETURN_EXPR_RVALUE, kw_rvalue),
    modify(x => RETURN_EXPR_FORWARD, kw_forward),
);

private var returnExprListItem = bounds(modify(
    x => ReturnExprListItem(move(x.0), move(x.1)),
    sequence(optional(returnExprKind), exprListItem),
));

private var groupedReturnExprList1 = modify(
    x => map(
        y ref=> {
            var z = ReturnExprListItem(x.0, move(y));
            assignLocation(z, z.item);
            return move(z);
        },
        move(x.3),
    ),
    sequence(
        optional(returnExprKind), ellipsis,
        punc(#"("), exprList, punc(#")"),
    ),
);

private var groupedReturnExprList = choice(
    groupedReturnExprList1,
    modify(
        x => Vector[ReturnExprListItem](move(x)),
        returnExprListItem,
    ),
);

private var returnExprList = modify(
    x => {
        var result = Vector[ReturnExprListItem]();
        for (a in x)
            push(result, move(a));
        return move(result);
    },
    commaList(groupedReturnExprList),
);

private var optReturnExprList = modify(
    x => maybe(x, move, () => ReturnExprList()),
    optional(returnExprList),
);

private var exprCodeBody = modify(CodeBody, bounds(modify(
    x => ExprCodeBody(move(x.1)),
    sequence(punc(#"="), optReturnExprList, punc(#";")),
)));

private var literalCodeBodyKind = choice(
    modify(x => LITERAL_C, kw_c),
    modify(x => LITERAL_ASM, kw_asm),
    modify(x => LITERAL_LLVM, kw_llvm),
);

private var literalCodeBodyProcedure = modify(CodeBody, literalCodeBody);

private var literalCodeBody = bounds(modify(
    x => LiteralCodeBody(x.0, String(x.1)),
    sequence(literalCodeBodyKind, tokenData(LITERAL_CODE), punc(#";")),
));

private var blockCodeBody = modify(CodeBody, bounds(block));

private var undefinedCodeBody = modify(x => CodeBody(UndefinedCodeBody()), punc(#";"));

private var codeBody = choice(
    exprCodeBody, blockCodeBody, literalCodeBodyProcedure, undefinedCodeBody
);

private var optReturnList = modify(
    m => just(m, ReturnList(Nothing())),
    optional(returnList),
);

private var overloadDefinition = modify(
    x => OverloadDefinition(
        move(x.1), // arguments
        move(x.3), // attributes
        move(x.4), // returns
        move(x.5), // predicate
        move(x.6) // body
    ),
    sequence(
        punc(#"("), optArguments, punc(#")"),
        zeroOrMore(overloadAttribute),
        optReturnList, optPredicate, codeBody,
    ),
);

private var overloadAttribute = bounds(modify(
    OverloadAttribute,
    choice(
        modify(x => OVERLOAD_INLINE,   kw_inline),
        modify(x => OVERLOAD_NORETURN, kw_noreturn),
        modify(x => OVERLOAD_NOTHROW,  kw_nothrow),
    )
));

private var overloadDef = topLevelItemParser(
    x => Overload(move(x.1), move(x.2)),
    sequence(kw_overload, targetPattern, overloadDefinition),
);

// procedureDef, staticFunctionDef

private var procedureDef = topLevelItemParser(
    x => Procedure(just(x.0, VIS_PUBLIC), x.1, x.2),
    sequence(visibility, symbolName, overloadDefinition),
);

private var staticFunctionDef = topLevelItemParser(
    x => StaticFunction(just(x.0, VIS_PUBLIC), x.2, x.3),
    sequence(visibility, punc(#"#"), symbolName, staticOverloadDefinition),
);

// externalProcedureDef

private var externalReturn = bounds(modify(
    x => ExternalReturn(x.1),
    sequence(punc(#":"), optional(expr)),
));

private var externalProcedureDef = topLevelItemParser(
    x => ExternalProcedure(just(x.0, VIS_PUBLIC), x.2, x.5, x.3, x.4, x.6, x.7),
    sequence(
        visibility,
        kw_external,
        optExternalAttributes,
        identifier,
        externalArgumentList,
        zeroOrMore(overloadAttribute),
        optional(externalReturn),
        codeBody
    ),
);

private var optExternalAttributes = modify(
    x => maybe(x, expr => Maybe(expr.1)),
    optional(sequence(punc(#"("), exprList, punc(#")"))),
);

private var externalArgumentList = modify(
    x => ExternalArgumentList(x.1 .0, just?(x.1 .1)),
    sequence(punc(#"("), variadicListPair(externalArgument, ellipsis), punc(#")")),
);

private var externalArgument = bounds(modify(
    x => ExternalArgument(move(x.0), move(x.2)),
    sequence(identifier, punc(#":"), expr),
));

// globalBinding

private var globalBinding = topLevelItemParser(
    x => GlobalBinding(just(x.0, VIS_PUBLIC), x.1, x.2),
    sequence(visibility, bindingKind, commaList(singleGlobalBinding), punc(#";"))
);

private var singleGlobalBinding = modify(
    x => SingleGlobalBinding(x.0, x.1, x.2),
    sequence(symbolName, optTypeExpr, optInitializerExpr),
);

private var initializerExpr = modify(
    x => move(x.1),
    sequence(punc(#"="), expr),
);
private var optInitializerExpr = optional(initializerExpr);

// globalAlias

private var globalAlias = topLevelItemParser(
    x => GlobalAlias(just(x.0, VIS_PUBLIC), x.2, x.4),
    sequence(visibility, kw_alias, symbolName, punc(#"="), pattern, punc(#";")),
);

// globalLiteralCodeBody

private var globalLiteralCodeBody = topLevelItemParser(
    x => GlobalLiteralCodeBody(move(x)),
    literalCodeBody
);

// statements

private var labelDef = bounds(modify(
    x => LabelDef(x.1),
    sequence(punc(#"@"), identifier),
));

private var block2 = bounds(modify(
    x => Block(x.0, x.2),
    sequence(optional(labelDef), punc(#"{"), zeroOrMore(statement), punc(#"}")),
));

private block(input) Maybe[Block] = block2(input);

private var statement2 = choice(
    blockStatement,
    bindingStatement,
    assignmentStatement,
    returnStatement,
    breakStatement,
    continueStatement,
    ifStatement,
    forStatement,
    staticForStatement,
    whileStatement,
    switchStatement,
    tryStatement,
    exprStatement,
    emptyStatement,
    unreachableStatement,
);

private statement(input) Maybe[Statement] = statement2(input);

private statementParser(forward modifier, forward parser) = modify(
    x => Statement(move(x)),
    bounds(modify(modifier, parser)),
);

private var blockStatement = statementParser(x => x, block);

private var bindingStatement = statementParser(
    x => BindingStatement(x.0, x.1),
    sequence(bindingKind, bindingList, punc(#";"))
);

private var bindingKind = choice(
    modify(x => BINDING_VAR, kw_var),
    modify(x => BINDING_CONST, kw_const),
    modify(x => BINDING_REF, kw_ref),
    modify(x => BINDING_RVALUE, kw_rvalue),
    modify(x => BINDING_FORWARD, kw_forward),
);

private var bindingList = choice(
    modify(x => BindingList(x), singleBindingList),
    modify(x => BindingList(x), multipleBindingList),
);

private var bindingName = modify(
    x => BindingName(x.0, x.1),
    sequence(identifier, optTypeExpr),
);

private var singleBindingList = commaList(singleBinding);
private var singleBinding = modify(
    x => SingleBinding(x.0, x.2),
    sequence(bindingName, punc(#"="), expr),
);

private var variadicBindingNameList = variadicList(
    bindingName,
    modify(
        x => BindingName(x.1, nothing(Expr)),
        sequence(ellipsis, identifier),
    ),
);

private var multipleBindingExprList = modify(
    x => x.1,
    sequence(punc(#"="), exprList),
);

private var multipleBindingList = bounds(modify(
    x => MultipleBindingList(x.0, x.1),
    sequence(variadicBindingNameList, optional(multipleBindingExprList)),
));

private var assignmentOp = choice(
    modify(x => ASSIGNMENT_ASSIGN,     punc(#"=")),
    modify(x => ASSIGNMENT_INITIALIZE, punc(#"<--")),
    modify(x => ASSIGNMENT_MULTIPLY,   punc(#"*=")),
    modify(x => ASSIGNMENT_DIVIDE,     punc(#"/=")),
    modify(x => ASSIGNMENT_QUOTIENT,   sequence(kw_div, punc(#"="))),
    modify(x => ASSIGNMENT_REMAINDER,  sequence(kw_mod, punc(#"="))),
    modify(x => ASSIGNMENT_ADD,        punc(#"+=")),
    modify(x => ASSIGNMENT_SUBTRACT,   punc(#"-=")),
);

private var assignmentStatement = statementParser(
    x => AssignmentStatement(x.1, x.0, x.2),
    sequence(exprList, assignmentOp, exprList, punc(#";")),
);

private var returnStatement = statementParser(
    x => ReturnStatement(x.1),
    sequence(kw_return, optReturnExprList, punc(#";")),
);

private var labelRef = modify(x => x.1, sequence(punc(#"@"), identifier));

private var breakStatement = statementParser(
    x => BreakStatement(x.1),
    sequence(kw_break, optional(labelRef), punc(#";")),
);

private var continueStatement = statementParser(
    x => ContinueStatement(x.1),
    sequence(kw_continue, optional(labelRef), punc(#";")),
);

private var elseBlock = modify(
    x => x.1,
    sequence(kw_else, statement),
);

private var ifStatement = statementParser(
    x => IfStatement(x.2, x.4, x.5),
    sequence(kw_if, punc(#"("), optStatementExprBody, punc(#")"),
        statement,
        optional(elseBlock)
    ),
);

private var forStatement = statementParser(
    x => ForStatement(x.0, x.3, x.5, x.7),
    sequence(optional(labelDef), kw_for, punc(#"("), arguments, kw_in, expr, punc(#")"), statement),
);

private var staticForStatement = statementParser(
    x => StaticForStatement(x.0, x.4, x.6, x.8),
    sequence(optional(labelDef), kw_static, kw_for, punc(#"("), argument, kw_in, exprList, punc(#")"), statement),
);

private var whileStatement = statementParser(
    x => WhileStatement(x.0, x.3, x.5),
    sequence(optional(labelDef), kw_while, punc(#"("), optStatementExprBody, punc(#")"),
        statement
    ),
);

private var switchStatement = statementParser(
    x => SwitchStatement(x.2, x.4, x.5),
    sequence(kw_switch, punc(#"("), optStatementExprBody, punc(#")"),
        oneOrMore(caseBlock),
        optional(elseBlock),
    ),
);

private var caseBlock = bounds(modify(
    x => CaseBlock(x.2, x.4),
    sequence(kw_case, punc(#"("), exprList, punc(#")"), statement),
));

private var tryStatement = statementParser(
    x => TryStatement(x.1, x.2),
    sequence(kw_try, block, oneOrMore(catchBlock)),
);

private var catchBlock = bounds(modify(
    x => CatchBlock(x.2, x.4),
    sequence(kw_catch, punc(#"("), bindingName, punc(#")"), block),
));

private var exprStatement = statementParser(
    x => ExprStatement(x.0),
    sequence(expr, punc(#";")),
);

private var emptyStatement = statementParser(
    x => EmptyStatement(),
    punc(#";"),
);

private var unreachableStatement = statementParser(
    x => UnreachableStatement(),
    sequence(kw_unreachable, punc(#";")),
);

// topLevelItem

private var topLevelItem = choice(
    importDef, symbolDef, attributeDef, staticOverloadDef, overloadDef,
    procedureDef, staticFunctionDef, externalProcedureDef, globalLiteralCodeBody,
    globalBinding, globalAlias
);

// interactorImport

private var interactorExprList = modify(x => InteractorInput(x.0),
    sequence(exprList, punc(#";")),
);

private var interactorImport = modify(
    x => InteractorInput(InteractorImport(move(x.1), move(x.2))),
    sequence(kw_import, namePath, importSpec),
);

private var interactorInput = choice(interactorExprList, interactorImport);



//
// parse implementation
//

private var parseInteractorInput2 = modify(
    x => x.0,
    sequence(interactorInput, token(SENTINEL)),
);

private impl_parseInteractorInput(tokens:SourceTokens) {
    var input = ParserInput(tokens);
    var result = parseInteractorInput2(input);
    if (nothing?(result))
        throw ParserError(tokens, input.maxCurrent);
    return require(move(result));
}

external parser_parseInteractorInput(
    ex:ExternalException,
    inTokens:Pointer[SourceTokens],
    out:Pointer[InteractorInput]
) {
    wrapAsExternal(impl_parseInteractorInput, static 1, ex, inTokens, out);
}

private var parse2 = modify(
    x => SourceAST(SourceTokens(), move(x.0)),
    sequence(zeroOrMore(topLevelItem), token(SENTINEL)),
);

private impl_parse(tokens:SourceTokens) {
    var input = ParserInput(tokens);
    var ast = parse2(input);
    if (nothing?(ast))
        throw ParserError(tokens, input.maxCurrent);
    var ast2 = require(move(ast));
    ast2.tokens = tokens;

    return move(ast2);
}

external parser_parse(
    ex:ExternalException,
    inTokens:Pointer[SourceTokens],
    out:Pointer[SourceAST]
) {
    wrapAsExternal(impl_parse, static 1, ex, inTokens, out);
}
