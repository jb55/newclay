import maybe.*;
import newclay.ast as ast;

private record DumpASTVisitor[S](stream:S, depth:Int);

[S] private dumpIndent(v:DumpASTVisitor[S]) {
    for (i in range(v.depth))
        printTo(v.stream, "  ");
}

[S] private dumpModuleName(v:DumpASTVisitor[S], name:Vector[ast.Identifier]) {
    interleave(name,
        () ref=> { printTo(v.stream, "."); },
        component ref=> { printTo(v.stream, component.str); },
    );
}

[S] private dumpVisibility(
    v:DumpASTVisitor[S],
    vis:ast.VisibilityKind,
    dfltVis:ast.VisibilityKind
) {
    if (vis != dfltVis) {
        if (vis == ast.VIS_PUBLIC)
            printTo(v.stream, "public ");
        else
            printTo(v.stream, "private ");
    }
}

[S] private dumpNode(v:DumpASTVisitor[S], node) {
    printTo(v.stream, "<<", Type(node), ">>");
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.Import) {
    dumpVisibility(v, node.visibility, ast.VIS_PRIVATE);
    printTo(v.stream, "import ");
    dumpModuleName(v, node.name);
    match(node.spec,
        ast.GeneralImportSpec, s ref=> { printlnTo(v.stream, ".*"); },
        ast.SpecificImportSpecs, s ref=> {
            printlnTo(v.stream, ".(");
            inc(v.depth);

            for (spec in s) {
                dumpIndent(v);
                dumpVisibility(v, spec.visibility, ast.VIS_PUBLIC);
                printTo(v.stream, spec.name.str);
                maybe(spec.asName,
                    asName ref=> { printTo(v.stream, " as ", asName.str); },
                );
                printlnTo(v.stream);
            }

            dec(v.depth);
            printlnTo(v.stream, ")");
        },
        ast.QualifiedImportSpec, s ref=> { printlnTo(v.stream); },
        ast.AliasedImportSpec, s ref=> {
            printlnTo(v.stream, " as ", s.asName.str);
        },
    );
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.Symbol) {
    printlnTo(v.stream);
    dumpVisibility(v, node.visibility, ast.VIS_PUBLIC);
    printTo(v.stream, "def ");
    dumpNode(v, node.name);
    maybe(node.expr, expr ref=> {
        printTo(v.stream, " as ");
        dumpList(v, expr);
    });
    printlnTo(v.stream);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.Attribute) {
    printlnTo(v.stream);
    printTo(v.stream, "extend ");
    dumpNode(v, node.target);
    maybe(node.predicate,
        predicate ref=> {
            inc(v.depth);
            printlnTo(v.stream);
            dumpIndent(v);
            printTo(v.stream, "| ");
            dumpNode(v, predicate);
            printlnTo(v.stream);
            dumpIndent(v);
        },
        () ref=> {
            printTo(v.stream, " ");
        },
    );
    printTo(v.stream, "with ");
    dumpNode(v, node.body);
    printlnTo(v.stream);
    maybe(node.predicate, predicate ref=> { dec(v.depth); });
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.StaticOverloadDefinition) {
    printTo(v.stream, "(");
    dumpVariadicList(v, node.args);
    printlnTo(v.stream, ")");

    inc(v.depth);
    maybe(node.predicate, predicate ref=> {
        dumpIndent(v);
        printTo(v.stream, "| ");
        dumpNode(v, predicate);
        printlnTo(v.stream);
    });
    dumpIndent(v);
    printTo(v.stream, "= ");
    dumpList(v, node.body);
    printlnTo(v.stream);
    dec(v.depth);
}

[S] private dumpOverloadAttributes(v:DumpASTVisitor[S], attributes:Vector[ast.OverloadAttribute]) {
    for (attribute in attributes) {
        switch (attribute.kind) {
        case ast.OVERLOAD_INLINE:
            printTo(v.stream, " inline");
            break;
        case ast.OVERLOAD_NORETURN:
            printTo(v.stream, " noreturn");
            break;
        case ast.OVERLOAD_NOTHROW:
            printTo(v.stream, " nothrow");
            break;
        }
    }
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.OverloadDefinition) {
    printTo(v.stream, "(");
    dumpVariadicList(v, node.args);
    printTo(v.stream, ")");

    dumpOverloadAttributes(v, node.attributes);

    match(node.returns,
        Nothing, x ref=> {},
        Vector[ast.NamedReturn], namedReturns ref=> {
            dumpIndent(v);
            printTo(v.stream, " --> ");
            dumpList(v, namedReturns);
        },
        Vector[ast.ReturnSpec], declaredReturns ref=> {
            dumpIndent(v);
            printTo(v.stream, " : ");
            dumpList(v, declaredReturns);
        },
    );

    printlnTo(v.stream);
    inc(v.depth);
    maybe(node.predicate, predicate ref=> {
        dumpIndent(v);
        printTo(v.stream, "| ");
        dumpNode(v, predicate);
        printlnTo(v.stream);
    });

    dumpNode(v, *node.body);
    dec(v.depth);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.SymbolName) {
    printTo(v.stream, node.name.str);
    if (not empty?(node.params.items) or just?(node.params.variadicItem)) {
        printTo(v.stream, "[");
        interleave(node.params.items,
            () ref=> { printTo(v.stream, ", "); },
            param ref=> { printTo(v.stream, "'", param.str); },
        );
        maybe(node.params.variadicItem, param ref=> {
            if (not empty?(node.params.items))
                printTo(v.stream, ", ");
            printTo(v.stream, "..'", param.str);
        });
        printTo(v.stream, "]");
    }
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.NamedReturn) {
    maybe(node.spec.kind, kind ref=> {
        switch (kind) {
        case ast.RETURN_CONST:
            printTo(v.stream, "const ");
            break;
        case ast.RETURN_REF:
            printTo(v.stream, "ref ");
            break;
        case ast.RETURN_RVALUE:
            printTo(v.stream, "rvalue ");
            break;
        }
    });
    if (node.spec.arityKind == ast.RETURN_MULTI)
        printTo(v.stream, "..");

    printTo(v.stream, node.name.str, ":");

    dumpNode(v, node.spec.type);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.ReturnSpec) {
    maybe(node.kind, kind ref=> {
        switch (kind) {
        case ast.RETURN_CONST:
            printTo(v.stream, "const ");
            break;
        case ast.RETURN_REF:
            printTo(v.stream, "ref ");
            break;
        case ast.RETURN_RVALUE:
            printTo(v.stream, "rvalue ");
            break;
        }
    });
    if (node.arityKind == ast.RETURN_MULTI)
        printTo(v.stream, "..");

    dumpNode(v, node.type);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.UndefinedCodeBody) {
    dumpIndent(v);
    printlnTo(v.stream, "disabled");
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.ExprCodeBody) {
    dumpIndent(v);
    printTo(v.stream, "= ");
    dumpList(v, node.exprs);
    printlnTo(v.stream);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.LiteralCodeBody) {
    dumpIndent(v);
    switch(node.kind) {
    case ast.LITERAL_C:
        printTo(v.stream, "__c__ ");
        break;
    case ast.LITERAL_LLVM:
        printTo(v.stream, "__llvm__ ");
        break;
    case ast.LITERAL_ASM:
        printTo(v.stream, "__asm__ ");
        break;
    }
    printTo(v.stream, node.code);
    printlnTo(v.stream);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.Statement) {
    dumpIndent(v);
    dumpStatement(v, *node);
    printlnTo(v.stream);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.Block) {
    dumpIndent(v);
    dumpStatement(v, node);
    printlnTo(v.stream);
}

private procedure dumpStatement;

[S] overload dumpStatement(v:DumpASTVisitor[S], node:ast.Block) {
    maybe(node.label, label ref=> {
        printlnTo(v.stream, "@", label.name.str, " do");
        inc(v.depth);
        dumpIndent(v);
    });

    if (empty?(node.statements))
        printTo(v.stream, "void");
    else interleave(node.statements,
        () ref=> {
            printlnTo(v.stream);
            dumpIndent(v);
        },
        stmt ref=> {
            match(stmt,
                ast.Block, subblock ref=> {
                    if (nothing?(subblock.label)) {
                        printlnTo(v.stream, "do");
                        inc(v.depth);
                        dumpIndent(v);
                        dumpStatement(v, subblock);
                        dec(v.depth);
                    } else
                        dumpStatement(v, subblock);
                },
                MatchDefault, x ref=> {
                    dumpStatement(v, x);
                },
            );
        }
    );

    maybe(node.label, label ref=> { dec(v.depth); });
}

[S] private dumpBindingKind(v:DumpASTVisitor[S], kind:ast.BindingKind) {
    switch (kind) {
    case ast.BINDING_VAR:
        printTo(v.stream, "var ");
        break;
    case ast.BINDING_CONST:
        printTo(v.stream, "const ");
        break;
    case ast.BINDING_REF:
        printTo(v.stream, "ref ");
        break;
    case ast.BINDING_RVALUE:
        printTo(v.stream, "rvalue ");
        break;
    case ast.BINDING_FORWARD:
        printTo(v.stream, "fwd ");
        break;
    }

}

[S] overload dumpStatement(v:DumpASTVisitor[S], node:ast.BindingStatement) {
    dumpBindingKind(v, node.kind);
    dumpNode(v, *node.bindings);
    printTo(v.stream);
}

[S] overload dumpNode(v:DumpASTVisitor[S], nodes:ast.SingleBindingList) {
    if (size(nodes) == 1) {
        dumpNode(v, nodes[0].name);
        printTo(v.stream, " = ");
        dumpNode(v, nodes[0].value);
    } else {
        inc(v.depth);
        for (node in nodes) {
            printlnTo(v.stream);
            dumpIndent(v);
            dumpNode(v, node.name);
            printTo(v.stream, " = ");
            dumpNode(v, node.value);
        }
        dec(v.depth);
    }
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.MultipleBindingList) {
    dumpVariadicList(v, node.names);
    maybe(node.values, values ref=> {
        printTo(v.stream, " = ");
        dumpList(v, values);
    });
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.BindingName) {
    printTo(v.stream, node.name.str);
    maybe(node.type, type ref=> {
        printTo(v.stream, ":");
        dumpNode(v, type);
    });
}

[S] overload dumpStatement(v:DumpASTVisitor[S], node:ast.AssignmentStatement) {
    dumpList(v, node.to);
    switch (node.kind) {
    case ast.ASSIGNMENT_ASSIGN:
        printTo(v.stream, " = ");
        break;
    case ast.ASSIGNMENT_ADD:
        printTo(v.stream, " += ");
        break;
    case ast.ASSIGNMENT_SUBTRACT:
        printTo(v.stream, " -= ");
        break;
    case ast.ASSIGNMENT_MULTIPLY:
        printTo(v.stream, " *= ");
        break;
    case ast.ASSIGNMENT_DIVIDE:
        printTo(v.stream, " /= ");
        break;
    case ast.ASSIGNMENT_QUOTIENT:
        printTo(v.stream, " div= ");
        break;
    case ast.ASSIGNMENT_REMAINDER:
        printTo(v.stream, " mod= ");
        break;
    case ast.ASSIGNMENT_INITIALIZE:
        printTo(v.stream, " <-- ");
        break;
    }
    dumpList(v, node.from);
}

[S] overload dumpStatement(v:DumpASTVisitor[S], node:ast.ReturnStatement) {
    if (empty?(node.values))
        printTo(v.stream, "return");
    else {
        printTo(v.stream, "return ");
        dumpList(v, node.values);
    }
}

[S] overload dumpStatement(v:DumpASTVisitor[S], node:ast.BreakStatement) {
    maybe(node.label,
        label ref=> { printTo(v.stream, "break @", label.str); },
        () ref=> { printTo(v.stream, "break"); },
    );
}

[S] overload dumpStatement(v:DumpASTVisitor[S], node:ast.ContinueStatement) {
    maybe(node.label,
        label ref=> { printTo(v.stream, "continue @", label.str); },
        () ref=> { printTo(v.stream, "continue"); },
    );
}

[S] private dumpIfBody(v:DumpASTVisitor[S], node:ast.IfStatement) {
    dumpStatementExpr(v, node.condition);
    printlnTo(v.stream);
    inc(v.depth);
    dumpIndent(v);
    dumpStatement(v, *node.thenBody);
    dec(v.depth);
    maybe(node.elseBody, elseBody ref=> {
        dumpIndent(v);
        match(elseBody,
            ast.IfStatement, subif ref=> {
                printlnTo(v.stream);
                dumpIndent(v);
                printTo(v.stream, "else if ");
                dumpIfBody(v, subif);
            },
            MatchDefault, body ref=> {
                printlnTo(v.stream);
                dumpIndent(v);
                printlnTo(v.stream, "else");
                inc(v.depth);
                dumpIndent(v);
                dumpStatement(v, body);
                dec(v.depth);
            },
        );
    });
}

[S] overload dumpStatement(v:DumpASTVisitor[S], node:ast.IfStatement) {
    printTo(v.stream, "if ");
    dumpIfBody(v, node);
}

[S] overload dumpStatement(v:DumpASTVisitor[S], node:ast.ForStatement) {
    maybe(node.label, label ref=> {
        printTo(v.stream, "@", label.name.str, " ");
    });
    printTo(v.stream, "for ");
    dumpVariadicList(v, node.bodyBindings);
    printTo(v.stream, " in ");
    dumpNode(v, node.sequenceValue);
    printlnTo(v.stream);

    inc(v.depth);
    dumpIndent(v);
    dumpStatement(v, *node.body);
    dec(v.depth);
}

[S] overload dumpStatement(v:DumpASTVisitor[S], node:ast.StaticForStatement) {
    maybe(node.label, label ref=> {
        printTo(v.stream, "@", label.name.str, " ");
    });

    printTo(v.stream, "static for ");
    dumpNode(v, node.bodyBinding);
    printTo(v.stream, " in ");
    dumpList(v, node.values);
    printlnTo(v.stream);

    inc(v.depth);
    dumpIndent(v);
    dumpStatement(v, *node.body);
    dec(v.depth);
}

[S] overload dumpStatement(v:DumpASTVisitor[S], node:ast.WhileStatement) {
    maybe(node.label, label ref=> {
        printTo(v.stream, "@", label.name.str, " ");
    });

    printTo(v.stream, "while ");
    dumpStatementExpr(v, node.condition);
    printlnTo(v.stream);
    inc(v.depth);
    dumpIndent(v);
    dumpStatement(v, *node.body);
    dec(v.depth);
}

[S] overload dumpStatement(v:DumpASTVisitor[S], node:ast.SwitchStatement) {
    printTo(v.stream, "switch ");
    dumpStatementExpr(v, node.value);
    for (block in node.caseBlocks) {
        printlnTo(v.stream);
        dumpIndent(v);
        printTo(v.stream, "case ");
        dumpList(v, block.values);
        printlnTo(v.stream);
        inc(v.depth);
        dumpIndent(v);
        dumpStatement(v, *block.body);
        dec(v.depth);
    }
    maybe(node.defaultBlock, block ref=> {
        printlnTo(v.stream);
        dumpIndent(v);
        printTo(v.stream, "else");
        printlnTo(v.stream);
        inc(v.depth);
        dumpIndent(v);
        dumpStatement(v, *block);
        dec(v.depth);
    });
}

[S] overload dumpStatement(v:DumpASTVisitor[S], node:ast.TryStatement) {
    printlnTo(v.stream, "try");
    inc(v.depth);
    dumpIndent(v);
    dumpStatement(v, node.body);
    dec(v.depth);
    for (block in node.catchBlocks) {
        printlnTo(v.stream);
        dumpIndent(v);
        printTo(v.stream, "catch ");
        dumpNode(v, block.binding);
        printlnTo(v.stream);
        inc(v.depth);
        dumpIndent(v);
        dumpStatement(v, block.body);
        dec(v.depth);
    }
}

[S] overload dumpStatement(v:DumpASTVisitor[S], node:ast.ExprStatement) {
    dumpNode(v, node.expr);
}

[S] overload dumpStatement(v:DumpASTVisitor[S], node:ast.EmptyStatement) {
    printTo(v.stream, "void");
}

[S] overload dumpStatement(v:DumpASTVisitor[S], node:ast.UnreachableStatement) {
    printTo(v.stream, "__unreachable__");
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.ReturnExprListItem) {
    maybe(node.kind, kind ref=> {
        switch (kind) {
        case ast.RETURN_EXPR_CONST:
            printTo(v.stream, "const ");
            break;
        case ast.RETURN_EXPR_REF:
            printTo(v.stream, "ref ");
            break;
        case ast.RETURN_EXPR_RVALUE:
            printTo(v.stream, "rvalue ");
            break;
        case ast.RETURN_EXPR_FORWARD:
            printTo(v.stream, "fwd ");
            break;
        }
    });
    dumpNode(v, node.item);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.ExprListItem) {
    dumpNode(v, *node);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.UnpackExpr) {
    printTo(v.stream, "..");
    dumpNode(v, node.expr);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.Argument) {
    dumpNode(v, *node);
}

[S] private dumpArgumentKind(v:DumpASTVisitor[S], mkind:Maybe[ast.ArgumentKind]) {
    maybe(mkind, kind ref=> {
        switch (kind) {
        case ast.ARG_CONST:
            printTo(v.stream, "const ");
            break;
        case ast.ARG_REF:
            printTo(v.stream, "ref ");
            break;
        case ast.ARG_RVALUE:
            printTo(v.stream, "rvalue ");
            break;
        case ast.ARG_FORWARD:
            printTo(v.stream, "fwd ");
            break;
        }
    });
}

[S] private dumpArgumentName(v:DumpASTVisitor[S], node:ast.BoundArgument) {
    printTo(v.stream, node.name.str);
    maybe(node.type, type ref=> {
        printTo(v.stream, ":");
        dumpNode(v, type);
    });
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.BoundArgument) {
    dumpArgumentKind(v, node.kind);
    dumpArgumentName(v, node);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.StaticArgument) {
    printTo(v.stream, "#");
    dumpNode(v, node.pattern);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.Expr) {
    dumpNode(v, *node);
}

private subExprNeedsParens?(parent, subexpr) = false;

[P, E |
    inValues?(P,
        ast.Indexing,
        ast.Call,
        ast.FieldRef,
        ast.StaticIndexing,
        ast.UnaryOpExpr,
    ) and inValues?(E,
        ast.AndExpr,
        ast.OrExpr,
        ast.NotExpr,
        ast.LambdaExpr,
        ast.IfExpr,
        ast.ThrowExpr,
        ast.BinaryOpExpr,
        ast.StaticExpr,
        ast.PairExpr,
    )
]
overload subExprNeedsParens?(parent:P, subexpr:E) = true;

[P |
    inValues?(P,
        ast.Indexing,
        ast.Call,
        ast.FieldRef,
        ast.StaticIndexing,
    )
]
overload subExprNeedsParens?(parent:P, subexpr:ast.UnaryOpExpr)
    = subexpr.operator != ast.OP_DEREFERENCE;

overload subExprNeedsParens?(parent:ast.UnaryOpExpr, subexpr:ast.UnaryOpExpr)
    = parent.operator == ast.OP_DEREFERENCE and subexpr.operator != ast.OP_DEREFERENCE;

[E |
    inValues?(E,
        ast.AndExpr,
        ast.OrExpr,
        ast.NotExpr,
        ast.LambdaExpr,
        ast.IfExpr,
        ast.ThrowExpr,
        ast.BinaryOpExpr,
        ast.PairExpr,
    )
]
overload subExprNeedsParens?(parent:ast.StaticExpr, subexpr:E) = true;

[E |
    inValues?(E,
        ast.AndExpr,
        ast.OrExpr,
        ast.NotExpr,
        ast.LambdaExpr,
        ast.IfExpr,
        ast.ThrowExpr,
        ast.PairExpr,
    )
]
overload subExprNeedsParens?(parent:ast.BinaryOpExpr, subexpr:E) = true;

overload subExprNeedsParens?(parent:ast.BinaryOpExpr, subexpr:ast.BinaryOpExpr) {
    switch (parent.operator) {
    case ast.OP_MULTIPLY:
    case ast.OP_DIVIDE:
    case ast.OP_QUOTIENT:
    case ast.OP_REMAINDER:
        return true;
    case ast.OP_ADD:
    case ast.OP_SUBTRACT:
        switch (subexpr.operator) {
        case ast.OP_MULTIPLY:
        case ast.OP_DIVIDE:
        case ast.OP_QUOTIENT:
        case ast.OP_REMAINDER:
            return false;
        default:
            return true;
        }
    case ast.OP_LESSER?:
    case ast.OP_LESSER_EQUALS?:
    case ast.OP_GREATER?:
    case ast.OP_GREATER_EQUALS?:
        switch (subexpr.operator) {
        case ast.OP_MULTIPLY:
        case ast.OP_DIVIDE:
        case ast.OP_QUOTIENT:
        case ast.OP_REMAINDER:
        case ast.OP_ADD:
        case ast.OP_SUBTRACT:
            return false;
        default:
            return true;
        }
    case ast.OP_EQUALS?:
    case ast.OP_NOT_EQUALS?:
        switch (subexpr.operator) {
        case ast.OP_MULTIPLY:
        case ast.OP_DIVIDE:
        case ast.OP_QUOTIENT:
        case ast.OP_REMAINDER:
        case ast.OP_ADD:
        case ast.OP_SUBTRACT:
        case ast.OP_LESSER?:
        case ast.OP_LESSER_EQUALS?:
        case ast.OP_GREATER?:
        case ast.OP_GREATER_EQUALS?:
            return false;
        default:
            return true;
        }
    default:
        return false;
    }
}

[E |
    inValues?(E,
        ast.AndExpr,
        ast.OrExpr,
        ast.LambdaExpr,
        ast.IfExpr,
        ast.ThrowExpr,
        ast.PairExpr,
    )
]
overload subExprNeedsParens?(parent:ast.NotExpr, subexpr:E) = true;

[E |
    inValues?(E,
        ast.OrExpr,
        ast.LambdaExpr,
        ast.IfExpr,
        ast.ThrowExpr,
        ast.PairExpr,
    )
]
overload subExprNeedsParens?(parent:ast.AndExpr, subexpr:E) = true;

[E |
    inValues?(E,
        ast.LambdaExpr,
        ast.IfExpr,
        ast.ThrowExpr,
        ast.PairExpr,
    )
]
overload subExprNeedsParens?(parent:ast.OrExpr, subexpr:E) = true;

[S, E | VariantMember?(ast.Expr, E)]
private dumpSubExpr(v:DumpASTVisitor[S], parent:E, subexpr:ast.Expr) {
    var needsParens? = subExprNeedsParens?(parent, *subexpr);
    if (needsParens?) printTo(v.stream, '(');
    dumpNode(v, *subexpr);
    if (needsParens?) printTo(v.stream, ')');
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.BoolLiteral) {
    printTo(v.stream, node.value);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.CharLiteral) {
    printTo(v.stream, node.value);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.IntLiteral) {
    if (node.negative?)
        printTo(v.stream, '-');
    printTo(v.stream, node.value);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.FloatLiteral) {
    if (node.negative?)
        printTo(v.stream, '-');
    printTo(v.stream, node.value);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.StringLiteral) {
    printTo(v.stream, node.value);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.NameRef) {
    dumpModuleName(v, node.name);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.SimpleNameRef) {
    printTo(v.stream, node.name.str);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.PatternNameRef) {
    printTo(v.stream, "'", node.name.str);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.TupleExpr) {
    printTo(v.stream, "[");
    dumpList(v, node.args);
    printTo(v.stream, "]");
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.Call) {
    dumpSubExpr(v, node, node.expr);
    printTo(v.stream, "(");
    dumpList(v, node.args);
    printTo(v.stream, ")");
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.Indexing) {
    dumpSubExpr(v, node, node.expr);
    printTo(v.stream, "[");
    dumpList(v, node.args);
    printTo(v.stream, "]");
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.StaticIndexing) {
    dumpSubExpr(v, node, node.expr);
    printTo(v.stream, ".");
    dumpNode(v, node.index);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.FieldRef) {
    dumpSubExpr(v, node, node.expr);
    printTo(v.stream, ".");
    printTo(v.stream, node.field.str);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.AndExpr) {
    dumpSubExpr(v, node, node.expr1);
    printTo(v.stream, " and ");
    dumpSubExpr(v, node, node.expr2);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.OrExpr) {
    dumpSubExpr(v, node, node.expr1);
    printTo(v.stream, " or ");
    dumpSubExpr(v, node, node.expr2);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.NotExpr) {
    printTo(v.stream, "not ");
    dumpSubExpr(v, node, node.expr);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.ThrowExpr) {
    printTo(v.stream, "throw ");
    dumpNode(v, node.value);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.UnaryOpExpr) {
    switch (node.operator) {
    case ast.OP_PLUS:
        printTo(v.stream, "+");
        dumpSubExpr(v, node, node.expr);
        break;
    case ast.OP_MINUS:
        printTo(v.stream, "-");
        dumpSubExpr(v, node, node.expr);
        break;
    case ast.OP_UNPACK:
        printTo(v.stream, "*");
        dumpSubExpr(v, node, node.expr);
        break;
    case ast.OP_ADDRESS_OF:
        printTo(v.stream, "&");
        dumpSubExpr(v, node, node.expr);
        break;
    case ast.OP_DEREFERENCE:
        dumpSubExpr(v, node, node.expr);
        printTo(v.stream, "^");
        break;
    }
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.BinaryOpExpr) {
    dumpSubExpr(v, node, node.expr1);
    switch (node.operator) {
    case ast.OP_MULTIPLY:
        printTo(v.stream, " * ");
        break;
    case ast.OP_DIVIDE:
        printTo(v.stream, " / ");
        break;
    case ast.OP_QUOTIENT:
        printTo(v.stream, " div ");
        break;
    case ast.OP_REMAINDER:
        printTo(v.stream, " mod ");
        break;
    case ast.OP_ADD:
        printTo(v.stream, " + ");
        break;
    case ast.OP_SUBTRACT:
        printTo(v.stream, " - ");
        break;
    case ast.OP_LESSER?:
        printTo(v.stream, " < ");
        break;
    case ast.OP_LESSER_EQUALS?:
        printTo(v.stream, " <= ");
        break;
    case ast.OP_GREATER?:
        printTo(v.stream, " > ");
        break;
    case ast.OP_GREATER_EQUALS?:
        printTo(v.stream, " >= ");
        break;
    case ast.OP_EQUALS?:
        printTo(v.stream, " == ");
        break;
    case ast.OP_NOT_EQUALS?:
        printTo(v.stream, " != ");
        break;
    }
    dumpSubExpr(v, node, node.expr2);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.StaticExpr) {
    printTo(v.stream, "#");
    dumpSubExpr(v, node, node.expr);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.PairExpr) {
    printTo(v.stream, node.name.str, ":");
    dumpNode(v, node.expr);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.IfExpr) {
    printTo(v.stream, "if ");
    dumpStatementExpr(v, node.condition);
    printTo(v.stream, " then ");
    dumpNode(v, node.thenPart);
    printTo(v.stream, " else ");
    dumpNode(v, node.elsePart);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.LambdaExpr) {
    if (not empty?(node.args.items) or just?(node.args.variadicItem)) {
        printTo(v.stream, "(");
        dumpVariadicList(v, node.args);
        printTo(v.stream, ") ");
    }

    switch (node.captureKind) {
    case ast.LAMBDA_CAPTURE_BY_VALUE:
        printTo(v.stream, "=>");
        break;
    case ast.LAMBDA_CAPTURE_BY_REFERENCE:
        printTo(v.stream, "->");
        break;
    }

    match(node.body,
        ast.Block, block ref=> {
            inc(v.depth);
            printlnTo(v.stream);
            dumpIndent(v);
            dumpStatement(v, block);
            dec(v.depth);
            printlnTo(v.stream);
            dumpIndent(v);
        },
        ast.StatementReturnExprList, list ref=> {
            printTo(v.stream, " ");
            if (empty?(list.statements)) {
                if (size(list.exprList) == 1) {
                    dumpNode(v, list.exprList[0]);
                } else {
                    printTo(v.stream, "(");
                    dumpList(v, list.exprList);
                    printTo(v.stream, ")");
                }
            } else {
                inc(v.depth);
                for (stmt in list.statements) {
                    printlnTo(v.stream);
                    dumpIndent(v);
                    dumpStatement(v, *stmt);
                }
                if (not empty?(list.exprList)) {
                    printlnTo(v.stream);
                    dumpIndent(v);
                    printTo(v.stream, "return ");
                    dumpList(v, list.exprList);
                }
                dec(v.depth);
                printlnTo(v.stream);
                dumpIndent(v);
            }
        },
    );
}

[S] private dumpStatementExpr(v:DumpASTVisitor[S], node:ast.StatementExpr) {
    for (stmt in node.statements) {
        dumpStatement(v, *stmt);
        printTo(v.stream, "; ");
    }
    dumpNode(v, node.expr);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.StatementExpr) {
    if (empty?(node.statements))
        dumpNode(v, node.expr);
    else {
        printTo(v.stream, "(");
        dumpStatementExpr(v, node);
        printTo(v.stream, ")");
    }
}

[S] private dumpStatementExprList(v:DumpASTVisitor[S], node:ast.StatementExprList) {
    for (stmt in node.statements) {
        dumpStatement(v, *stmt);
        printTo(v.stream, "; ");
    }
    dumpList(v, node.exprList);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.StatementExprList) {
    printTo(v.stream, "(");
    dumpStatementExprList(v, node);
    printTo(v.stream, ")");
}

// Patterns

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.Pattern) {
    dumpNode(v, *node);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.IndexingPattern) {
    dumpNode(v, node.base);
    printTo(v.stream, "[");
    dumpVariadicList(v, node.args);
    printTo(v.stream, "]");
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.TuplePattern) {
    printTo(v.stream, "[");
    dumpVariadicList(v, node.elements);
    printTo(v.stream, "]");
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.StaticFunction) {
    printlnTo(v.stream);
    dumpVisibility(v, node.visibility, ast.VIS_PUBLIC);
    printTo(v.stream, "def #");
    dumpNode(v, node.name);
    dumpNode(v, node.definition);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.StaticOverload) {
    printTo(v.stream, "\nextend #");
    dumpNode(v, node.target);
    dumpNode(v, node.definition);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.Procedure) {
    printlnTo(v.stream);
    dumpVisibility(v, node.visibility, ast.VIS_PUBLIC);
    printTo(v.stream, "def ");
    dumpNode(v, node.name);
    dumpNode(v, node.definition);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.Overload) {
    printTo(v.stream, "\nextend ");
    dumpNode(v, node.target);
    dumpNode(v, node.definition);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.GlobalAlias) {
    dumpVisibility(v, node.visibility, ast.VIS_PUBLIC);
    printTo(v.stream, "alias ");
    dumpNode(v, node.name);
    printTo(v.stream, " = ");
    dumpNode(v, node.value);
    printlnTo(v.stream);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.SingleGlobalBinding) {
    dumpNode(v, node.name);
    maybe(node.type, type ref=> {
        printTo(v.stream, ":");
        dumpNode(v, type);
    });
    maybe(node.value, value ref=> {
        printTo(v.stream, " = ");
        dumpNode(v, value);
    });
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.GlobalBinding) {
    dumpVisibility(v, node.visibility, ast.VIS_PUBLIC);
    dumpBindingKind(v, node.kind);
    if (size(node.bindings) == 1) {
        dumpNode(v, node.bindings[0]);
    } else {
        inc(v.depth);
        for (binding in node.bindings) {
            printlnTo(v.stream);
            dumpIndent(v);
            dumpNode(v, binding);
        }
        dec(v.depth);
    }
    printlnTo(v.stream);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.ExternalArgument) {
    printTo(v.stream, node.name.str, ":");
    dumpNode(v, node.type);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.ExternalProcedure) {
    dumpVisibility(v, node.visibility, ast.VIS_PUBLIC);
    printTo(v.stream, "external ");
    maybe(node.externalAttributes, attributes ref=> {
        printTo(v.stream, "(");
        dumpList(v, attributes);
        printTo(v.stream, ") ");
    });
    printTo(v.stream, node.name.str);
    printTo(v.stream, "(");
    dumpList(v, node.arguments.items);
    if (node.arguments.variadic?) {
        if (not empty?(node.arguments.items))
            printTo(v.stream, ", ");
        printTo(v.stream, "..");
    }
    printTo(v.stream, ")");

    dumpOverloadAttributes(v, node.attributes);

    maybe(node.returns, returns ref=> {
        printTo(v.stream, " : ");
        maybe(returns.returnType, type ref=> { dumpNode(v, type); });
    });

    printlnTo(v.stream);
    inc(v.depth);
    match(node.body,
        ast.UndefinedCodeBody, x ref=> {},
        MatchDefault, body ref=> { dumpNode(v, body); },
    );
    dec(v.depth);
}

[S] overload dumpNode(v:DumpASTVisitor[S], node:ast.GlobalLiteralCodeBody) {
    dumpNode(v, node.codeBody);
}

[S, T] private dumpVariadicList(v:DumpASTVisitor[S], list:ast.VariadicList[T]) {
    interleave(list.items,
        () ref=> { printTo(v.stream, ", "); },
        item ref=> { dumpNode(v, item); },
    );
    maybe(list.variadicItem, item ref=> {
        if (not empty?(list.items))
            printTo(v.stream, ", ");
        printTo(v.stream, "..");
        dumpNode(v, item);
    });
}

[S] overload dumpVariadicList(v:DumpASTVisitor[S], list:ast.VariadicList[ast.Argument]) {
    interleave(list.items,
        () ref=> { printTo(v.stream, ", "); },
        item ref=> { dumpNode(v, item); },
    );
    maybe(list.variadicItem, item ref=> {
        if (not empty?(list.items))
            printTo(v.stream, ", ");
        match(item,
            ast.StaticArgument, sa ref=> {
                printTo(v.stream, "..");
                dumpNode(v, sa);
            },
            ast.BoundArgument, ba ref=> {
                dumpArgumentKind(v, ba.kind);
                printTo(v.stream, "..");
                dumpArgumentName(v, ba);
            },
        );
    });
}

[S, T] private dumpList(v:DumpASTVisitor[S], list:Vector[T]) {
    interleave(list,
        () ref=> { printTo(v.stream, ", "); },
        item ref=> { dumpNode(v, item); },
    );
}

dumpASTTo(stream, sourceAST:ast.SourceAST) {
    var v = DumpASTVisitor(stream, 0);
    for (item in sourceAST.topLevelItems)
        dumpNode(v, *item);
}

