import newclay.ast as ast;
import newclay.core.*;
import maybe.*;

procedure resolveAST;

private dummyValue(depth:Int) = Value(IntValue(depth));

private record LambdaCapture = referenceType(
    parent:Maybe[LambdaCapture],
    lambda:ast.LambdaExpr,
    depth:Int,
);

private record ResolveASTVisitor(
    env:Env,
    depth:Int,
    lambda:Maybe[LambdaCapture],
);

overload ResolveASTVisitor(env, depth)
    = ResolveASTVisitor(env, depth, nothing(LambdaCapture));

private newVisitor(parent:ResolveASTVisitor)
    = ResolveASTVisitor(
        newEnv(parent.env), parent.depth+1, parent.lambda
    );

private newVisitorForLambda(parent:ResolveASTVisitor, lambda:ast.LambdaExpr)
    = ResolveASTVisitor(
        newEnv(parent.env),
        parent.depth+1,
        Maybe(LambdaCapture(parent.lambda, lambda, parent.depth+1)),
    );

private addArgument(r, arg:ast.StaticArgument) { }
overload addArgument(r, arg:ast.BoundArgument) {
    envAdd(r.env, arg.name, dummyValue(r.depth));
}

private bindArgumentList(r, argList) {
    for (arg in argList.items)
        addArgument(r, *arg);
    maybe(argList.variadicItem, arg ref=> {
        addArgument(r, *arg);
    });
}

private addBindingName(r, bindingName) {
    visitAST(r, bindingName.type);
    envAdd(r.env, bindingName.name, dummyValue(r.depth));
}

private addBindingList(r, bindingList:ast.SingleBindingList) {
    for (binding in bindingList) {
        visitAST(r, binding.value);
        addBindingName(r, binding.name);
    }
}

overload addBindingList(r, bindingList:ast.MultipleBindingList) {
    visitAST(r, bindingList.values);
    for (bindingName in bindingList.names.items)
        addBindingName(r, bindingName);
    maybe(bindingList.names.variadicItem, bindingName ref=> {
        addBindingName(r, bindingName);
    });
}

overload visitASTNode(r:ResolveASTVisitor, lambda:ast.LambdaExpr) {
    visitAST(r, lambda.args);

    var subr = newVisitorForLambda(r, lambda);
    bindArgumentList(subr, lambda.args);

    visitAST(subr, lambda.body);
}

overload visitASTNode(r:ResolveASTVisitor, oload:ast.Overload) {
    visitAST(r, oload.target);
    visitAST(r, oload.definition);
}

overload visitASTNode(r:ResolveASTVisitor, definition:ast.OverloadDefinition) {
    visitAST(r, definition.args);

    var subr = newVisitor(r);
    bindArgumentList(subr, definition.args);

    visitAST(subr, definition.returns);
    match(definition.returns,
        Vector[ast.NamedReturn], namedReturns ref=> {
            for (ret in namedReturns)
                envAdd(subr.env, ret.name, dummyValue(r.depth));
        },
        MatchDefault, x ref=> {},
    );

    visitAST(subr, definition.predicate);
    visitAST(subr, definition.returns);
    visitAST(subr, definition.body);
}

private addCapturedName(lambda, name) {
    if (null?(lookup(lambda.capturedNames, name))) {
        lambda.capturedNames[name] = ();
        push(lambda.capturedOrder, name);
    }
}

private captureLocal(r, name, depth) {
    var mLambda = r.lambda;
    while(just?(mLambda)) {
        ref lambda = just(mLambda);
        if (depth < lambda.depth)
            addCapturedName(lambda.lambda, name);
        mLambda = lambda.parent;
    }
}

overload visitASTNode(r:ResolveASTVisitor, nameRef:ast.NameRef) {
    if (variantIs?(nameRef.env, ast.UnresolvedEnvRef))
        nameRef.env = match(privateLookup(r.env, nameRef.name),
            Value, v => match(v,
                SymbolHead,   h => ast.EnvRef(ast.ModuleEnvRef(h.module.name, h.astName.name.str)),
                Symbol,       s => ast.EnvRef(ast.ModuleEnvRef(s.head.module.name, s.head.astName.name.str)),
                Primitive,    p => ast.EnvRef(ast.ModuleEnvRef(primitivesModuleName, primitiveName(p))),
                RTPrimitive,  p => ast.EnvRef(ast.ModuleEnvRef(primitivesModuleName, primitiveName(p))),
                ModuleValue,  m => maybe(m.module,
                    module => ast.EnvRef(ast.ModuleAliasRef(module.name)),
                    () => ast.EnvRef(ast.ModulePathRef(nameRef.name)),
                ),
                IntValue,     i => {
                    assert(size(nameRef.name) == 1, "local can only have one name component");
                    captureLocal(r, nameRef.name[0].str, Int(Int64(i)));
                    return ast.EnvRef(ast.LocalEnvRef());
                },
                MatchDefault, x => {
                    assert(false, "invalid value during lookup: ", x);
                    return ast.EnvRef(ast.LocalEnvRef());
                },
            ),
            MatchDefault, x => ast.EnvRef(ast.LocalEnvRef()),
        );
}

private visitStatementExpr(r, expr) {
    for (statement in expr.statements)
        visitAST(r, statement);
    visitAST(r, expr.expr);
}

overload visitASTNode(r:ResolveASTVisitor, expr:ast.StatementExpr) {
    var r2 = newVisitor(r);
    visitStatementExpr(r2, expr);
}

overload visitASTNode(r:ResolveASTVisitor, expr:ast.IfExpr) {
    var r2 = newVisitor(r);
    visitStatementExpr(r2, expr.condition);
    visitAST(r2, expr.thenPart);
    visitAST(r2, expr.elsePart);
}

overload visitASTNode(r:ResolveASTVisitor, expr:ast.StatementExprList) {
    var r2 = newVisitor(r);
    for (statement in expr.statements)
        visitAST(r, statement);
    visitAST(r, expr.exprList);
}

overload visitASTNode(r:ResolveASTVisitor, expr:ast.StatementReturnExprList) {
    var r2 = newVisitor(r);
    for (statement in expr.statements)
        visitAST(r, statement);
    visitAST(r, expr.exprList);
}

overload visitASTNode(r:ResolveASTVisitor, nameRef:ast.SimpleNameRef) {
    if (variantIs?(nameRef.env, ast.UnresolvedEnvRef))
        nameRef.env = match(privateLookup(r.env, nameRef.name),
            Value, v => match(v,
                SymbolHead,   h => ast.EnvRef(ast.ModuleEnvRef(h.module.name, h.astName.name.str)),
                Symbol,       s => ast.EnvRef(ast.ModuleEnvRef(s.head.module.name, s.head.astName.name.str)),
                Primitive,    p => ast.EnvRef(ast.ModuleEnvRef(primitivesModuleName, primitiveName(p))),
                RTPrimitive,  p => ast.EnvRef(ast.ModuleEnvRef(primitivesModuleName, primitiveName(p))),
                ModuleValue,  m => maybe(m.module,
                    module => ast.EnvRef(ast.ModuleAliasRef(module.name)),
                    () => ast.EnvRef(ast.ModulePathRef(Vector[ast.Identifier](nameRef.name))),
                ),
                IntValue,     i => {
                    captureLocal(r, nameRef.name.str, Int(Int64(i)));
                    return ast.EnvRef(ast.LocalEnvRef());
                },
                MatchDefault, x => {
                    assert(false, "invalid value during lookup: ", x);
                    return ast.EnvRef(ast.LocalEnvRef());
                },
            ),
            MatchDefault, x => ast.EnvRef(ast.LocalEnvRef()),
        );
}

overload visitASTNode(r:ResolveASTVisitor, block:ast.Block) {
    var subr = newVisitor(r);
    maybe(block.label, label ref=> {
        envAdd(subr.env, label.name, dummyValue(subr.depth));
    });

    visitAST(subr, block.statements);
}

overload visitASTNode(r:ResolveASTVisitor, stmt:ast.IfStatement) {
    var r2 = newVisitor(r);
    visitStatementExpr(r2, stmt.condition);
    visitAST(newVisitor(r2), stmt.thenBody);
    maybe(stmt.elseBody, elseBody ref=> { visitAST(newVisitor(r2), elseBody); });
}

overload visitASTNode(r:ResolveASTVisitor, stmt:ast.SwitchStatement) {
    var r2 = newVisitor(r);
    visitStatementExpr(r2, stmt.value);

    for (caseBlock in stmt.caseBlocks) {
        visitAST(r, caseBlock.values);
        visitAST(newVisitor(r2), caseBlock.body);
    }
    maybe(stmt.defaultBlock, defaultBlock ref=> { visitAST(newVisitor(r2), defaultBlock); });
}

overload visitASTNode(r:ResolveASTVisitor, stmt:ast.WhileStatement) {
    var r2 = newVisitor(r);
    visitStatementExpr(r2, stmt.condition);

    var r3 = newVisitor(r2);
    maybe(stmt.label, label ref=> {
        envAdd(r3.env, label.name, dummyValue(r3.depth));
    });
    visitAST(r3, stmt.body);
}

overload visitASTNode(r:ResolveASTVisitor, stmt:ast.ForStatement) {
    visitAST(r, stmt.sequenceValue);

    var subr = newVisitor(r);
    maybe(stmt.label, label ref=> {
        envAdd(subr.env, label.name, dummyValue(subr.depth));
    });
    bindArgumentList(subr, stmt.bodyBindings);

    visitAST(subr, stmt.body);
}

overload visitASTNode(r:ResolveASTVisitor, stmt:ast.StaticForStatement) {
    visitAST(r, stmt.values);

    var subr = newVisitor(r);
    maybe(stmt.label, label ref=> {
        envAdd(subr.env, label.name, dummyValue(subr.depth));
    });
    addArgument(subr, *stmt.bodyBinding);

    visitAST(subr, stmt.body);
}

overload visitASTNode(r:ResolveASTVisitor, block:ast.CatchBlock) {
    var subr = newVisitor(r);
    addBindingName(subr, block.binding);
    visitAST(subr, block.body);
}

overload visitASTNode(r:ResolveASTVisitor, stmt:ast.BindingStatement) {
    addBindingList(r, *stmt.bindings);
}

overload resolveAST(e:Env, a) {
    visitAST(ResolveASTVisitor(e, 0), a);
}
