import newclay.core.*;
import newclay.common.*;
import newclay.lexer.*;
import newclay.loader.*;
import newclay.parser.*;
import newclay.evaluator.*;
import newclay.ast as ast;
import io.files.easy.*;
import maybe.*;

record Interactor(
    stdin:File,
    stdout:File,
    program:Program,
    module:Module,
);

private defaultInteractorModule(program) {
    return cloneModule(mainModule(program), ModuleName("__interactor__"));
}

overload Interactor(stdin, stdout, program)
    = Interactor(stdin, stdout, program, defaultInteractorModule(program));

overload Interactor(program) = Interactor(stdin, stdout, program);

prompt(inter:Interactor) {
    printTo(inter.stdout, "# ");
    flush(inter.stdout);
}

parseInput(s) = parseInteractorInput(tokenize(SourceFile("(interactor input)", s)));

private trimRead(stream, s) {
    push(s, '\n');

    while (back(s) == '\n') {
        if (not readChar(stream, back(s)))
            return false;
    }
    return true;
}

private iread(inter:Interactor) {
    prompt(inter);
    var s = String();
    if (not trimRead(inter.stdin, s))
        return nothing(ast.InteractorInput);
    readUpto(inter.stdin, ';', s);
    if (empty?(s))
        return nothing(ast.InteractorInput);
    else
        return Maybe(parseInput(s));
}

private ieval(inter:Interactor, input:ast.InteractorInput) {
    return match(input,
        ast.InteractorImport, ii ref=> {
            envRootAddImport(inter.module.privateEnvRoot, inter.program, ii);
            return ValueList();
        },
        ast.ExprList, exprList ref=> evaluateExprList(exprList, newEnv(inter.module)),
    );
}

private iprint(inter:Interactor, result:ValueList) {
    printlnTo(inter.stdout, result);
    flush(inter.stdout);
}

interact(inter:Interactor) {
    return maybe(iread(inter),
        exprList ref=> {
            iprint(inter, ieval(inter, exprList));
            return true;
        },
        () ref=> false,
    );
}

interactWelcome(inter:Interactor) {
    printlnTo(inter.stdout);
    printlnTo(inter.stdout, "Available commands:");
    printlnTo(inter.stdout, "  <expr>;                       evaluate <expr> as a static expression");
    printlnTo(inter.stdout, "  import <module>.*;            import all definitions from <module>");
    printlnTo(inter.stdout, "  import <module>.(<name> [as <name>], ...);");
    printlnTo(inter.stdout, "                                import selected definitions from <module> (as <name>)");
    printlnTo(inter.stdout, "  import <module> [as <name>];  add module name <module> to search path (as <name>)");
    printlnTo(inter.stdout);
    flush(inter.stdout);
}

interactLoop(inter:Interactor) {
    interactWelcome(inter);
    var running? = true;
    while (running?) {
        try {
            running? = interact(inter);
        } catch (ex:ClayError) {
            displayError(ex);
            printlnTo(inter.stdout);
            flush(inter.stdout);
        }
    }
}
