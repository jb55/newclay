
import newclay.ast as ast;
import newclay.core.*;
import newclay.common.(ClayError);
import newclay.evaluator.*;
import maybe.*;


//
// initializeClayHooks
//

initializeClayHooks() {
    var program = getProgram();
    var module = preludeModule(program);
    var lookup = name => envEntryToValue(privateLookup(module, name));
    try {
        program.hooks = ClayHooks(...mapValues(
            field ref=> lookup(StaticName(field)),
            ...RecordFieldNames(ClayHooks)
        ));
    } catch (ex:ClayError) {
        hookInitializationError(ex);
        assert(false);
    }
}



//
// symbolType?
//

symbolType?(x:Symbol) {
    return safeInitialize(x.type?,
        () ref=> evaluateBoolCall(getHooks().type?, ValueList(x)),
    );
}


//
// typeSymbol
//

typeSymbol(type:Value) Symbol {
    return match(type,
        Symbol, y => y,
        MatchDefault, y => {
            genericError("invalid type: ", y);
            return Symbol();
        },
    );
}



//
// lowLevelType
//

lowLevelTypeSymbol(type:Value) Symbol {
    return match(type,
        Symbol, y => y,
        MatchDefault, y => {
            genericError("invalid low-level type: ", y);
            return Symbol();
        },
    );
}

lowLevelTypeValue(type:Value) Value
    = evaluateCallWithOneResult(getHooks().llType, ValueList(type));

lowLevelType(type:Value) Symbol
    = lowLevelTypeSymbol(lowLevelTypeValue(type));

ofLowLevelType?(llType:Symbol, llTypeValue:Value) {
    return match(llTypeValue,
        Symbol, s ref=> llType == s,
        SymbolHead, sh ref=> llType.head == sh,
        MatchDefault, x ref=> {
            genericError("invalid low-level type: ", llTypeValue);
            return false;
        },
    );
}

overload ofLowLevelType?(llType:Value, llTypeValue:Value) {
    return match(llType,
        Symbol, s ref=> ofLowLevelType?(s, llTypeValue),
        MatchDefault, x ref=> {
            genericError("invalid low-level type: ", llType);
            return false;
        },
    );
}


//
// typeAlign, typeNaturalAlign
//

private alignIntValue(a:Value) {
    if (not variantIs?(a, IntValue))
        matchFailureError("alignment must be an integer value");
    return toUInt64(*variantAs(a, IntValue));
}

typeAlign(type:Value) {
    return alignIntValue(
        evaluateCallWithOneResult(getHooks().typeAlign, ValueList(type))
    );
}
typeNaturalAlign(type:Value) {
    var llType = lowLevelTypeValue(type);
    return alignIntValue(
        evaluateCallWithOneResult(getHooks().llTypeAlign, ValueList(llType))
    );
}


//
// boolType, charType, *int*Type, float*Type
//

boolType() = getHooks().Bool;
charType() = getHooks().Char;
uintType () = getHooks().UInt;
uint8Type () = getHooks().UInt8;
uint16Type() = getHooks().UInt16;
uint32Type() = getHooks().UInt32;
uint64Type() = getHooks().UInt64;
intType () = getHooks().Int;
int8Type () = getHooks().Int8;
int16Type() = getHooks().Int16;
int32Type() = getHooks().Int32;
int64Type() = getHooks().Int64;
float32Type() = getHooks().Float32;
float64Type() = getHooks().Float64;


//
// stringConstantType
//

stringConstantType() = getHooks().StringConstant;


//
// staticType, staticType?, staticTypeValue
//

staticType(x:Value) {
    return evaluateIndexing(getHooks().Static, ValueList(x));
}

staticType?(x:Value) {
    return match(x,
        Symbol, y => (Value(y.head) == getHooks().Static),
        MatchDefault, y => false,
    );
}

staticTypeValue(x:Value) {
    var sym = typeSymbol(x);
    if (Value(sym.head) != getHooks().Static)
        genericError("not a static type: ", x);
    assert(size(sym.params) == 1);
    return sym.params[0];
}



//
// pointerType, pointerType?, pointerTargetType
//

pointerType(x:Value) Value {
    return evaluateIndexing(getHooks().Pointer, ValueList(x));
}

pointerType?(x:Value) {
    return match(x,
        Symbol, y => (Value(y.head) == getHooks().Pointer),
        MatchDefault, y => false,
    );
}

pointerTargetType(x:Value) Value {
    var sym = typeSymbol(x);
    if (Value(sym.head) != getHooks().Pointer)
        genericError("not a pointer type: ", x);
    assert(size(sym.params) == 1);
    return sym.params[0];
}


//
// podType?
//

podType?(x:Value) {
    return evaluateBoolCall(getHooks().POD?, ValueList(x));
}


//
// codePointerType, codePointerType?
//

codePointerType(inputs:ValueList, outputs:ValueList) {
    return evaluateIndexing(getHooks().CodePointer, ValueList(
        Value(TupleValue(inputs)),
        Value(TupleValue(outputs)),
    ));
}

codePointerType?(x:Value) = match(x,
    Symbol, y => Value(y.head) == getHooks().CodePointer and size(y.params) == 2,
    MatchDefault, y => false,
);

codePointerInputTypes(x:Value) {
    if (not codePointerType?(x))
        genericError("not a code pointer type: ", x);
    var sym = typeSymbol(x);
    return match(sym.params[0],
        TupleValue, t => t.elements,
        MatchDefault, _ => {
            genericError("input types of code pointer type must be a tuple: ", x);
            return ValueList();
        },
    );
}

codePointerOutputTypes(x:Value) {
    if (not codePointerType?(x))
        genericError("not a code pointer type: ", x);
    var sym = typeSymbol(x);
    return match(sym.params[0],
        TupleValue, t => t.elements,
        MatchDefault, _ => {
            genericError("output types of code pointer type must be a tuple: ", x);
            return ValueList();
        },
    );
}


//
// externalCodePointerType, externalCodePointerType?
//

externalCodePointerType(abi:Value, variadic?:Bool, inputs:ValueList, output:Maybe[Value]) {
    return evaluateIndexing(getHooks().ExternalCodePointer, ValueList(
        abi,
        Value(BoolValue(variadic?)),
        Value(TupleValue(inputs)),
        maybe(output, o ref=> Value(TupleValue(ValueList(o))), () => Value(TupleValue()))
    ));
}

externalCodePointerType?(x:Value) = match(x,
    Symbol, y => Value(y.head) == getHooks().ExternalCodePointer and size(y.params) == 4,
    MatchDefault, y => false,
);

externalCodePointerABI(x:Value) {
    if (not externalCodePointerType?(x))
        genericError("not an external code pointer type: ", x);
    var sym = typeSymbol(x);
    return sym.params[0];
}

externalCodePointerVariadic?(x:Value) {
    if (not externalCodePointerType?(x))
        genericError("not an external code pointer type: ", x);
    var sym = typeSymbol(x);
    return match(sym.params[1],
        BoolValue, x => x.value,
        MatchDefault, x => {
            genericError("second symbol parameter of external code pointer type must be boolean");
            return false;
        },
    );
}

externalCodePointerInputTypes(x:Value) {
    if (not externalCodePointerType?(x))
        genericError("not an external code pointer type: ", x);
    var sym = typeSymbol(x);
    return match(sym.params[2],
        TupleValue, t => t.elements,
        MatchDefault, _ => {
            genericError("external code pointer type's input types must be in a tuple: ", x);
            return ValueList();
        }
    );
}

externalCodePointerOutputType(x:Value) {
    if (not externalCodePointerType?(x))
        genericError("not an external code pointer type: ", x);
    var sym = typeSymbol(x);
    return match(sym.params[3],
        TupleValue, t => {
            if (size(t.elements) > 1)
                genericError("external code pointer type may only have zero or one output types: ", x);

            if (size(t.elements) == 1) {
                return Maybe(t.elements[0]);
            } else {
                return nothing(Value);
            }
        },
        MatchDefault, x => {
            genericError("external code pointer type's output types must be in a tuple: ", x);
            return nothing(Value);
        },
    );
}


//
// abiValue?, abiSupportsVariadics?
//

abiValue?(x:Value) = evaluateBoolCall(getHooks().ABI?, ValueList(x));
abiSupportsVariadics?(x:Value) = evaluateBoolCall(getHooks().ABISupportsVariadics?, ValueList(x));
