import newclay.core.*;
import newclay.cache.parser.*;
import newclay.ast as ast;
import sha2.*;
import maybe.*;
import remote.marshaling.*;
import printer.formatter.*;
import libc.(sscanf);

alias CACHE_FORMAT_VERSION_STRING = "0";


//
// Cache types
//

record CachedSymbol = referenceType(
    module: ModuleName,
    name: ast.Identifier,
    params: ast.VariadicList[ast.Identifier],
);
record CachedAttribute = referenceType(
    module: ModuleName,
    target: ast.Pattern,
    predicate: Maybe[ast.Expr],
);
record CachedStaticOverload = referenceType(
    module: ModuleName,
    target: ast.Pattern,
    predicate: Maybe[ast.Expr],
    args: ast.ListPattern,
);
record CachedOverload = referenceType(
    module: ModuleName,
    target: ast.Pattern,
    predicate: Maybe[ast.Expr],
    args: ast.VariadicList[ast.Argument],
);

variant CacheEntry = CachedSymbol
                   | CachedAttribute
                   | CachedStaticOverload
                   | CachedOverload;
overload CacheEntry() = CacheEntry(CachedSymbol());

record Cache = referenceType(
    entries: HashMap[SHA256, CacheEntry],
);

newCache() = allocateRef(Cache);


//
// Cache creation and querying
//

private hashData(x) = marshal(x.module.name, x.ast);
hashCacheEntry(x) = sha256(hashData(x));

eachCacheableEntry(program:Program, fn) {
    static for (entries in 
        program.allSymbolHeads,
        program.allAttributes,
        program.allStaticOverloads,
        program.allOverloads
    ) {
        for (entry in entries)
            fn(entry, hashCacheEntry(entry));
    }
}

private createCacheEntry(cache:Cache, entry:SymbolHead, hash:SHA256) {
    cache.entries[hash] = CacheEntry(CachedSymbol(
        entry.module.name, 
        entry.ast.name,
        entry.ast.params,
    ));
}
overload createCacheEntry(cache:Cache, entry:Attribute, hash:SHA256) {
    cache.entries[hash] = CacheEntry(CachedAttribute(
        entry.module.name, 
        entry.ast.target,
        entry.ast.predicate,
    ));
}
overload createCacheEntry(cache:Cache, entry:StaticOverload, hash:SHA256) {
    cache.entries[hash] = CacheEntry(CachedStaticOverload(
        entry.module.name,
        entry.ast.target,
        entry.ast.predicate,
        entry.ast.args,
    ));
}
overload createCacheEntry(cache:Cache, entry:Overload, hash:SHA256) {
    cache.entries[hash] = CacheEntry(CachedOverload(
        entry.module.name,
        entry.ast.target,
        entry.ast.predicate,
        entry.ast.args,
    ));
}

createCache(program:Program) {
    var cache = newCache();

    eachCacheableEntry(program, (entry, hash) ref=> {
        createCacheEntry(cache, entry, hash);
    });

    return move(cache);
}

diffCaches(a:Cache, b:Cache) {
    var onlyInA = a.entries;
    var onlyInB = b.entries;

    for (k, v in items(a.entries))
        if (not null?(lookup(b.entries, k))) {
            remove(onlyInA, k);
            remove(onlyInB, k);
        }

    return move(onlyInA), move(onlyInB);
}


//
// loadCache
//

record InvalidCacheVersion ();
instance Exception = InvalidCacheVersion;

loadCache(filename) = loadCache(File(filename, READ));
overload loadCache(file:File) {
    var versionLine = readLine(file);
    if (versionLine[size(versionLine)-1] == '\n')
        pop(versionLine);
    if (versionLine != CACHE_FORMAT_VERSION_STRING)
        throw InvalidCacheVersion();

    var cache = newCache();
    for (line in lines(file)) {
        var hash, entry = ...parseCacheEntryLine(line);
        cache.entries[hash] = entry;
    }
    return cache;
}


//
// saveCache
//

private printCacheEntryTo(file, entry) {
    printTo(file, StaticName(Type(entry)), "(", hexString(marshal(entry)), ")");
}

private saveCacheEntry(file, hash, entry) {
    printTo(file, hash, "=");
    printCacheEntryTo(file, *entry);
    printlnTo(file);
}

saveCache(filename, cache:Cache) { saveCache(File(filename, CREATE), cache); }
overload saveCache(file:File, cache:Cache) {
    printlnTo(file, CACHE_FORMAT_VERSION_STRING);
    for (hash, entry in items(cache.entries))
        saveCacheEntry(file, hash, entry);
}
