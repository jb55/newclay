import newclay.ir as ir;
import newclay.common.*;
import newclay.core.*;
import newclay.hooks.*;
import newclay.analysis.*;
import maybe.*;

record Frame = referenceType(
    parent: Frame,
    label: Maybe[ir.BreakTargetId],
    liveValues: Vector[RTValue],
);

subframe(parent) = Frame(parent, nothing(ir.BreakTargetId), Vector[RTValue]());
overload subframe(parent, label) = Frame(parent, Maybe(label), Vector[RTValue]());

record LifetimeContext (
    statementFrame: Frame,
    blockFrame: Frame,
    variableFrames: Map[RTValue, Frame],
);

procedure lifetimeAnalyzeNode;
overload lifetimeAnalyzeNode(c:LifetimeContext, dest:Vector[ir.Node], node) {
    attractInputs(c, node);
    addOutputs(c, node);
    ir.pushNode(dest, node);
}
overload lifetimeAnalyzeNode(c:LifetimeContext, dest:Vector[ir.Node], node:ir.LiteralCodeBody) {
    // consume all values
    c.variableFrames = Map[RTValue, Frame]();
    c.statementFrame.liveValues = Vector[RTValue]();
    ir.pushNode(dest, node);
}
overload lifetimeAnalyzeNode(c:LifetimeContext, dest:Vector[ir.Node], node:ir.Block) {
    var outNode = ir.Block(node.label);
    withLabelFrame(c, node.label, outNode.body, () ref=> {
        lifetimeAnalyzeSubbody(c, outNode.body, node.body);
    });
    ir.pushNode(dest, outNode);
}
overload lifetimeAnalyzeNode(c:LifetimeContext, dest:Vector[ir.Node], node:ir.Statement) {
    withStatementFrame(c, dest, () ref=> {
        lifetimeAnalyzeSubbody(c, dest, node.body);
    });
}
overload lifetimeAnalyzeNode(c:LifetimeContext, dest:Vector[ir.Node], node:ir.AddressOf) {
    // the only valid time an AddressOf node should accept an rvalue as its input
    // should be an rvalue reference return, in which case the rvalue must not be
    // destroyed in this scope
    if (node.input.kind == RT_VALUE_RVALUE)
        removeValue(c, node.input);
    ir.pushNode(dest, node);
}
overload lifetimeAnalyzeNode(c:LifetimeContext, dest:Vector[ir.Node], node:ir.Call) {
    attractInputs(c, node);
    // the called function takes responsibility for its rvalue-kinded arguments
    assert(size(node.inputs) == size(node.specialization.args), "lifetime analysis invariant: call argument count must match called specialization");
    for (input, arg in zipped(node.inputs, node.specialization.args))
        if (arg.kind == RT_VALUE_RVALUE) {
            assert(input.kind == RT_VALUE_RVALUE, "lifetime analysis invariant: call rvalue argument must be given an rvalue");

            removeValue(c, input);
        }

    addCallOutputs(c, node);
    ir.pushNode(dest, node);
}
overload lifetimeAnalyzeNode(c:LifetimeContext, dest:Vector[ir.Node], node:ir.If) {
    var outNode = ir.If(node.ast, node.condition, Vector[ir.Node](), Vector[ir.Node]());
    var origVariableFrames = c.variableFrames;

    // then branch
    withBlockFrame(c, outNode.thenBody, () ref=> {
        lifetimeAnalyzeSubbody(c, outNode.thenBody, node.thenBody);
    });

    var thenVariableFrames = move(c.variableFrames);
    c.variableFrames = origVariableFrames;

    // restore variable frames
    for (variable, frame in items(c.variableFrames))
        if (null?(lookup(thenVariableFrames, variable))) {
            assert(find(frame.liveValues, variable) == end(frame.liveValues), "lifetime analysis invariant: variable removed in branch must be removed from frame");
            push(frame.liveValues, variable);
        }

    // else branch
    withBlockFrame(c, outNode.elseBody, () ref=> {
        lifetimeAnalyzeSubbody(c, outNode.elseBody, node.elseBody);
    });

    var elseVariableFrames = move(c.variableFrames);
    c.variableFrames = origVariableFrames;

    // if a value was consumed in one branch, destroy it in the other
    // also, the context is currently in the else-branch state, so remove any then-consumed values
    var cleanUpVariables = Vector[RTValue]();

    for (variable, frame in items(c.variableFrames)) {
        var thenConsumed? = null?(lookup(thenVariableFrames, variable));
        var elseConsumed? = null?(lookup(elseVariableFrames, variable));

        if (thenConsumed? and not elseConsumed?) {
            destroyValue(outNode.elseBody, variable);
            push(cleanUpVariables, variable);
        } else if (elseConsumed? and not thenConsumed?) {
            destroyValue(outNode.thenBody, variable);
        }
    }

    for (variable in cleanUpVariables)
        removeValue(c, variable);

    ir.pushNode(dest, outNode);
}
overload lifetimeAnalyzeNode(c:LifetimeContext, dest:Vector[ir.Node], node:ir.While) {
    var outNode = ir.While(node.label, node.ast, Vector[ir.Node](), node.condition, Vector[ir.Node]());
    withLabelFrame(c, node.label, outNode.body, () ref=> {
        withStatementFrame(c, outNode.conditionBody, () ref=> {
            lifetimeAnalyzeSubbody(c, outNode.conditionBody, node.conditionBody);
        });
        lifetimeAnalyzeSubbody(c, outNode.body, node.body);
    });
    ir.pushNode(dest, outNode);
}
overload lifetimeAnalyzeNode(c:LifetimeContext, dest:Vector[ir.Node], node:ir.Bind) {
    if (localVariable?(node.output))
        lifetimeAnalyzeInitialize(c, dest, node);
    else {
        attractInputs(c, node);
        addOutputs(c, node);
        ir.pushNode(dest, node);
    }
}
overload lifetimeAnalyzeNode(c:LifetimeContext, dest:Vector[ir.Node], node:ir.Initialize) {
    lifetimeAnalyzeInitialize(c, dest, node);
}
overload lifetimeAnalyzeNode(c:LifetimeContext, dest:Vector[ir.Node], node:ir.Break) {
    unwindUntilLabel(c, dest, node.target);
    ir.pushNode(dest, node);
}
overload lifetimeAnalyzeNode(c:LifetimeContext, dest:Vector[ir.Node], node:ir.Continue) {
    unwindUntilLabel(c, dest, node.target);
    ir.pushNode(dest, node);
}
overload lifetimeAnalyzeNode(c:LifetimeContext, dest:Vector[ir.Node], node:ir.Throw) {
    attractInputs(c, node);
    unwindAll(c, dest);
    ir.pushNode(dest, node);
}
overload lifetimeAnalyzeNode(c:LifetimeContext, dest:Vector[ir.Node], node:ir.Adopt) {
    removeValue(c, node.value);
    addReference(c, node.value);
}
overload lifetimeAnalyzeNode(c:LifetimeContext, dest:Vector[ir.Node], node:ir.Consume) {
    attractInputs(c, node);
}

private lifetimeAnalyzeInitialize(c, dest, node) {
    assert(node.input.type == node.output.type, "lifetime analysis invariant: initialization input and output types must match");
    attractInputs(c, node);
    if (not podType?(node.input.type)) {
        var initializeInputs = RTValues(node.output, node.input);
        var initializeS = analyzeCallable(
            getHooks().initializeFrom,
            initializeInputs,
        );

        assert(maybe(initializeS.results, results => empty?(results), () => true), "initializeFrom must return no values");

        var initializeNode = ir.Call(
            node.ast,
            initializeInputs,
            Maybe(Vector[ir.OutputVariable]()),
            initializeS
        );

        lifetimeAnalyzeNode(c, dest, initializeNode);
    } else
        ir.pushNode(dest, node);
    addValue(c, node.output);
}

private lifetimeAnalyzeSubbody(c, subdest, subbody) {
    for (subnode in subbody) {
        lifetimeAnalyzeNode(c, subdest, *subnode);
    }
}

private removeValue(c:LifetimeContext, input) {
    if (podType?(input.type))
        return;

    var inputFramep = lookup(c.variableFrames, input);
    assert(not null?(inputFramep), "lifetime analysis invariant: consumed value must be live: ", input);
    var inputCoord = find(inputFramep^.liveValues, input);
    assert(inputCoord != end(inputFramep^.liveValues), "lifetime analysis invariant: variable must be in its expected frame");
    remove(inputFramep^.liveValues, inputCoord);
    remove(c.variableFrames, input);
}

private addValue(c:LifetimeContext, input) {
    if (localVariable?(input) or input.kind == RT_VALUE_RVALUE)
        addReference(c, input);
}

private addReference(c:LifetimeContext, input) {
    if (podType?(input.type))
        return;
    if (globalVariable?(input))
        return;

    if (not null?(lookup(c.variableFrames, input)))
        return;

    c.variableFrames[input] = c.blockFrame;
    push(c.blockFrame.liveValues, input);
}

private attractInputs(c:LifetimeContext, node) {
    // pull rvalue inputs into statement scope
    for (input in ir.nodeInputs(node)) {
        if (podType?(input.type))
            continue;
        if (input.kind != RT_VALUE_RVALUE)
            continue;
        removeValue(c, input);
        c.variableFrames[input] = c.statementFrame;
        push(c.statementFrame.liveValues, input);
    }
}

private destroyValue(dest:Vector[ir.Node], value) {
    if (podType?(value.type))
        return;

    // destroy always gets its argument as a "ref"
    var destroyInput = RTValue(RT_VALUE_REF, value.type, value.referent);
    var destroyS = analyzeCallable(
        getHooks().destroy,
        RTValues(destroyInput),
    );

    assert(maybe(destroyS.results, results => empty?(results), () => true), "destroy must return no values");

    var destroyNode = ir.Call(
        ir.ASTNode(Nothing()),
        RTValues(value),
        Maybe(Vector[ir.OutputVariable]()),
        destroyS
    );

    ir.pushNode(dest, destroyNode);
}

private addCallOutputs(c:LifetimeContext, node:ir.Call) {
    maybe(node.specialization.results, results ref=> {
        for (output, result in zipped(ir.nodeOutputs(node), results)) {
            if (result.kind == RT_VALUE_RVALUE and referenceVariable?(result))
                addReference(c, output);
            else
                addValue(c, output);
        }
    });
}

private addOutputs(c:LifetimeContext, node) {
    for (output in ir.nodeOutputs(node)) {
        addValue(c, output);
    }
}

private unwindFrame(dest:Vector[ir.Node], frame:Frame) {
    for (value in reversed(frame.liveValues))
        destroyValue(dest, value);
}

private closeFrame(c, dest, frame) {
    unwindFrame(dest, frame);
    for (value in frame.liveValues)
        remove(c.variableFrames, value);
}

frameLabel?(frame, label) = maybe(frame.label, l ref=> l == label, () ref=> false);

private unwindUntil(c:LifetimeContext, dest:Vector[ir.Node], untilFn) {
    var frame = c.statementFrame;
    while (not null?(frame)) {
        unwindFrame(dest, frame);
        if (untilFn(frame)) break;
        frame = frame.parent;
    }
}

unwindUntilLabel(c:LifetimeContext, dest:Vector[ir.Node], label) {
    unwindUntil(c, dest, frame ref=> frameLabel?(frame, label));
}

private unwindAll(c:LifetimeContext, dest:Vector[ir.Node]) {
    unwindUntil(c, dest, x => false);
}

private _withBlockFrame(frame, c, dest, fn) {
    var oldBlockFrame = c.blockFrame;
    c.blockFrame = frame;
    _withStatementFrame(frame, c, dest, fn);
    c.blockFrame = oldBlockFrame;
}

private _withStatementFrame(frame, c, dest, fn) {
    var oldStatementFrame = c.statementFrame;
    c.statementFrame = frame;
    fn();
    c.statementFrame = oldStatementFrame;
}

private withBlockFrame(c:LifetimeContext, dest:Vector[ir.Node], fn) {
    var frame = subframe(c.statementFrame);
    _withBlockFrame(frame, c, dest, fn);
    closeFrame(c, dest, frame);
}
private withStatementFrame(c:LifetimeContext, dest:Vector[ir.Node], fn) {
    var frame = subframe(c.statementFrame);
    _withStatementFrame(frame, c, dest, fn);
    closeFrame(c, dest, frame);
}
private withLabelFrame(c:LifetimeContext, label:ir.BreakTargetId, dest:Vector[ir.Node], fn) {
    var frame = subframe(c.statementFrame, label);
    _withBlockFrame(frame, c, dest, fn);
    closeFrame(c, dest, frame);
}

//
// lifetimeAnalyzeSpecialization
//

lifetimeAnalyzeSpecialization(s:Specialization) {
    var c = LifetimeContext();
    var outBody = Vector[ir.Node]();
    withBlockFrame(c, outBody, () ref=> {
        for (internalArg, arg in zipped(s.internalArgs, s.args))
            if (arg.kind == RT_VALUE_RVALUE)
                addReference(c, internalArg);
        lifetimeAnalyzeSubbody(c, outBody, just(s.body));
    });
    s.body = Maybe(move(outBody));
}

//
// lifetimeAnalyzeGlobalDestructor
//

lifetimeAnalyzeGlobalDestructor() Maybe[Specialization] {
    ref globalMap = getProgram().globalMap;
    var specialization = Specialization(
        Value(StringValue(String("global destructor")))
    );
    specialization.env = newEnv(getProgramMainModule());
    specialization.body = Maybe(Vector[ir.Node]());
    ref body = just(specialization.body);

    for (g in globalMap.globalOrder) {
        assert(not null?(lookup(globalMap.constructors, g)), "missing constructor in global map!");
        destroyValue(body, globalRTValue(g));
    }

    if (empty?(body))
        return nothing(Specialization);
    else
        return Maybe(specialization);
}

