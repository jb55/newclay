import newclay.common.*;
import newclay.core.*;
import newclay.loader.*;
import newclay.cache.*;
import commandline.dispatch.*;
import sha2.*;

create(args) {
    if (size(args) != 2) {
        println("usage: testcache create <main.clay> <cache>");
        return -1;
    }
    try {
        var program = loadProgram(args[0]);
        var cache = createCache(program);
        saveCache(args[1], cache);
    }
    catch (e:ClayError) {
        displayError(e);
    }
    return 0;
}

printEntry(hash:SHA256, s:CacheEntry) {
    println(hash);
    print("    ");
    println(*s);
}

show(args) {
    if (size(args) != 1) {
        println("usage: testcache show <cache>");
        return -1;
    }
    try {
        var cache = loadCache(args[0]);
        
        for (hash, entry in items(cache.entries))
            printEntry(hash, entry);
    }
    catch (e:ClayError) {
        displayError(e);
    }
    return 0;
}

diff(args) {
    if (size(args) != 2) {
        println("usage: testcache diff <main.clay> <cache>");
        return -1;
    }
    try {
        var program = loadProgram(args[0]);
        var newCache = createCache(program);
        var oldCache = loadCache(args[1]);

        var plus, minus = ...diffCaches(newCache, oldCache);

        if (size(plus) > 0) {
            println("New definitions not present in cache:");
            println("-------------------------------------");
            for (hash, entry in items(plus))
                printEntry(hash, entry);
        }

        if (size(minus) > 0) {
            println("Old definitions not present in program:");
            println("---------------------------------------");
            for (hash, entry in items(minus))
                printEntry(hash, entry);
        }
    }
    catch (e:ClayError) {
        displayError(e);
    }
    return 0;
}

main() = dispatchMain(create, show, diff);
