
import newclay.common.*;
import newclay.lexer;
import newclay.parser;
import newclay.ast as ast;
import newclay.core.*;
import newclay.loader.*;
import newclay.hooks.*;
import newclay.analysis.*;
import newclay.optimizer.*;
import newclay.lifetime.*;
import newclay.ir as ir;
import testanalysis.*;
import maybe.*;

main(args) {
    if (size(args) != 2) {
        println("usage: ", args[0], " <file>");
        return -1;
    }
    try {
        var program = loadProgram(args[1]);
        withProgram(program, () ref=> {
            initializeClayHooks();

            var s = analyzeMain();
            analyzeCallableBody(s);

            maybe(s.body, body ref=> {
                println("main:");
                optimizeSpecialization(s);
                lifetimeAnalyzeSpecialization(s);
                printSpecialization(1, s);
            });
            
            maybe(analyzeGlobalConstructor(), constructorS ref=> {
                println("global constructor:");
                optimizeSpecialization(constructorS);
                lifetimeAnalyzeSpecialization(constructorS);
                printSpecialization(1, constructorS);
            });
            
            maybe(lifetimeAnalyzeGlobalDestructor(), destructorS ref=> {
                println("global destructor:");
                optimizeSpecialization(destructorS);
                lifetimeAnalyzeSpecialization(destructorS);
                printSpecialization(1, destructorS);
            });
            
        });
    }
    catch (e:ClayError) {
        displayError(e);
    }
    return 0;
}
