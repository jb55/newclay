import meta.statics.(staticName, staticStringConcat);

// dumb simple library for displaying values for debugging purposes
import libc.stdio.(puts as c_puts, printf as c_printf);
import ctypes.(CString);

puts(s:StringConstant) { c_puts(CString(s)); }
printf(fmt:StringConstant, value) { c_printf(CString(fmt), value); }

show(s:StringConstant) { puts(s); }
overload show(s:CString) { c_puts(s); }
overload show(b:Bool) { puts(if (b) "true" else "false"); }
overload show(c:'C) | Char?('C) {
    if (UInt32(c) > 0x20_u32 and UInt32(c) < 0x7f_u32)
        printf("'%c'\n", c);
    else if (UInt32(c) < 0x100_u32)
        printf("'\\x%02X'\n", UInt32(c));
    else
        printf("'\\u%06X'\n", UInt32(c));
}
overload show(i:'I) | SignedInteger?('I)   and typeSize('I) <= 4 { printf("%d\n", i); }
overload show(i:'I) | UnsignedInteger?('I) and typeSize('I) <= 4 { printf("%u\n", i); }
overload show(f:'F) | Float?('F) { printf("%.18g\n", f); }
// XXX target-sensitive
overload show(i:'I) | SignedInteger?('I)   and typeSize('I) == 8 { printf("%lld\n", i); }
overload show(i:'I) | UnsignedInteger?('I) and typeSize('I) == 8 { printf("%llu\n", i); }

overload show(p:'P) | Pointer?('P) { printf("%p\n", p); }

overload show(#'x) { puts(staticName(#'x)); }

overload show(x, y, ..z) {
    show(x);
    show(y, ..z);
}

overload show() {}
