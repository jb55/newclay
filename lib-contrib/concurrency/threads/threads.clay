// XXX unix-specific

import ctypes.*;
import unix.pthreads.*;
import unsafe.valuesemantics.(uninitialized);

define Thread as RecordType(_handle:PthreadT);

define ThreadError as RecordType(error:CInt);

// XXX more flexible thread entry point
// should support stateful lambdas or other stateful types
// should verify that such stateful types do not capture non-Shared or
// non-immutable references/pointers

private threadRunner(#'f) | [..type(-> ..'f())] != [MOpaquePointer]
    = (x) -> ('f(); nullOpaque());
overload threadRunner(#'f) | [..type(-> ..'f())] == [MOpaquePointer]
    = (x) -> 'f();

spawn(#'f) inline | callDefined?('f)
{
    var handle = uninitialized(PthreadT);
    var code = pthread_create(&handle, null(PthreadAttrT),
        CCodePointer[[MOpaquePointer], [MOpaquePointer]](threadRunner(#'f)),
        nullOpaque()
    );
    if (code != 0)
        throw ThreadError(code);

    return Thread(handle);
}

overload equals?(x:Thread, y:Thread) = pthread_equal(x._handle, y._handle) != 0;

join(ref x:Thread) {
    var exit = uninitialized(MOpaquePointer);
    var code = pthread_join(x._handle, just(&exit));
    if (code != 0)
        throw ThreadError(code);
    return exit;
}

detach(ref x:Thread) {
    pthread_detach(x._handle);
}

self() = Thread(pthread_self());
