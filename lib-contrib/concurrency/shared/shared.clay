import concurrency.locks.*;
import concurrency.primitives as prim;
import meta.lltypes.(llType);
import unsafe.casts.(llcast);
import unsafe.compositetypes.(CompositeType, initializeRecord, destroyRecord);
import unsafe.valuesemantics.(
    BitwiseMoved?,
    Copyable?,
    Assignable?,
    DestroyDoesNothing?,
    destroy
);
import values.(mapValues);

public import concurrency.primitives.(NoOrder, AcquireReleaseOrder, FullOrder, order?);

#ValidShared?('T) = true;
overload #ValidShared?(Pointer['T])
    = staticError("a Shared[Pointer['T]] cannot reference a non-Shared 'T");
overload #ValidShared?(Pointer[Shared['T]]) = true;
overload #ValidShared?(Shared['T])
    = staticError("Shared[] cannot be nested");

define Shared['T];
overload #llType(Shared['T]) = llType('T);

overload #BitwiseMoved?(Shared['T]) = false;
overload #DestroyDoesNothing?(Shared['T]) = DestroyDoesNothing?('T);

overload Shared(forward v:'T) --> returned:Shared['T]
    | ValidShared?('T)
{
    unsharedCastUnsafe(returned) <-- v;
}

overload destroy(ref x:Shared['T]) { destroy(unsharedCastUnsafe(x)); }

// cast shared-ness on and off of values

unsharedCastUnsafe(forward x:Shared['T]) = forward llcast('T, x);
sharedCast(forward x:'T) = forward llcast(Shared['T], x);

// lock-free shared access. these operations are only defined on Shared types
// that are atomically accessible without locking

get(x:Shared['T], #'O) inline
    | defined?(-> prim.atomicGet(unsharedCastUnsafe(x), #'O))
    = prim.atomicGet(unsharedCastUnsafe(x), #'O);
overload get(x:Shared['T]) = get(x, FullOrder);

set(ref x:Shared['T], from, #'O) inline
    | defined?(-> { prim.atomicSet(unsharedCastUnsafe(x), from, #'O); })
{
    prim.atomicSet(unsharedCastUnsafe(x), from, #'O);
}
overload set(ref x:Shared['T], from) { set(x, from, FullOrder); }

cas(ref x:Shared['T], old, new, #'O) inline
    | defined?(-> prim.atomicCas(unsharedCastUnsafe(x), old, new, #'O))
    = prim.atomicCas(unsharedCastUnsafe(x), old, new, #'O);
overload cas(ref x:Shared['T], old, new) inline
    = cas(x, old, new, FullOrder);

cas2(ref x:Shared['T], old1, old2, new1, new2, #'O) inline
    | defined?(-> prim.atomicCas2(unsharedCastUnsafe(x), old1, old2, new1, new2, #'O))
    = prim.atomicCas2(unsharedCastUnsafe(x), old1, old2, new1, new2, #'O);
overload cas2(ref x:Shared['T], old1, old2, new1, new2) inline
    = cas2(x, old1, old2, new1, new2, FullOrder);

// shared access synchronized via locks

lockedGet(x:Shared['T], ref l:'L) inline | Lock?('L) and Copyable?('T) {
    var _ = LockHolder(l);
    return unsharedCastUnsafe(x);
}

lockedSet(ref x:Shared['T], from:'U, ref l:'L) | Lock?('L) and Assignable?('T, 'U) {
    var _ = LockHolder(l);
    unsharedCastUnsafe(x) = from;
}

locked(forward x:Shared['T], ref l:'L, forward f)
    | Lock?('L) and defined?(-> forward ..f(unsharedCastUnsafe(x)))
{
    var _ = LockHolder(l);
    return forward ..f(unsharedCastUnsafe(x));
}

// field access for records, tuples, arrays

#SharedIndexable?('X) = false;
overload #SharedIndexable?('R) | RecordType?('R) = true;
overload #SharedIndexable?(Tuple[..'T]) = true;
overload #SharedIndexable?(Array['T, 'n]) = true;

#SharedUnpackable?('X) = false;
overload #SharedUnpackable?('R) | RecordType?('R) or NewType?('R) = true;
overload #SharedUnpackable?(Tuple[..'T]) = true;

overload index(forward x:Shared['T], forward ..idx:'I)
    | SharedIndexable?('T)
    = forward ..mapValues(
        (forward e) -> forward sharedCast(e),
        ..unsharedCastUnsafe(x)[..idx]
    );

overload unpack(forward x:Shared['T])
    | SharedUnpackable?('T)
    = forward ..mapValues(
        (forward e) -> forward sharedCast(e),
        ..*unsharedCastUnsafe(x)
    );

