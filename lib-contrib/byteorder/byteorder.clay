import unsafe.casts.(bitcast);
import unsafe.valuesemantics.(uninitialized);
import values.*;

define networkToHost;
define hostToNetwork;

overload networkToHost(n:'I8) | inValues?('I8, Int8, UInt8) = n;
overload hostToNetwork(n:'I8) | inValues?('I8, Int8, UInt8) = n;

overload networkToHost(n:'I16) | inValues?('I16, Int16, UInt16) {
    var bytes = bitcast(Array[UInt8, 2], n);
    return bitor(
        bitshl(UInt16(bytes[0]), 8),
               UInt16(bytes[1]),
    );
}
overload hostToNetwork(n:'I16) | inValues?('I16, Int16, UInt16) {
    var ret = uninitialized(Union[Array[UInt8, 2], 'I16]);
    ret.0[0] = UInt8(bitshr(n,  8));
    ret.0[1] = UInt8(       n     );
    return ret.1;
}

overload networkToHost(n:'I32) | inValues?('I32, Int32, UInt32) {
    var bytes = bitcast(Array[UInt8, 4], n);
    return bitor(
        bitshl(UInt32(bytes[0]), 24),
        bitshl(UInt32(bytes[1]), 16),
        bitshl(UInt32(bytes[2]),  8),
               UInt32(bytes[3])
    );
}
overload hostToNetwork(n:'I32) | inValues?('I32, Int32, UInt32) {
    var ret = uninitialized(Union[Array[UInt8, 4], 'I32]);
    ret.0[0] = UInt8(bitshr(n, 24));
    ret.0[1] = UInt8(bitshr(n, 16));
    ret.0[2] = UInt8(bitshr(n,  8));
    ret.0[3] = UInt8(       n     );
    return ret.1;
}

overload networkToHost(n:'I64) | inValues?('I64, Int64, UInt64) {
    var bytes = bitcast(Array[UInt8, 8], n);
    return bitor(
        bitshl(UInt64(bytes[0]), 56),
        bitshl(UInt64(bytes[1]), 48),
        bitshl(UInt64(bytes[2]), 40),
        bitshl(UInt64(bytes[3]), 32),
        bitshl(UInt64(bytes[4]), 24),
        bitshl(UInt64(bytes[5]), 16),
        bitshl(UInt64(bytes[6]),  8),
               UInt64(bytes[7])
    );
}
overload hostToNetwork(n:'I64) | inValues?('I64, Int64, UInt64) {
    var ret = uninitialized(Union[Array[UInt8, 8], 'I64]);
    ret.0[0] = UInt8(bitshr(n, 56));
    ret.0[1] = UInt8(bitshr(n, 48));
    ret.0[2] = UInt8(bitshr(n, 40));
    ret.0[3] = UInt8(bitshr(n, 32));
    ret.0[4] = UInt8(bitshr(n, 24));
    ret.0[5] = UInt8(bitshr(n, 16));
    ret.0[6] = UInt8(bitshr(n,  8));
    ret.0[7] = UInt8(       n     );
    return ret.1;
}

