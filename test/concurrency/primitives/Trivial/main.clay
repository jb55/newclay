import concurrency.primitives.*;
import show.*;
import unsafe.casts.(bitcast);

// test that "atomic" operations do the right thing within a single thread

var foo = 0, foo64 = 0_i64;

main()
    | (
        AtomicGettable?(Int) and AtomicSettable?(Int)
        and AtomicCasable?(Int) and AtomicCas2able?(Int64, Int32)
    ) or staticError("Int must be usable atomically for this test")
{
    atomicSet(foo, 42, FullOrder);
    show(atomicGet(foo, FullOrder)); ////42

    show(atomicCas(foo, 43, 17, FullOrder)); ////false
    show(atomicGet(foo, FullOrder)); ////42
    show(atomicCas(foo, 42, 17, FullOrder)); ////true
    show(atomicGet(foo, FullOrder)); ////17

    show(atomicCas2(foo64, 0_i32, 0_i32, 12_i32, 24_i32, FullOrder)); ////true
    var words = bitcast(Array[Int32, 2], atomicGet(foo64, FullOrder));
    show(words[0]); ////12
    show(words[1]); ////24

    show(atomicCas2(foo64, 24_i32, 12_i32, 17_i32, 42_i32, FullOrder)); ////false
    words = bitcast(Array[Int32, 2], atomicGet(foo64, FullOrder));
    show(words[0]); ////12
    show(words[1]); ////24

    show(atomicCas2(foo64, 12_i32, 24_i32, 17_i32, 42_i32, FullOrder)); ////true
    words = bitcast(Array[Int32, 2], atomicGet(foo64, FullOrder));
    show(words[0]); ////17
    show(words[1]); ////42
}
