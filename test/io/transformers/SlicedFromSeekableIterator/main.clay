import io.transformers.(SlicedFrom);
import show.(show);

define PowersOfTwo as RecordType(n:Int, count:UInt);
overload PowersOfTwo(count:UInt) = PowersOfTwo(1, count);

overload hasFront?(i:PowersOfTwo) = i.count > 0u;
overload front(i:PowersOfTwo) = i.n;
overload incFront(ref i:PowersOfTwo) { i.n *= 2; dec(i.count); }

overload seekFront(ref i:PowersOfTwo, distance:UInt) {
    i.n = bitshl(i.n, distance);
    i.count -= distance;
}
overload size(i:PowersOfTwo) = i.count;

main() {
    for (i in PowersOfTwo(5u))
        show(i);
    show("--");

    for (i in SlicedFrom(PowersOfTwo(5u), 0))
        show(i);
    show("--");

    for (i in SlicedFrom(PowersOfTwo(5u), 1))
        show(i);
    show("--");

    for (i in SlicedFrom(PowersOfTwo(5u), 4))
        show(i);
    show("--");

    for (i in SlicedFrom(PowersOfTwo(5u), 5))
        show(i);
    show("--");

    for (i in SlicedFrom(PowersOfTwo(5u), 6))
        show(i);
}
