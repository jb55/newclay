import meta.lambdas.*;
import show.*;
import values.*;

main() {
    var y = 2;
    var stateless1 = (x) -> x + 1;
    var stateless2 = (x) => x + 1;
    var captureByRef = (x) -> x + y;
    var captureByVal = (x) => x + y;

    show(lambdaString(stateless1)); ////(x) -> x + 1
    show(lambdaString(stateless2)); ////(x) => x + 1
    show(lambdaString(captureByRef)); ////(x) -> x + y
    show(lambdaString(captureByVal)); ////(x) => x + y

    ////7
    ////21
    show(..dropValues(#1, ..lambdaLocation(stateless1)));
    ////8
    ////21
    show(..dropValues(#1, ..lambdaLocation(stateless2)));
    ////9
    ////23
    show(..dropValues(#1, ..lambdaLocation(captureByRef)));
    ////10
    ////23
    show(..dropValues(#1, ..lambdaLocation(captureByVal)));

    show(lambdaCapturesByValue?(stateless1)); ////false
    show(lambdaCapturesByValue?(stateless2)); ////true
    show(lambdaCapturesByValue?(captureByRef)); ////false
    show(lambdaCapturesByValue?(captureByVal)); ////true

    show(lambdaCapturesByReference?(stateless1)); ////true
    show(lambdaCapturesByReference?(stateless2)); ////false
    show(lambdaCapturesByReference?(captureByRef)); ////true
    show(lambdaCapturesByReference?(captureByVal)); ////false

    show(lambdaStateless?(stateless1)); ////true
    show(lambdaStateless?(stateless2)); ////true
    show(lambdaStateless?(captureByRef)); ////false
    show(lambdaStateless?(captureByVal)); ////false

}
