import show.(show);
import __primitives__.*;


//
// MapValues
//

define MapValues;
overload #MapValues('f, 'first, ..'rest) = 'f('first), ..MapValues('f, ..'rest);
overload #MapValues('f) = ;



//
// clay types as symbols
//

define Bool;
define Int;
define Array['T, 'n];
define Tuple[..'T];

define String;


define TupleWithTag?;
overload #TupleWithTag?('x, 'tag) =
    staticTuple?('x)
    and staticLesser?(0, staticTupleSize('x))
    and staticEquals?(staticTupleElement('x, 0), 'tag);

private  #_SymbolBody() = [];
overload #_SymbolBody('x, ..'y) = 'x;

#SymbolBody('t) = _SymbolBody(..staticSymbolBody('t));


//
// record types
//

define RecordTag;

define RecordType;
overload #RecordType(..'fields) =
    [RecordTag, FieldNames(..'fields), FieldTypes(..'fields)];

define FieldNames;
overload #FieldNames(..'fields) =
    [..MapValues((f) -> staticTupleElement(f, 0), ..'fields)];

define FieldTypes;
overload #FieldTypes(..'fields) =
    [..MapValues((f) -> staticTupleElement(f, 1), ..'fields)];

define Record?;
overload #Record?('t) =
    staticSymbol?('t)
    and TupleWithTag?(SymbolBody('t), RecordTag);

define RecordFieldCount;
overload #RecordFieldCount('t) | Record?('t) =
    staticTupleSize(staticTupleElement(SymbolBody('t), 1));

define RecordFieldNames;
overload #RecordFieldNames('t) | Record?('t) =
    staticTupleElement(SymbolBody('t), 1);

define RecordFieldTypes;
overload #RecordFieldTypes('t) | Record?('t) =
    staticTupleElement(SymbolBody('t), 2);



//
// variant types
//

define VariantTag;

define VariantType;
overload #VariantType(..'members) = [VariantTag, [..'members]];

define Variant?;
overload #Variant?('t) = 
    staticSymbol?('t)
    and TupleWithTag?(SymbolBody('t), VariantTag);

define VariantMembers;
overload #VariantMembers('t) | Variant?('t) = [
    ..staticTupleElements(staticTupleElement(SymbolBody('t), 1)),
    ..staticSymbolAttributes('t),
];



//
// testing
//

define GenericError as RecordType(msg:String);

define Exception as VariantType(GenericError);

define AssertionError as RecordType(condition:String, msg:String);

extend Exception with AssertionError;

define Main;
overload #Main() = [
    Variant?(String),
    Variant?(Exception),
    VariantMembers(Exception)
];

main() { show(..#Main()); }
