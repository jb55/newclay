import show.(show);
import __primitives__.*;


//
// MapValues
//

define MapValues;
overload #MapValues('f, 'first, ..'rest) = 'f('first), ..MapValues('f, ..'rest);
overload #MapValues('f) = ;



//
// clay types as symbols
//

private  #_SymbolBody() = ();
overload #_SymbolBody('x, ..'y) = 'x;

#SymbolBody('t) = _SymbolBody(..staticSymbolBody('t));

define Bool;
define Int;
define Array['T, 'n];
define Tuple[..'T];

define RecordTag;

define RecordType;
overload #RecordType(..'fields) = [RecordTag, FieldNames(..'fields), FieldTypes(..'fields)];

define FieldNames;
overload #FieldNames(..'fields) = [..MapValues((f) -> staticTupleElement(f, 0), ..'fields)];

define FieldTypes;
overload #FieldTypes(..'fields) = [..MapValues((f) -> staticTupleElement(f, 1), ..'fields)];

define Record?;
overload #Record?('t) =
    staticSymbol?('t)
    and TupleWithTag?(SymbolBody('t), RecordTag);

define TupleWithTag?;
overload #TupleWithTag?('x, 'tag) =
    staticTuple?('x)
    and staticLesser?(0, staticTupleSize('x))
    and staticEquals?(staticTupleElement('x, 0), 'tag);

define RecordFieldCount;
overload #RecordFieldCount('t) | Record?('t) =
    staticTupleSize(staticTupleElement(SymbolBody('t), 1));

define RecordFieldNames;
overload #RecordFieldNames('t) | Record?('t) =
    staticTupleElement(SymbolBody('t), 1);

define RecordFieldTypes;
overload #RecordFieldTypes('t) | Record?('t) =
    staticTupleElement(SymbolBody('t), 2);


define Point['T] as RecordType(x:'T, y:'T);

define RecordInfo;
overload #RecordInfo('t) | Record?('t) =
    ['t, RecordFieldNames('t), RecordFieldTypes('t)];

define Main;
overload #Main() = RecordInfo(Point[Int]);

main() { show(..#Main()); }
