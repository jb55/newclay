import show.(show);
import io.transformers.(Zipped);

oneInt() = 1;
twoInts() = 1, 2;
fourInts() = 1, 2, 3, 4;

var _foo = 1;
fourIntRefs() = ref _foo, ref _foo, ref _foo, ref _foo;

bindingStatements() {
    // XXX uninitialized vars not yet supported by compiler
    //var x;
    //var x:Int;
    //var x, y;
    //var x, y:Int;
    //var x:Int, y;
    //var x, y:'T;
    //var x:'T, y;

    var a = 1;
    var b:Int = 1;

    var c:Int = 1, d:Int = 2;

    var e, f = 1, 2;
    var g, h = ..twoInts();
    var i:Int, j = ..twoInts();
    var k, l:Int = ..twoInts();
    var m:Int, n:Int = ..twoInts();
    var o:Int, p:Int, ..q = ..fourInts();

    var ..r = ..twoInts();

    ref s:Int, t:Int, ..u = ..fourIntRefs();
    rvalue v:Int, w:Int, ..x = ..fourInts();
    const y:Int, z:Int, ..aa = ..fourInts();
    forward bb:Int, cc:Int, ..dd = ..fourInts();
}

labeledStatements() {
    @wut {
        break @wut;
        continue @wut;
    }

    @outer while (true)
        @middle for (b in Range(2))
            @inner static for (d in 1, 2, 3)
                break @outer;
}

assignmentStatements() {
    var x = 1, y = 2;
    var ..z = oneInt();

    x = 1;
    x <-- 1;
    x, y <-- 1, 2;
    x, y, ..z <-- 1, 2, 3;
}

returnStatement1() {
    var x = 1;
    return x;
}

returnStatement2() {
    return ref ..fourIntRefs(), const ..fourIntRefs();
}

controlFlowStatements() {
    var x = true;
    while (true) {
        if (x)
            break;
        else
            continue;
    }
}

forStatements() {
    for (x:Int, ref y:'T in Zipped(Range(2), Array[Int, 2](1, 2))) {}
}

staticForStatements() {
    var y, z, ..w = 1, 2, 3, 4;
    static for (x in y, z, ..w) {}

    static for (ref x:Int in y, z, ..w) {}
}

foo() {}
bar() {}

whileStatements() {
    var x = true, y = true;
    while (x) {}
    while (foo(); y) {}
}

ifStatements() {
    var x = true, y = false;
    if (x)
        foo();
    else
        bar();

    if (x) {
        foo();
    } else if (foo(); y) {
        bar();
    } else {
        bar();
    }
}

switchStatements() {
    var x = true, y = false, z = true, w = false;
    switch (x)
    case (y) {
        foo();
    }

    switch (foo(); x)
    case (y, z)
        foo();
    case (z, w) {
        foo();
    }
    else foo();

    switch (x)
    case (y)
        foo();
    else {
        foo();
    }
}

tryStatements() {
    try {
        foo();
    } catch (ex) {
        foo();
    }

    try {
        foo();
    } catch (ex:Int) {
        foo();
    } catch (ex:'T) {
        foo();
    } catch (ex) {
        foo();
    }
}

emptyStatements() {
    ; ;
}

unreachableStatement() {
    while (true) {}
    __unreachable__;
}

main() {
    show("ok");
}

