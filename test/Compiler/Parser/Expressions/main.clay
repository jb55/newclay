import values.(allValues?);
import show.(show);
import show as showModule;

define Tracer as RecordType();
overload index(x:Tracer, ..etc) = showTrace(#index);
overload call(x:Tracer, ..etc) = showTrace(#call);
overload dereference(x:Tracer) = showTrace(#dereference);
overload fieldRef(x:Tracer, ..etc) = showTrace(#fieldRef);
overload staticIndex(x:Tracer, ..etc) = showTrace(#staticIndex);
overload unpack(x:Tracer) = showTrace(#unpack);
overload plus(x:Tracer) = showTrace(#plus);
overload minus(x:Tracer) = showTrace(#minus);
overload multiply(x:Tracer, y:Tracer) = showTrace(#multiply);
overload divide(x:Tracer, y:Tracer) = showTrace(#divide);
overload quotient(x:Tracer, y:Tracer) = showTrace(#quotient);
overload remainder(x:Tracer, y:Tracer) = showTrace(#remainder);
overload add(x:Tracer, y:Tracer) = showTrace(#add);
overload subtract(x:Tracer, y:Tracer) = showTrace(#subtract);
overload lesser?(x:Tracer, y:Tracer) = showTrace(#lesser?);
overload lesserEquals?(x:Tracer, y:Tracer) = showTrace(#lesserEquals?);
overload greater?(x:Tracer, y:Tracer) = showTrace(#greater?);
overload greaterEquals?(x:Tracer, y:Tracer) = showTrace(#greaterEquals?);
overload greater?(x:Tracer, y:Tracer) = showTrace(#greater?);
overload greaterEquals?(x:Tracer, y:Tracer) = showTrace(#greaterEquals?);
overload equals?(x:Tracer, y:Tracer) = showTrace(#equals?);
overload notEquals?(x:Tracer, y:Tracer) = showTrace(#notEquals?);

overload tupleLiteral(..x:'TT) | allValues?((x) -> x == Tracer, ..'TT)
    = showTrace(#tupleLiteral);

showTrace(..x) { show(..x); return Tracer(); }
trace(..x) { show("--"); }

define Foo as RecordType(x:Int);

testOverloadableOperators() {
    var v = Tracer();
    var w = Tracer();
    var x = Tracer();
    var y = Tracer();
    var z = Tracer();
    var ..zz = Tracer(), Tracer();

    trace(x[y, z]);
    trace(x(y, z));
    trace(x^);
    trace(x.y);
    trace(x.222);
    trace(x.2_222);
    trace(x.0.1.2);

    trace(x[y, z]^);
    trace(x[y, z](w, v)^);
    trace(x[y, z]^(w, v)^);

    trace(+x);
    trace(-x);
    trace(*x);

    trace(+x[y, z]^(w, v)^);

    trace(x * y);
    trace(x / y);
    trace(x div y);
    trace(x mod y);

    trace(-x * y[z]);
    trace(x[y] * -z);

    trace(x + y);
    trace(x - y);

    trace(x * y + z / w);

    trace(x < y);
    trace(x <= y);
    trace(x >= y);
    trace(x > y);

    trace(x + y < v - w);
    trace(x + y <= v - w);
    trace(x + y >= v - w);
    trace(x + y > v - w);

    trace(x == y);
    trace(x != y);

    trace(x < y != x > y);
    trace(x <= y == x >= y);

    x = y;
    show("--");
    x <-- y;
    show("--");
    x += y;
    show("--");
    x -= y;
    show("--");
    x *= y;
    show("--");
    x /= y;
    show("--");
    x div= y;
    show("--");
    x mod= y;
    show("--");

    trace((x));
    trace([x]);
    trace([x, y, z]);
    trace([..zz]);
    trace([x, y, (z, w)]);
    trace((x(); y(); z));
}

testBooleanOperators() {
    var a = true, b = false, c = true, d = false;
    var i = 1, j = 2;
    var ab = Array[Pointer[Bool], 2](&a, &b);

    show(not a);

    show(not ab[0]^);
    show(not i == j);
    show(not i != j);

    show(a and b);
    show(not a and b);
    show(a and not b);

    show(a or b);
    show(a and b or c);
    show(not a and b or c and not d);

    show(if (a) i else j);
    show(if (a) b or c else b and c);
}

testThrowOperatorParsing() {
    if (false) {
        throw 0;
        var x = if (true) throw 1 else throw 2;
        var y = if (; true) throw 1 else throw 2;
    }
}

testAddressOperator() {
    var f = Foo();
    show(#type(-> &f));
    show(#type(-> &f.x));
}

#two() = 2;

#time() = "compile time";
overload time() = "runtime";

testStaticOperator() {
    show(#time());
    show(#two);
    show(#two());
    show(#-two());
    show(#showModule.show);
}

main() {
    testOverloadableOperators();
    show("**");
    testBooleanOperators();
    show("**");
    testThrowOperatorParsing();
    show("**");
    testAddressOperator();
    show("**");
    testStaticOperator();
}

