import unsafe.compositetypes.*;
import unsafe.valuesemantics.*;
import show.(show);

define Foo as CompositeType(value:Int);
overload Foo(v:Int) = initializeRecord(Foo, v);
overload destroy(x:Foo) {}
overload #BitwiseMoved?(Foo) = false;
overload moveRvalue(ref x:Foo) { show("moving"); return initializeRecord(Foo, x.value); }

foo(b?:Bool) {
    rvalue x = Foo(5);
    var x1 = Foo(0);
    show(x1.value);
    var x2 = Foo(0);

    if (b?) {
        x1 <-- x;
        show(x1.value);
    } else {
        x2 <-- x;
        show(x2.value);
    }
}

main() {
    foo(true);
    foo(false);
}
