import unsafe.compositetypes.*;
import unsafe.valuesemantics.*;
import show.(show);

define Foo as CompositeType(value:Int);
overload Foo(v:Int) = initializeRecord(Foo, v);
overload destroy(x:Foo) {}
overload #BitwiseMoved?(Foo) = false;
overload moveRvalue(ref x:Foo) { show("moving"); return initializeRecord(Foo, x.value); }

main() {
    var x = uninitialized(Foo);
    x <-- Foo(1);
    show(x.value);
}
