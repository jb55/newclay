import unsafe.compositetypes.*;
import unsafe.valuesemantics.*;
import show.(show);

define Foo as CompositeType(value:Int);
overload Foo(v:Int) = initializeRecord(Foo, v);
overload destroy(x:Foo) {}
overload #BitwiseMoved?(Foo) = false;
overload moveRvalue(ref x:Foo) { show("moving"); return initializeRecord(Foo, x.value); }

main() {
    var x1 = Foo(0);
    show(x1.value);
    rvalue x = Foo(5);
    x1 <-- x; //moving could be elided here but isn't yet
    show(x1.value);
}
