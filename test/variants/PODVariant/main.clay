import show.*;
import variants.*;

define Foo as VariantType(Bool, Int, Char);

define showType;
overload showType(x:Bool) { show("boolean", x); }
overload showType(x:Int)  { show("integer", x); }
overload showType(x:Char) { show("character", x); }

main() {
    var a = Foo(true), b = Foo(22), c = Foo('@');
    var d = b;
    var e = move(c);

    static for (x in a, b, d, e)
        dispatch(x, showType);

    show("--");
    show(variantIs?(Bool, a));
    show(variantIs?(Int,  a));
    show(variantIs?(Char, a));
    show(variantAs( Bool, a));

    show("--");
    show(variantIs?(Bool, b));
    show(variantIs?(Int,  b));
    show(variantIs?(Char, b));
    show(variantAs( Int,  b));

    show("--");
    show(variantIs?(Bool, d));
    show(variantIs?(Int,  d));
    show(variantIs?(Char, d));
    show(variantAs( Int,  d));

    show("--");
    show(variantIs?(Bool, e));
    show(variantIs?(Int,  e));
    show(variantIs?(Char, e));
    show(variantAs( Char, e));
}
