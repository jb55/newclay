import variants.*;
import variants.representation.*;
import show.*;

define Null as RecordType();

define MaybePointer['T] as
    VariantType(Null, Pointer['T]),
    WithReprType(NullablePointerRepr);

foo(_:Null) {
    show("nothing");
}

overload foo(p:Pointer[Int]) {
    show(p^);
    p^ += 1;
}

main() {
    show(#(typeSize(MaybePointer[Int]) == typeSize(Pointer[Int]))); ////true

    var i = 5;
    var m = MaybePointer[Int](&i);
    var n = MaybePointer[Int](Null());

    dispatch(m, foo); ////5
    dispatch(m, foo); ////6
    dispatch(n, foo); ////nothing
    dispatch(n, foo); ////nothing

    show(i); ////7

    show("--"); ////--
    show(variantIs?(Null,         m)); ////false
    show(variantIs?(Pointer[Int], m)); ////true
    show(variantAs (Pointer[Int], m)^); ////7

    show("--"); ////--
    show(variantIs?(Null,         n)); ////true
    show(variantIs?(Pointer[Int], n)); ////false
//    show(OpaquePointer(&variantAs(Null, n)) == OpaquePointer(&n)); ////true
}
