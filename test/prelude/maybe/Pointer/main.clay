import show.*;
import unsafe.memory.*;
import unsafe.casts.(bitcast);

define Node['T] as RecordType(value:'T, next:List['T]);

alias List['T] = MPointer[Node['T]];

nil(#'T) = null(Node['T]);
cons(forward v:'T, next:List['T]) {
    var l = allocateUninitializedValue(Node['T]);
    l^ <-- Node['T](v, next);
    return just(l);
}

main() {
    show(typeSize(MPointer[Int]) == typeSize(Pointer[Int])); ////true
    show(typeSize(MOpaquePointer) == typeSize(OpaquePointer)); ////true
    show(typeSize(Maybe[CCodePointer[[], []]]) == typeSize(CCodePointer[[], []])); ////true
    show(typeSize(Maybe[MPointer[Int]]) != typeSize(Pointer[Int])); ////true

    show(bitcast(Int, null(Int))); ////0
    show(bitcast(Int, nullOpaque())); ////0

    var int = 0;
    show(bitcast(Int, just(&int)) == bitcast(Int, &int)); ////true
    show(bitcast(Int, just(OpaquePointer(&int))) == bitcast(Int, &int)); ////true

    show("--"); ////--

    // NB: we leak the list memory, since we're quitting soon anyway
    var l = cons(21, cons(1211, cons(111221, nil(Int))));

    show(just?(l)); ////true
    show(nothing?(l)); ////false
    ////just:
    ////21
    maybe(l, (x) -> { show("just:"); show(x^.value); }, -> { show("nothing"); });

    show("--"); ////--

    var l5 = bind(l,
        (x) -> (show(x^.value); x^.next), ////21
        (x) -> (show(x^.value); x^.next), ////1211
        (x) -> (show(x^.value); x^.next), ////111221
        (x) -> (show(x^.value); x^.next),
        (x) -> (show(x^.value); x^.next),
    );

    show("--"); ////--

    show(just?(l5)); ////false
    show(nothing?(l5)); ////true
    maybe(l5, (x) -> { show("just:"); show(x^.value); }, -> { show("nothing"); }); ////nothing
}
