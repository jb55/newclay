import meta.lltypes.(llType, llTupleType);
import show.*;
import unsafe.coordinates.(ContiguousCoordinate);
import unsafe.valuesemantics.(POD?);

define NonPODType;
overload #llType(NonPODType) = llTupleType[];

main() {
    show(#POD?(Bool)); ////true
    show(#POD?(Int)); ////true
    show(#POD?(UInt)); ////true
    show(#POD?(Int8)); ////true
    show(#POD?(Int16)); ////true
    show(#POD?(Int32)); ////true
    show(#POD?(Int64)); ////true
    show(#POD?(UInt8)); ////true
    show(#POD?(UInt16)); ////true
    show(#POD?(UInt32)); ////true
    show(#POD?(UInt64)); ////true
    show(#POD?(Float32)); ////true
    show(#POD?(Float64)); ////true
    show(#POD?(Char)); ////true
    show(#POD?(StringConstant)); ////true
    show(#POD?(Static[2])); ////true
    show(#POD?(Pointer[Int])); ////true
    show(#POD?(Pointer[NonPODType])); ////true
    show(#POD?(OpaquePointer)); ////true
    show(#POD?(ContiguousCoordinate[Int])); ////true
    show(#POD?(ContiguousCoordinate[NonPODType])); ////true
    show(#POD?(ExternalCodePointer[CdeclABI, false, [Int], [Int]])); ////true
    show(#POD?(Array[Int, 1])); ////true
    show(#POD?(Tuple[Int, UInt])); ////true
    show(#POD?(Union[Int, UInt])); ////true
    show(#POD?(Union[Int, NonPODType])); ////true

    show(#POD?(NonPODType)); ////false
    show(#POD?(Array[NonPODType, 1])); ////false
    show(#POD?(Tuple[Int, NonPODType])); ////false
}
