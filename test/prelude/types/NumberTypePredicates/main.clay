import unsafe.coordinates.(ContiguousCoordinate, CoordinateRange);
import show.*;

main() {
    // Primitive types
    show(##PrimitiveType?(Bool)); ////true
    show(##PrimitiveType?(Int)); ////true
    show(##PrimitiveType?(UInt)); ////true
    show(##PrimitiveType?(Int8)); ////true
    show(##PrimitiveType?(Int16)); ////true
    show(##PrimitiveType?(Int32)); ////true
    show(##PrimitiveType?(Int64)); ////true
    show(##PrimitiveType?(UInt8)); ////true
    show(##PrimitiveType?(UInt16)); ////true
    show(##PrimitiveType?(UInt32)); ////true
    show(##PrimitiveType?(UInt64)); ////true
    show(##PrimitiveType?(Float32)); ////true
    show(##PrimitiveType?(Float64)); ////true
    show(##PrimitiveType?(Char)); ////true
    show(##PrimitiveType?(Static[2])); ////true
    show(##PrimitiveType?(OpaquePointer)); ////true
    // Nonprimitive types
    show(##PrimitiveType?(StringConstant)); ////false
    show(##PrimitiveType?(Pointer[Int])); ////false
    show(##PrimitiveType?(ContiguousCoordinate[Int])); ////false
    show(##PrimitiveType?(ExternalCodePointer[CdeclABI, true, [], []])); ////false
    show(##PrimitiveType?(ExternalCodePointer[StdcallABI, false, [Int, Int], Int])); ////false
    show(##PrimitiveType?(Array[Int, 12])); ////false
    show(##PrimitiveType?(Tuple[Int, Int])); ////false
    show(##PrimitiveType?(Union[Int, Int])); ////false

    // Integer types
    show(##Integer?(Int)); ////true
    show(##Integer?(UInt)); ////true
    show(##Integer?(Int8)); ////true
    show(##Integer?(Int16)); ////true
    show(##Integer?(Int32)); ////true
    show(##Integer?(Int64)); ////true
    show(##Integer?(UInt8)); ////true
    show(##Integer?(UInt16)); ////true
    show(##Integer?(UInt32)); ////true
    show(##Integer?(UInt64)); ////true
    // Noninteger types
    show(##Integer?(Bool)); ////false
    show(##Integer?(Float32)); ////false
    show(##Integer?(Float64)); ////false
    show(##Integer?(Char)); ////false
    show(##Integer?(Static[2])); ////false
    show(##Integer?(OpaquePointer)); ////false

    // Signed integer types
    show(#SignedInteger?(Int)); ////true
    show(#SignedInteger?(Int8)); ////true
    show(#SignedInteger?(Int16)); ////true
    show(#SignedInteger?(Int32)); ////true
    show(#SignedInteger?(Int64)); ////true
    // Non-signed-integer types
    show(#SignedInteger?(UInt)); ////false
    show(#SignedInteger?(UInt8)); ////false
    show(#SignedInteger?(UInt16)); ////false
    show(#SignedInteger?(UInt32)); ////false
    show(#SignedInteger?(UInt64)); ////false
    show(#SignedInteger?(Bool)); ////false
    show(#SignedInteger?(Float32)); ////false
    show(#SignedInteger?(Float64)); ////false
    show(#SignedInteger?(Char)); ////false
    show(#SignedInteger?(Static[2])); ////false
    show(#SignedInteger?(OpaquePointer)); ////false

    // Unsigned integer types
    show(#UnsignedInteger?(UInt)); ////true
    show(#UnsignedInteger?(UInt8)); ////true
    show(#UnsignedInteger?(UInt16)); ////true
    show(#UnsignedInteger?(UInt32)); ////true
    show(#UnsignedInteger?(UInt64)); ////true
    // Non-unsigned-integer types
    show(#UnsignedInteger?(Int)); ////false
    show(#UnsignedInteger?(Int8)); ////false
    show(#UnsignedInteger?(Int16)); ////false
    show(#UnsignedInteger?(Int32)); ////false
    show(#UnsignedInteger?(Int64)); ////false
    show(#UnsignedInteger?(Bool)); ////false
    show(#UnsignedInteger?(Float32)); ////false
    show(#UnsignedInteger?(Float64)); ////false
    show(#UnsignedInteger?(Char)); ////false
    show(#UnsignedInteger?(Static[2])); ////false
    show(#UnsignedInteger?(OpaquePointer)); ////false

    // Float types
    show(#Float?(Float32)); ////true
    show(#Float?(Float64)); ////true
    // Nonfloat types
    show(#Float?(UInt)); ////false
    show(#Float?(UInt8)); ////false
    show(#Float?(UInt16)); ////false
    show(#Float?(UInt32)); ////false
    show(#Float?(UInt64)); ////false
    show(#Float?(Int)); ////false
    show(#Float?(Int8)); ////false
    show(#Float?(Int16)); ////false
    show(#Float?(Int32)); ////false
    show(#Float?(Int64)); ////false
    show(#Float?(Bool)); ////false
    show(#Float?(Char)); ////false
    show(#Float?(Static[2])); ////false
    show(#Float?(OpaquePointer)); ////false

    // Number types
    show(#Number?(Float32)); ////true
    show(#Number?(Float64)); ////true
    show(#Number?(UInt)); ////true
    show(#Number?(UInt8)); ////true
    show(#Number?(UInt16)); ////true
    show(#Number?(UInt32)); ////true
    show(#Number?(UInt64)); ////true
    show(#Number?(Int)); ////true
    show(#Number?(Int8)); ////true
    show(#Number?(Int16)); ////true
    show(#Number?(Int32)); ////true
    show(#Number?(Int64)); ////true
    // Nonnumber types
    show(#Number?(Bool)); ////false
    show(#Number?(Char)); ////false
    show(#Number?(Static[2])); ////false
    show(#Number?(OpaquePointer)); ////false

    // Char types
    show(#Char?(Char)); ////true
    // Nonchar types
    show(#Char?(Float32)); ////false
    show(#Char?(Float64)); ////false
    show(#Char?(UInt)); ////false
    show(#Char?(UInt8)); ////false
    show(#Char?(UInt16)); ////false
    show(#Char?(UInt32)); ////false
    show(#Char?(UInt64)); ////false
    show(#Char?(Int)); ////false
    show(#Char?(Int8)); ////false
    show(#Char?(Int16)); ////false
    show(#Char?(Int32)); ////false
    show(#Char?(Int64)); ////false
    show(#Char?(Bool)); ////false
    show(#Char?(Static[2])); ////false
    show(#Char?(OpaquePointer)); ////false

    // Arithmetic compatible int types
    show(#ArithmeticCompatiblePrimitiveIntTypes?(Int,     Int    )); ////true
    show(#ArithmeticCompatiblePrimitiveIntTypes?(UInt,    UInt   )); ////true
    // Non-arithmetic-compatible-int types
    show(#ArithmeticCompatiblePrimitiveIntTypes?(Int,     UInt   )); ////false
    show(#ArithmeticCompatiblePrimitiveIntTypes?(UInt,    Int    )); ////false
    show(#ArithmeticCompatiblePrimitiveIntTypes?(Float64, Float64)); ////false

    // Arithmetic compatible float types
    show(#ArithmeticCompatiblePrimitiveFloatTypes?(Float64, Float64)); ////true
    show(#ArithmeticCompatiblePrimitiveFloatTypes?(Float64, Float32)); ////true
    show(#ArithmeticCompatiblePrimitiveFloatTypes?(Float32, Float64)); ////true
    show(#ArithmeticCompatiblePrimitiveFloatTypes?(Float32, Float32)); ////true
    // Non-arithmetic-compatible-float types
    show(#ArithmeticCompatiblePrimitiveFloatTypes?(Int,     Float64)); ////false
    show(#ArithmeticCompatiblePrimitiveFloatTypes?(UInt,    Float64)); ////false
    show(#ArithmeticCompatiblePrimitiveFloatTypes?(Float64, Int    )); ////false
    show(#ArithmeticCompatiblePrimitiveFloatTypes?(Float64, UInt   )); ////false
    show(#ArithmeticCompatiblePrimitiveFloatTypes?(Int,     Int    )); ////false
    show(#ArithmeticCompatiblePrimitiveFloatTypes?(UInt,    UInt   )); ////false

    // Bitwise-compatible types
    show(#BitwiseCompatiblePrimitiveTypes?(Int,     Int    )); ////true
    show(#BitwiseCompatiblePrimitiveTypes?(UInt,    Int    )); ////true
    show(#BitwiseCompatiblePrimitiveTypes?(UInt,    UInt   )); ////true
    // Non-bitwise-compatible types
    show(#BitwiseCompatiblePrimitiveTypes?(Float64, Float64)); ////false
    show(#BitwiseCompatiblePrimitiveTypes?(Int,     Float64)); ////false
    show(#BitwiseCompatiblePrimitiveTypes?(UInt,    Float64)); ////false
    show(#BitwiseCompatiblePrimitiveTypes?(Float64, Int    )); ////false
    show(#BitwiseCompatiblePrimitiveTypes?(Float64, UInt   )); ////false

    // Comparable types
    show(#ComparablePrimitiveTypes?(Int,     Int    )); ////true
    show(#ComparablePrimitiveTypes?(UInt,    UInt   )); ////true
    show(#ComparablePrimitiveTypes?(Float64, Float64)); ////true
    show(#ComparablePrimitiveTypes?(Bool,    Bool   )); ////true
    show(#ComparablePrimitiveTypes?(Char,    Char   )); ////true
    show(#ComparablePrimitiveTypes?(ContiguousCoordinate[Int], ContiguousCoordinate[Int])); ////true
    // Noncomparable types
    show(#ComparablePrimitiveTypes?(Char,    Bool   )); ////false
    show(#ComparablePrimitiveTypes?(Char,    Int    )); ////false
    show(#ComparablePrimitiveTypes?(Char,    UInt   )); ////false
    show(#ComparablePrimitiveTypes?(Char,    Float64)); ////false
    show(#ComparablePrimitiveTypes?(Bool,    Char   )); ////false
    show(#ComparablePrimitiveTypes?(Bool,    Int    )); ////false
    show(#ComparablePrimitiveTypes?(Bool,    UInt   )); ////false
    show(#ComparablePrimitiveTypes?(Bool,    Float64)); ////false
    show(#ComparablePrimitiveTypes?(Int,     Char   )); ////false
    show(#ComparablePrimitiveTypes?(Int,     Bool   )); ////false
    show(#ComparablePrimitiveTypes?(Int,     UInt   )); ////false
    show(#ComparablePrimitiveTypes?(Int,     Float64)); ////false
    show(#ComparablePrimitiveTypes?(UInt,    Char   )); ////false
    show(#ComparablePrimitiveTypes?(UInt,    Bool   )); ////false
    show(#ComparablePrimitiveTypes?(UInt,    Int    )); ////false
    show(#ComparablePrimitiveTypes?(UInt,    Float64)); ////false
    show(#ComparablePrimitiveTypes?(Float64, Char   )); ////false
    show(#ComparablePrimitiveTypes?(Float64, Bool   )); ////false
    show(#ComparablePrimitiveTypes?(Float64, Int    )); ////false
    show(#ComparablePrimitiveTypes?(Float64, UInt   )); ////false
    show(#ComparablePrimitiveTypes?(ContiguousCoordinate[Int], ContiguousCoordinate[UInt])); ////false
    show(#ComparablePrimitiveTypes?(Pointer[Int], Pointer[Int])); ////false
    show(#ComparablePrimitiveTypes?(OpaquePointer, OpaquePointer)); ////false

    // Equality comparable types
    show(#EqualityComparablePrimitiveTypes?(Int,     Int    )); ////true
    show(#EqualityComparablePrimitiveTypes?(UInt,    UInt   )); ////true
    show(#EqualityComparablePrimitiveTypes?(Float64, Float64)); ////true
    show(#EqualityComparablePrimitiveTypes?(Bool,    Bool   )); ////true
    show(#EqualityComparablePrimitiveTypes?(Char,    Char   )); ////true
    show(#EqualityComparablePrimitiveTypes?(ContiguousCoordinate[Int], ContiguousCoordinate[Int])); ////true
    show(#EqualityComparablePrimitiveTypes?(Pointer[Int], Pointer[Int])); ////true
    show(#EqualityComparablePrimitiveTypes?(OpaquePointer, OpaquePointer)); ////true
    // Non-equality-comparable types
    show(#EqualityComparablePrimitiveTypes?(Char,    Bool   )); ////false
    show(#EqualityComparablePrimitiveTypes?(Char,    Int    )); ////false
    show(#EqualityComparablePrimitiveTypes?(Char,    UInt   )); ////false
    show(#EqualityComparablePrimitiveTypes?(Char,    Float64)); ////false
    show(#EqualityComparablePrimitiveTypes?(Bool,    Char   )); ////false
    show(#EqualityComparablePrimitiveTypes?(Bool,    Int    )); ////false
    show(#EqualityComparablePrimitiveTypes?(Bool,    UInt   )); ////false
    show(#EqualityComparablePrimitiveTypes?(Bool,    Float64)); ////false
    show(#EqualityComparablePrimitiveTypes?(Int,     Char   )); ////false
    show(#EqualityComparablePrimitiveTypes?(Int,     Bool   )); ////false
    show(#EqualityComparablePrimitiveTypes?(Int,     UInt   )); ////false
    show(#EqualityComparablePrimitiveTypes?(Int,     Float64)); ////false
    show(#EqualityComparablePrimitiveTypes?(UInt,    Char   )); ////false
    show(#EqualityComparablePrimitiveTypes?(UInt,    Bool   )); ////false
    show(#EqualityComparablePrimitiveTypes?(UInt,    Int    )); ////false
    show(#EqualityComparablePrimitiveTypes?(UInt,    Float64)); ////false
    show(#EqualityComparablePrimitiveTypes?(Float64, Char   )); ////false
    show(#EqualityComparablePrimitiveTypes?(Float64, Bool   )); ////false
    show(#EqualityComparablePrimitiveTypes?(Float64, Int    )); ////false
    show(#EqualityComparablePrimitiveTypes?(Float64, UInt   )); ////false
    show(#EqualityComparablePrimitiveTypes?(ContiguousCoordinate[Int], ContiguousCoordinate[UInt])); ////false
    show(#EqualityComparablePrimitiveTypes?(Pointer[Int], Pointer[UInt])); ////false

    // Assignable types
    show(#AssignablePrimitiveTypes?(Int16 , Int8  )); ////true
    show(#AssignablePrimitiveTypes?(Int16 , Int16 )); ////true
    show(#AssignablePrimitiveTypes?(Int16 , Int   )); ////true
    show(#AssignablePrimitiveTypes?(UInt16, UInt8 )); ////true
    show(#AssignablePrimitiveTypes?(UInt16, UInt16)); ////true
    show(#AssignablePrimitiveTypes?(UInt16, UInt  )); ////true
    show(#AssignablePrimitiveTypes?(Float32, Float32)); ////true
    show(#AssignablePrimitiveTypes?(Float64, Float32)); ////true
    show(#AssignablePrimitiveTypes?(Float64, Float64)); ////true
    // Nonassignable types
    show(#AssignablePrimitiveTypes?(Int16,  Int32 )); ////false
    show(#AssignablePrimitiveTypes?(Int16,  UInt16)); ////false
    show(#AssignablePrimitiveTypes?(Int16,  UInt8 )); ////false
    show(#AssignablePrimitiveTypes?(Float32, Float64)); ////false

    // Bigger numeric type
    show(#biggerNumberType(Int8,  Int8 )); ////Int8
    show(#biggerNumberType(Int8,  Int32)); ////Int32
    show(#biggerNumberType(Int32, Int8 )); ////Int32
    show(#biggerNumberType(Int8,  Int  )); ////Int8
    show(#biggerNumberType(UInt8, UInt )); ////UInt8
    show(#biggerNumberType(Int,   Int8 )); ////Int8
    show(#biggerNumberType(UInt,  UInt8)); ////UInt8
    show(#biggerNumberType(Float32, Float64)); ////Float64
    show(#biggerNumberType(Float64, Float32)); ////Float64
    show(#biggerNumberType(Float64, Float32)); ////Float64
    show(#biggerNumberType(UInt, Int)); ////UInt
    show(#biggerNumberType(Int, UInt)); ////UInt
    show(#biggerNumberType(Int32, UInt32)); ////UInt32
    show(#biggerNumberType(UInt32, Int32)); ////UInt32
}

/*
    Static?
    Pointer?
    ArithmeticPointer?
    ExternalCodePointer?
    Array?
    Tuple?
    Union?
*/
