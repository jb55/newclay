import meta.lltypes.(llType, llTupleType);
import show.*;
import unsafe.coordinates.(ContiguousCoordinate);

define NonPODType;
overload #llType(NonPODType) = llTupleType[];

define NonType;

main() {
    show(#type?(Bool)); ////true
    show(#type?(Int)); ////true
    show(#type?(UInt)); ////true
    show(#type?(Int8)); ////true
    show(#type?(Int16)); ////true
    show(#type?(Int32)); ////true
    show(#type?(Int64)); ////true
    show(#type?(UInt8)); ////true
    show(#type?(UInt16)); ////true
    show(#type?(UInt32)); ////true
    show(#type?(UInt64)); ////true
    show(#type?(Float32)); ////true
    show(#type?(Float64)); ////true
    show(#type?(Char)); ////true
    show(#type?(StringConstant)); ////true
    show(#type?(Static[2])); ////true
    show(#type?(Static[NonType])); ////true
    show(#type?(Pointer[Int])); ////true
    show(#type?(OpaquePointer)); ////true
    show(#type?(ContiguousCoordinate[Int])); ////true
    show(#type?(ExternalCodePointer[CdeclABI, true, [], []])); ////true
    show(#type?(ExternalCodePointer[StdcallABI, false, [Int, Int], Int])); ////true
    show(#type?(Array[Int, 12])); ////true
    show(#type?(Tuple[Int, Int])); ////true
    show(#type?(Union[Int, Int])); ////true

    show(#type?(Pointer)); ////false
    show(#type?(Pointer[2])); ////false
    show(#type?(Pointer[NonType])); ////false
    show(#type?(ContiguousCoordinate)); ////false
    show(#type?(ContiguousCoordinate[2])); ////false
    show(#type?(ContiguousCoordinate[NonType])); ////false
    show(#type?(ExternalCodePointer)); ////false
    show(#type?(ExternalCodePointer[2, true, [], []])); ////false
    show(#type?(ExternalCodePointer[CdeclABI, 2, [], []])); ////false
    show(#type?(ExternalCodePointer[CdeclABI, true, 2, []])); ////false
    show(#type?(ExternalCodePointer[CdeclABI, true, [], 2])); ////false
    show(#type?(ExternalCodePointer[CdeclABI, true, [Int, NonType], Int])); ////false
    show(#type?(ExternalCodePointer[CdeclABI, true, [Int, Int], NonType])); ////false
    show(#type?(ExternalCodePointer[CdeclABI, true, [Int, NonPODType], Int])); ////false
    show(#type?(ExternalCodePointer[CdeclABI, true, [Int, Int], NonPODType])); ////false
    show(#type?(Array)); ////false
    show(#type?(Array[NonType, 12])); ////false
    show(#type?(Array[Int, false])); ////false
    show(#type?(Array[Int, -1])); ////false
    show(#type?(Tuple)); ////false
    show(#type?(Tuple[Int, Char, NonType])); ////false
    show(#type?(Union)); ////false
    show(#type?(Tuple[Int, Char, NonType])); ////false
}
