import show.*;
import unsafe.valuesemantics.(POD?, BitwiseZeroInitialized?);

main() {
    var x = [1, [true, 3.0], '4'];

    show(#type(-> x)); ////Tuple[Int, Tuple[Bool, Float64], Char]
    show(#BitwiseZeroInitialized?(type(-> x))); ////true

    show(x.0); ////1
    show(x.1.0); ////true
    show(x.1.1); ////3
    show(x.2); ////'4'

    x.2 = '5';

    show(x.0); ////1
    show(x.1.0); ////true
    show(x.1.1); ////3
    show(x.2); ////'5'

    x.1.0 = false;

    show(x.0); ////1
    show(x.1.0); ////false
    show(x.1.1); ////3
    show(x.2); ////'5'

    var y = Tuple[Int, Tuple[Bool, Float64], Char](1, [false, 3.0], '5');
    show(#type(-> y)); ////Tuple[Int, Tuple[Bool, Float64], Char]
    show(x == y); ////true

    var z = Tuple(1, [false, 3.0], '5');
    show(#type(-> z)); ////Tuple[Int, Tuple[Bool, Float64], Char]
    show(x == z); ////true


    var w = [2, [true, 4.0], '6'];

    show(x == w); ////false
    show(x < w); ////true

    x = w;

    show(x == w); ////true
    show(x < w); ////false

    show(x.0); ////2
    show(x.1.0); ////true
    show(x.1.1); ////4
    show(x.2); ////'6'

    var a = (#type(-> x))();

    show(a.0); ////0
    show(a.1.0); ////false
    show(a.1.1); ////0
    show(a.2); ////'\x00'

    var b = [1, true, '3'];
    ////1
    ////true
    ////'3'
    show(..*b);
}
