Unimplemented features:
- multiple-value global bindings
    var x, y, ...z = ...foo();
- global ref and const bindings
- multiple-value assignment
    x, y, ...z = ...foo();
  NB: multiple-value local variable binding and initialization DO work:
    var x, y, ...z = ...foo();
    x, y, ...z <-- ...foo();
- uninitialized local variable bindings
    var x;
    var y:T;
- runtime use of lambda expressions
- variadic aliases in pattern expressions
    Global aliases can be defined with variadic parameters, but they cannot
    yet be used in pattern matching expressions.

    symbol Bar[...'T];
    alias Foo[...'T] = Bar[0, ...'T];
    bas(x:Foo[...'T]) { ... } // <-- not yet supported

    However, non-variadic global aliases work:

    alias IntArray['n] = Array[Int, 'n];
    foo(x:IntArray[8]) { ... }

- alias arguments/call-by-name functions
- inline functions
    the "inline foo()" and "inline overload foo()" syntaxes are understood, but
    "inline" is currently ignored.
- binding expressions
    foo() = var x = 1, y = 2 in x + y;
- exception handling
    try {} catch () {} is a no-op: the "try" block is compiled as a simple
    block, and the catch blocks are simply ignored.
    "throw x" immediately calls abort().
- dispatch operator
- clay code pointers
    external (C abi) code pointers DO work:
      external foo(x:Int) Int;
      var p = foo;
- return by rvalue reference
- __asm__ and __llvm__ procedures
    foo() __asm__ """ret""";
  NB: __c__ procedures do work with C codegen
- external function definitions and .o/.so/.dll codegen
    external entry_point(foo:Int) { ... }
  NB: external declarations DO work:
    external puts(x:Pointer[CChar]);
    main() { puts(cstring("Hello world")); }
- StaticCallDefined? on compiler-implemented primitives

Known bugs:
- context in compiler error messages is often lacking or inaccurate
- dotted module imports can run over aliased module imports
    import a as b;
    import b.c; // should be an error since "b" is already an alias

Pending potential language changes:
- stricter handling of overload resolution order
    newclay currently resolves all overloads in reverse definition order, as the old Clay compiler
    does. This is bad, because it's easy for new overloads to accidentally shadow old overloads,
    and because it depends on module load order to determine resolution order between modules.
    We plan to experiment with and adopt an approach that disallows overload shadowing without
    specifying an explicit resolution order among overlapping overload definitions.
- storage attributes for globals, references, and pointers
    Storage attributes are necessary for representing memory model, address space, linkage, and
    other aspects of global or referenced data.

    The syntax will probably end up looking something like this:
        var(Immutable) x = 1;                   // global

        foo(ref(Immutable) x:Int) {             // ref argument
            ref(Immutable) r = x;               // ref binding
            var p:Pointer[Int, Immutable] = &x; // pointer type
        }
- polymorphic integer constants
    We plan to make untyped integer constants compatible with any context that expects a single
    definite integer type:
        var x:Int64 = 1;
        var x:Int8 = 1;

        foo(x:Int8) = x + 1;
        main() = foo(2);
    However, we need to specify how untyped integers behave in type-ambiguous cases, such as when
    binding to an untyped variable or when overloads are present for multiple integer types:
        var x = 1; // what type is x?

        foo(x:'I) | Integer?('I) = x + 1;
        main() = foo(2); // what type 'I does foo get called with?

