import meta.c.(cAssign);
import meta.lltypes.(llType);
import unsafe.casts.(llcast, rvalueToRef);
import values.(allValues?, dropValues, takeValues);


//
// value semantics predicates
//

#inheritableTypePredicate?('X) = false;
overload #inheritableTypePredicate?(POD?) = true;
overload #inheritableTypePredicate?(BitwiseCopied?) = true;
overload #inheritableTypePredicate?(BitwiseMoved?) = true;
overload #inheritableTypePredicate?(DestroyDoesNothing?) = true;
overload #inheritableTypePredicate?(ResetDoesNothing?) = true;
overload #inheritableTypePredicate?(InitializeDoesNotThrow?) = true;
overload #inheritableTypePredicate?(CopyDoesNotThrow?) = true;
overload #inheritableTypePredicate?(AssignDoesNotThrow?) = true;
overload #inheritableTypePredicate?(BitwiseAssigned?) = true;
overload #inheritableTypePredicate?(BitwiseMoveAssigned?) = true;

#inheritsPredicatesFromTypes('T) = false;
#PredicateInheritingType?('T)
    = type?('T) and takeValues(1, ..inheritsPredicatesFromTypes('T));
overload #'X?('T)
    | inheritableTypePredicate?('X?) and PredicateInheritingType?('T)
    = allValues?('X?, ..dropValues(1, ..inheritsPredicatesFromTypes('T)));

#POD?('T) | not PredicateInheritingType?('T) = false;
#BitwiseCopied?('T) | not PredicateInheritingType?('T) = POD?('T);
#BitwiseMoved?('T) | not PredicateInheritingType?('T) = true;
#DestroyDoesNothing?('T) | not PredicateInheritingType?('T) = POD?('T);
#ResetDoesNothing?('T) | not PredicateInheritingType?('T) = DestroyDoesNothing?('T);
#InitializeDoesNotThrow?('T) | not PredicateInheritingType?('T) = POD?('T);
#CopyDoesNotThrow?('T) | not PredicateInheritingType?('T) = POD?('T);
#AssignDoesNotThrow?('T) | not PredicateInheritingType?('T) = POD?('T);
#BitwiseAssigned?('T) | not PredicateInheritingType?('T)
    = BitwiseCopied?('T) and DestroyDoesNothing?('T);
#BitwiseMoveAssigned?('T) | not PredicateInheritingType?('T)
    = BitwiseMoved?('T) and DestroyDoesNothing?('T);

#BitwiseZeroInitialized?('T) = false;
overload #BitwiseZeroInitialized?(Bool) = true;
overload #BitwiseZeroInitialized?('T) | Number?('T) = true;
overload #BitwiseZeroInitialized?('T) | Char?('T) = true;

#DefaultInitializable?('T) = callDefined?('T);
#Copyable?('T) = callDefined?(copy, 'T);
#Movable?('T) = callDefined?(move, Ref['T]);
#Assignable?('T) = callDefined?(assign, Ref['T], 'T);
overload #Assignable?('T, 'U) = callDefined?(assign, Ref['T], 'U);
#MoveAssignable?('T) = callDefined?(assign, Ref['T], Rvalue['T]);


//
// value semantics protocol, and default implementations based on predicates
//

copy(a:'T) inline | BitwiseCopied?('T) = bitwiseCopy(a);

moveRvalue(ref a:'T) inline | BitwiseMoved?('T) = bitwiseCopy(a);

destroy(ref x:'T) | DestroyDoesNothing?('T) {}

reset(ref x:'T) inline
    | DefaultInitializable?('T) and InitializeDoesNotThrow?('T)
    { x <-- 'T(); }
overload reset(ref x:'T) inline | ResetDoesNothing?('T) {}

moveAssign(ref a:'T, rvalue b:'T) inline {
    destroy(a);
    a <-- move(b);
}
overload moveAssign(ref a:'T, rvalue b:'T) inline
    | BitwiseMoveAssigned?('T)
{
    a <-- move(b);
}

copyAssign(ref a:'T, b:'T) inline
    | defined?(-> { a <-- b; })
{
    var tmp = moveRvalue(a);
    try {
        a <-- b;
    } catch (ex) {
        a <-- move(tmp);
        throw ex;
    }
}
overload copyAssign(ref a:'T, b:'T) inline | BitwiseAssigned?('T) { a <-- b; }
overload copyAssign(ref a:'A, b:'B) inline | AssignablePrimitiveTypes?('A, 'B)
{
    cAssign(a, b);
}


//
// move, the user-facing interface to move semantics
// implemented in terms of moveRvalue and reset
//

define move;
overload move(ref a:'T) inline --> returned:'T
    { returned <-- moveRvalue(a); reset(a); }
overload move(rvalue a:'T) inline = moveRvalue(rvalueToRef(a));


//
// ways to break the object lifecycle, when you need them
//
// uninitialized -- return a new value with no constructor applied
// bitwiseCopy -- copy the bits of a value with
//

uninitialized(#'T) inline --> x:'T {}
bitwiseCopy(forward a:'T) inline --> returned:'T { cAssign(returned, a); }


//
// Unmanaged -- value container with POD value semantics, regardless of the contained
// type's own value semantics
//

define Unmanaged['T];
overload #POD?(Unmanaged['T]) = true;
overload #llType(Unmanaged['T])
    | type?('T)
    = llType('T);

overload Unmanaged['T](forward ..args) inline --> returned:Unmanaged['T]
    | defined?(-> 'T(..args))
{
    *returned <-- 'T(..args);
}
overload Unmanaged(forward x:'T) inline --> returned:Unmanaged['T] {
    *returned <-- x;
}
overload unpack(forward x:Unmanaged['T]) = forward llcast('T, x);


//
// top-secret value semantics operations you should rarely override directly
// initializeFrom -- "a <-- b;"
//   overload copy (and move) instead
// assign -- "a = b;"
//   overload copyAssign (and moveAssign) instead
//

private define initializeFrom;
overload initializeFrom(ref a:'T, b:'T) inline
    | callDefined?(copy, 'T)
    { a <-- copy(b); }
overload initializeFrom(ref a:'T, rvalue b:'T) inline
    | callDefined?(move, Rvalue['T])
    { a <-- move(b); }

private define assign;
overload assign(ref a:'T, b:'U) inline | defined?(-> { copyAssign(a, b); }) {
    copyAssign(a, b);
}
overload assign(ref a:'T, rvalue b:'T) inline | defined?(-> { moveAssign(a, b); }) {
    moveAssign(a, b);
}

