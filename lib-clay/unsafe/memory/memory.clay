import libc.(malloc, free, realloc);
import unsafe.coordinates.(ContiguousCoordinate, CoordinateRange, destroyRange);
import unsafe.valuesemantics.(destroy);

requiredMalloc(count) = required(malloc(count));

requiredRealloc(ptr, count) = required(realloc(ptr, count));

// XXX alignment

allocateUninitializedValues(count:'I, #'T) | type?('T) and Integer?('I)
    = ContiguousCoordinate['T](requiredMalloc(typeSize('T) * UInt(count)));

allocateUninitializedValue(#'T) | type?('T)
    = Pointer['T](requiredMalloc(typeSize('T)));

reallocateUninitializedValues(count:'I, values:ContiguousCoordinate['T])
    | type?('T) and Integer?('I)
    = ContiguousCoordinate['T](
        requiredRealloc(OpaquePointer(values), typeSize('T) * UInt(count))
    );

freeUninitializedValues(values:ContiguousCoordinate['T]) { free(OpaquePointer(values)); }
freeUninitializedValue(value:Pointer['T]) { free(OpaquePointer(value)); }


//
// manually-managed value allocation
//

allocateValue(f, forward ..args)
    | defined?(-> f(..args))
{
    var ptr = allocateUninitializedValue(#type(-> f(..args)));

    try {
        ptr^ <-- f(..args);
    } catch (ex) {
        freeUninitializedValue(ptr);
        throw ex;
    }
    return ptr;
}

freeValue(ptr:Pointer['T]) {
    destroy(ptr^);
    freeUninitializedValue(ptr);
}

allocateArray(count:'I, f, ..args)
    | defined?(-> f(..args))
{
    var begin = allocateUninitializedValues(count, #type(-> f(..args)));
    var end = begin + count;
    var i = begin;

    try {
        while (i < end) {
            i^ <-- f(..args);
            inc(i);
        }
    } catch (ex) {
        destroyRange(begin, i);
        freeUninitializedValues(begin);
        throw ex;
    }
    return CoordinateRange(begin, end);
}

freeArray(array:CoordinateRange[ContiguousCoordinate['T]]) {
    destroyRange(array.begin, array.end);
    freeUninitializedValues(array.begin);
}
