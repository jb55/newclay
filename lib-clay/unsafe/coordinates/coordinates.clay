import meta.lltypes.(llType, llPointerType);
import meta.c.*;
import unsafe.casts.(pointerCast);
import unsafe.valuesemantics.*;


//
// coordinate sequence protocol functions
//

define begin;
define end;


//
// ContiguousCoordinate
//

define ContiguousCoordinate['T];

overload #POD?(ContiguousCoordinate['T]) = true;
overload #BitwiseZeroInitialized?(ContiguousCoordinate['T]) = true;

overload #pointerReferencedType(ContiguousCoordinate['T]) = 'T;

overload #llType(ContiguousCoordinate['T])
    = llPointerType['T];
overload #recursiveTypes(ContiguousCoordinate['T]) = 'T;

overload ContiguousCoordinate['T]() inline
    = pointerCast(ContiguousCoordinate['T], 0);

overload ContiguousCoordinate(forward x:'T) inline
    | DereferenceablePointer?('T)
    = ContiguousCoordinate[pointerReferencedType('T)](x);

overload #Reliable?(ContiguousCoordinate['T]) = true;


//
// ContiguousCoordinate arithmetic
//

overload add(a:ContiguousCoordinate['A], b:'B) inline
    | Integer?('B)
    = cAdd(ContiguousCoordinate['A], a, b);

overload add(a:'A, b:ContiguousCoordinate['B]) inline
    | Integer?('A)
    = cAdd(ContiguousCoordinate['B], b, a);

overload subtract(a:ContiguousCoordinate['A], b:'B) inline
    | Integer?('B)
    = cSubtract(ContiguousCoordinate['A], a, b);

overload subtract(a:ContiguousCoordinate['A], b:ContiguousCoordinate['A]) inline
    = cSubtract(Int, a, b);


//
// coordinate type predicates
//

#Coordinate?('C, ..'T) = Coordinate?('C) and [..coordinateValueType('C)] == [..'T];
overload #Coordinate?('C) = Regular?('C)
    and callDefined?(dereference, 'C)
    and callDefined?(inc, Ref['C]);
#coordinateValueType('C) = ..type((c:'C) -> ..dereference(c));

#CoordinateSequence?('S) = callDefined?(begin, 'S) and callDefined?(end, 'S);
#sequenceCoordinateType('S) | CoordinateSequence?('S) = type((s:'S) -> begin(s));

#ContiguousCoordinate?('X) = false;
overload #ContiguousCoordinate?(ContiguousCoordinate['T]) = true;

#ContiguousSequence?('S) =
    CoordinateSequence?('S)
    and ContiguousCoordinate?(sequenceCoordinateType('S));

#BidirectionalCoordinate?('C) = callDefined?(dereference, 'C)
    and callDefined?(dec, Ref['C]);

#RandomAccessCoordinate?('C) = BidirectionalCoordinate?('C)
    and callDefined?(add, 'C, Int)
    and callDefined?(subtract, 'C, Int)
    and callDefined?(subtract, 'C, 'C);


//
// CoordinateRange
//

define CoordinateRange['C] as RecordType(begin:'C, end:'C);
overload CoordinateRange(begin:'C, end:'C) inline
    | Coordinate?('C)
    = CoordinateRange['C](begin, end);

overload begin(i:CoordinateRange['C]) inline = i.begin;
overload end(i:CoordinateRange['C]) inline = i.end;

overload hasFront?(i:CoordinateRange['C]) inline = i.begin < i.end;
overload front(i:CoordinateRange['C]) inline {
    assert(-> i.begin < i.end, "accessing front() of invalid ", CoordinateRange['C]);
    return forward ..i.begin^;
}
overload incFront(ref i:CoordinateRange['C]) inline { inc(i.begin); }

overload back(i:CoordinateRange['C]) inline
    | BidirectionalCoordinate?('C)
{
    assert(-> i.begin < i.end, "accessing back() of invalid ", CoordinateRange['C]);
    return forward ..(var preend = i.end; dec(preend); preend)^;
}
overload incBack(ref i:CoordinateRange['C]) inline
    | BidirectionalCoordinate?('C)
    { dec(i.end); }

overload seekFront(ref i:CoordinateRange['C], distance:'I) inline
    | RandomAccessCoordinate?('C)
    { i.begin += Int(distance); }
overload seekBack(ref i:CoordinateRange['C], distance:'I) inline
    | RandomAccessCoordinate?('C)
    { i.end -= Int(distance); }

overload #Savable?(CoordinateRange['C]) = true;
overload #Reliable?(CoordinateRange['C]) = Reliable?('C);


//
// sequence operations for coordinate sequences
//

overload iterator(x:'S) | CoordinateSequence?('S)
    = CoordinateRange(begin(x), end(x));

overload size(x:'S) | CoordinateSequence?('S) and defined?(-> end(x) - begin(x))
    = UInt(end(x) - begin(x));

overload index(x:'S, n:'I)
    | CoordinateSequence?('S) and Integer?('n) and defined?(-> begin(x) + n)
{
    assert(-> n >= 'I(0) and UInt(n) < size(x), 'S, " index out of range");
    return forward ..dereference(begin(x) + n);
}

overload front(x:'S) | CoordinateSequence?('S) {
    assert(-> size(x) > 0u, "accessing front() of empty ", 'S);
    return forward ..dereference(begin(x));
}
overload back(x:'S) | CoordinateSequence?('S) {
    assert(-> size(x) > 0u, "accessing back() of empty ", 'S);
    var c = end(x);
    dec(c);
    return forward ..c^;
}


//
// apply a function to each value in a coordinate range or paired coordinate ranges
//

#compatibleCoordinateTypes?('C, 'D)
    = Coordinate?('C) and Coordinate?('D)
      and coordinateValueType('C) == coordinateValueType('D);

eachInRange(begin:'C, end:'C, fn) | Coordinate?('C) {
    var i = begin;
    while (i < end) {
        fn(i^);
        inc(i);
    }
}

eachInRangeBackwards(begin:'C, end:'C, fn) | Coordinate?('C) {
    var i = end;
    while (begin < i) {
        dec(i);
        fn(i^);
    }
}

eachInRangeWithCleanup(begin:'C, end:'C, fn) | Coordinate?('C) {
    var i = begin;
    try {
        while (i < end) {
            fn(i^);
            inc(i);
        }
    } catch (ex) {
        destroyRange(begin, i);
        throw ex;
    }
}

eachInRangeBackwardsWithCleanup(begin:'C, end:'C, fn) | Coordinate?('C) {
    var i = end;
    try {
        while (begin < i) {
            dec(i);
            fn(i^);
        }
    } catch (ex) {
        inc(i);
        destroyRange(i, end);
        throw ex;
    }
}

eachInRanges(begin1:'C, begin2:'D, end2:'D, fn) | compatibleCoordinateTypes?('C, 'D) {
    var i1 = begin1;
    var i2 = begin2;
    while (i2 < end2) {
        fn(i1^, i2^);
        inc(i1);
        inc(i2);
    }
}

eachInRangesBackwards(begin1:'C, begin2:'D, end2:'D, fn) | compatibleCoordinateTypes?('C, 'D) {
    var end1 = begin1 + (end2 - begin2);
    var i1 = end1;
    var i2 = end2;
    while (begin2 < i2) {
        dec(i1);
        dec(i2);
        fn(i1^, i2^);
    }
}

eachInRangesWithCleanup(begin1:'C, begin2:'D, end2:'D, fn) | compatibleCoordinateTypes?('C, 'D) {
    var i1 = begin1;
    var i2 = begin2;
    try {
        while (i2 < end2) {
            fn(i1^, i2^);
            inc(i1);
            inc(i2);
        }
    } catch (ex) {
        destroyRange(begin1, i1);
    }
}

eachInRangesBackwardsWithCleanup(begin1:'C, begin2:'D, end2:'D, fn)
    | compatibleCoordinateTypes?('C, 'D)
{
    var end1 = begin1 + (end2 - begin2);
    var i1 = end1;
    var i2 = end2;
    try {
        while (begin2 < i2) {
            dec(i1);
            dec(i2);
            fn(i1^, i2^);
        }
    } catch (ex) {
        inc(i1);
        destroyRange(i1, end1);
    }
}


//
// apply value semantics operations over ranges of coordinates
// XXX POD optimizations to use memcpy/memmove when possible
//

private initializeTo(ref x:'X) inline { x <-- 'X(); }
private copyTo(ref x, y) inline { x <-- y; }
private moveRvalueTo(ref x, ref y) inline { x <-- moveRvalue(y); }

initializeRange(begin:'C, end:'C) inline | Coordinate?('C) {
    eachInRangeWithCleanup(begin, end, initializeTo);
}

destroyRange(begin:'C, end:'C) inline | Coordinate?('C) {
    eachInRange(begin, end, destroy);
}

copyRange(destBegin:'C, srcBegin:'D, srcEnd:'D) inline
    | compatibleCoordinateTypes?('C, 'D)
{
    eachInRangesWithCleanup(destBegin, srcBegin, srcEnd, copyTo);
}

private moveRvalueRangeForwards(destBegin:'C, srcBegin:'D, srcEnd:'D) inline
    | compatibleCoordinateTypes?('C, 'D)
{
    eachInRanges(destBegin, srcBegin, srcEnd, moveRvalueTo);
}

private moveRvalueRangeBackwards(destBegin:'C, srcBegin:'D, srcEnd:'D) inline
    | compatibleCoordinateTypes?('C, 'D)
{
    eachInRangesBackwards(destBegin, srcBegin, srcEnd, moveRvalueTo);
}

moveRvalueRange(destBegin:'C, srcBegin:'D, srcEnd:'D) inline
    | compatibleCoordinateTypes?('C, 'D) and 'C != 'D
{
    moveRvalueRangeForwards(destBegin, srcBegin, srcEnd);
}

overload moveRvalueRange(destBegin:'C, srcBegin:'C, srcEnd:'C) inline
    | Coordinate?('C)
{
    if (destBegin <= srcBegin)
        moveRvalueRangeForwards(destBegin, srcBegin, srcEnd);
    else
        moveRvalueRangeBackwards(destBegin, srcBegin, srcEnd);
}

moveRvalueNonoverlappingRange(destBegin:'C, srcBegin:'D, srcEnd:'D) inline
    | compatibleCoordinateTypes?('C, 'D)
{
    moveRvalueRangeForwards(destBegin, srcBegin, srcEnd);
}

resetRange(begin:'C, end:'C) inline | Coordinate?('C) {
    eachInRange(begin, end, reset);
}

assignRange(destBegin:'C, srcBegin:'D, srcEnd:'D) inline
    | compatibleCoordinateTypes?('C, 'D)
{
    eachInRanges(destBegin, srcBegin, srcEnd, copyAssign);
}
