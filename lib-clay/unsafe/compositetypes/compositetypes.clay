import libc.(memset);
import meta.symbols.(symbolWithTag?);
import unsafe.casts.(rvalueToRef, refToRvalue);
import unsafe.valuesemantics.*;
import values.*;


//
// CompositeType definer
//

#CompositeType(..'fields) | validFields?(..'fields) = [CompositeType, ..'fields];

#CompositeType?('T) = symbolWithTag?('T, CompositeType)
    or symbolWithTag?('T, RecordType);


//
// default record-style value semantics
//

define unpackFields;
// permanent values
overload unpackFields(forward x, #'field, ..#'fields) inline
    = forward x[#'field], forward ..unpackFields(x, ..#'fields);
overload unpackFields(forward x) inline
    = ;
// rvalues
overload unpackFields(rvalue x, #'field, ..#'fields) inline {
    ref refx = rvalueToRef(x);
    return rvalue refToRvalue(refx[#'field]),
           rvalue ..unpackFields(refToRvalue(refx), ..#'fields);
}
overload unpackFields(rvalue x) inline {
    // prevent destruction of x; it should have been entirely picked apart
    rvalueToRef(x);
}

unpackRecord(forward x:'T) inline | CompositeType?('T)
    = forward ..unpackFields(x, ..#fieldNames('T));

define initializeRecord;
overload initializeRecord(#'T) inline --> returned:'T
    | CompositeType?('T) and allValues?(DefaultInitializable?, ..fieldTypes('T))
{
    ..unpackRecord(returned) <-- ..mapValues(call, ..fieldTypes('T));
}

overload initializeRecord(#'T) inline --> returned:'T
    | CompositeType?('T) and allValues?(BitwiseZeroInitialized?, ..fieldTypes('T))
{
    memset(OpaquePointer(&returned), 0_i32, typeSize('T));
}

overload initializeRecord(#'T, forward ..fields:'F) inline --> returned:'T
    | CompositeType?('T) and [..'F] == [..fieldTypes('T)]
{
    ..unpackRecord(returned) <-- ..fields;
}

define destroyRecord;
overload destroyRecord(ref x:'T) inline
    | CompositeType?('T) and allValues?(DestroyDoesNothing?, ..fieldTypes('T))
{ }
overload destroyRecord(ref x:'T) inline
    | CompositeType?('T) and not allValues?(DestroyDoesNothing?, ..fieldTypes('T))
{
    static for (ref f in ..unpackRecord(x))
        destroy(f);
}

define resetRecord;
overload resetRecord(ref x:'T) inline
    | CompositeType?('T) and allValues?(ResetDoesNothing?, ..fieldTypes('T))
{ }
overload resetRecord(ref x:'T) inline
    | CompositeType?('T) and not allValues?(ResetDoesNothing?, ..fieldTypes('T))
{
    static for (ref f in ..unpackRecord(x))
        reset(f);
}

define moveRvalueRecord;
overload moveRvalueRecord(ref x:'T) inline
    | CompositeType?('T) and allValues?(BitwiseMoved?, ..fieldTypes('T))
    = bitwiseCopy(x);
overload moveRvalueRecord(ref x:'T) inline
    | CompositeType?('T)
      and not allValues?(BitwiseMoved?, ..fieldTypes('T))
      and allValues?(Movable?, ..fieldTypes('T))
    = initializeRecord('T, ..mapValues(moveRvalue, ..unpackRecord(x)));

define copyRecord;
overload copyRecord(x:'T) inline
    | CompositeType?('T) and allValues?(BitwiseCopied?, ..fieldTypes('T))
    = bitwiseCopy(x);
overload copyRecord(x:'T) inline
    | CompositeType?('T)
      and not allValues?(BitwiseCopied?, ..fieldTypes('T))
      and allValues?(Copyable?, ..fieldTypes('T))
    = initializeRecord('T, ..mapValues(copy, ..unpack(x)));

define copyAssignRecord;
overload copyAssignRecord(ref to:'T, from:'T) inline
    | CompositeType?('T)
      and not allValues?(BitwiseAssigned?, ..fieldTypes('T))
      and allValues?(Assignable?, ..fieldTypes('T))
{
    static for (#'field in ..#fieldNames('T))
        to[#'field] = from[#'field];
}
overload copyAssignRecord(ref to:'T, from:'T) inline
    | CompositeType?('T)
      and allValues?(BitwiseAssigned?, ..fieldTypes('T))
{
    to <-- from;
}

equalRecords?(a:'T, b:'T) inline | CompositeType?('T)
{
    static for (#'field in ..#fieldNames('T))
        if (a[#'field] != b[#'field])
            return false;
    return true;
}

