import meta.c.*;
import meta.lltypes.(llType);


//
// llcast -- cast between types that share a llType representation
//

llcast(#'A, forward b:'B)
    | llType('A) == llType('B)
    = forward cRefCast('A, b);


//
// bitcast -- bitwise-copy a value into a value of another type
//

bitcast(#'A, forward b:'B) {
    var tmp = Union['A, 'B](b);
    return tmp.0;
}


//
// pointer casts
//

#PointerCastable?('P) = Pointer?('P) or 'P == Int or 'P == UInt;

pointerCast(#'P1, forward p:'P2)
    | PointerCastable?('P1) and PointerCastable?('P2)
    = cCast('P1, p);


//
// inappropriate reference kind casts
//

refToRvalue(ref x:'T) inline --> rvalue r:'T
    __c__ """$r = &$x;""";
rvalueToRef(rvalue x:'T) inline --> ref r:'T
    __c__ """$r = &$x;""";
constToRef(const x:'T) inline --> ref r:'T
    __c__ """$r = &$x;""";

