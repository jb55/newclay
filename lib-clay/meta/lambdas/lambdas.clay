public import __primitives__.(
    staticLambda?,
    lambdaSymbol?,
);

import __primitives__;
import meta.symbols.*;
import values.*;

private #LambdaProperty('p) = [LambdaProperty, 'p];
private #LambdaProperty?('f) = symbolWithTag?('f, LambdaProperty);
private #LambdaPropertyPrimitive('f) = symbolTagBody('f, LambdaProperty);

overload #'f('L) | LambdaProperty?('f) and (staticLambda?('L) or lambdaSymbol?('L))
    = ..LambdaPropertyPrimitive('f)('L);
overload #'f(Lambda['L, 'C]) | LambdaProperty?('f) and lambdaSymbol?('L)
    = ..LambdaPropertyPrimitive('f)('L);

overload 'f(#'L) | LambdaProperty?('f) and staticDefined?(-> ..'f('L))
    = forward ..mapValues(unpack, ..#'f('L));
overload 'f(x:Lambda['L, 'C]) | LambdaProperty?('f) and lambdaSymbol?('L)
    = forward ..mapValues(unpack, ..#'f('L));

define lambdaString as LambdaProperty(__primitives__.lambdaString);
define lambdaLocation as LambdaProperty(__primitives__.lambdaLocation);
define lambdaCapturesByValue? as LambdaProperty(__primitives__.lambdaCapturesByValue?);
define lambdaCapturesByReference? as LambdaProperty(__primitives__.lambdaCapturesByReference?);
define lambdaStateless? as LambdaProperty(__primitives__.lambdaStateless?);

