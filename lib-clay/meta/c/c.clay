import meta.statics.(staticString?);

// TODO
// A lot of this is more tightly coupled with the C codegen implementation than it ought to be.

// Array types are codegenned as a struct to avoid array decay. The array is in
// a field named "array"
cIndex(#'T, const array, index) inline --> const returned:'T
    __c__ """$returned = &$array.array[$index];""";
overload cIndex(#'T, rvalue array, index) inline --> rvalue returned:'T
    __c__ """$returned = &$array.array[$index];""";
overload cIndex(#'T, ref array, index) inline --> ref returned:'T
    __c__ """$returned = &$array.array[$index];""";

cFieldRef(#'T, const aggregate, #'field) inline --> const returned:'T
    | staticString?('field)
    __c__ """$returned = &$aggregate.$'field;""";
overload cFieldRef(#'T, rvalue aggregate, #'field) inline --> rvalue returned:'T
    | staticString?('field)
    __c__ """$returned = &$aggregate.$'field;""";
overload cFieldRef(#'T, ref aggregate, #'field) inline --> ref returned:'T
    | staticString?('field)
    __c__ """$returned = &$aggregate.$'field;""";

cDereference(#'T, ptr) inline --> ref returned:'T
    __c__ """$returned = $ptr;""";


cMinus(#'T, a) inline --> returned:'T
    __c__ """$returned = -$a;""";

cBitnot(#'T, a) inline --> returned:'T
    __c__ """$returned = ~$a;""";

cMultiply(#'T, a, b) inline --> returned:'T
    __c__ """$returned = $a * $b;""";

cDivide(#'T, a, b) inline --> returned:'T
    __c__ """$returned = $a / $b;""";

cRemainder(#'T, a, b) inline --> returned:'T
    __c__ """$returned = $a % $b;""";

cAdd(#'T, a, b) inline --> returned:'T
    __c__ """$returned = $a + $b;""";

cSubtract(#'T, a, b) inline --> returned:'T
    __c__ """$returned = $a - $b;""";

cBitand(#'T, a, b) inline --> returned:'T
    __c__ """$returned = $a & $b;""";

cBitor(#'T, a, b) inline --> returned:'T
    __c__ """$returned = $a | $b;""";

cBitxor(#'T, a, b) inline --> returned:'T
    __c__ """$returned = $a ^ $b;""";

cBitshl(#'T, a, b) inline --> returned:'T
    __c__ """$returned = $a << $b;""";

cBitshr(#'T, a, b) inline --> returned:'T
    __c__ """$returned = $a >> $b;""";


cLesser?(a, b) inline --> returned:Bool
    __c__ """$returned = $a < $b;""";

cLesserEquals?(a, b) inline --> returned:Bool
    __c__ """$returned = $a <= $b;""";

cGreater?(a, b) inline --> returned:Bool
    __c__ """$returned = $a > $b;""";

cGreaterEquals?(a, b) inline --> returned:Bool
    __c__ """$returned = $a >= $b;""";

cEquals?(a, b) inline --> returned:Bool
    __c__ """$returned = $a == $b;""";

cNotEquals?(a, b) inline --> returned:Bool
    __c__ """$returned = $a != $b;""";

cAssign(ref a, forward b) inline
    __c__ """$a = $b;""";

cExternalCall(callable:ExternalCodePointer['A,'V,'I,['O]], ..args) inline --> returned:'O
    | type?('O)
    __c__ """$returned = $callable($..args);""";
overload cExternalCall(callable:ExternalCodePointer['A,'V,'I,[]], ..args) inline
    __c__ """$callable($..args);""";

cCast(#'T, a) inline --> returned:'T
    __c__ """$returned = ($'T)$a;""";

cRefCast(#'T, const a) inline --> const returned:'T
    __c__ """$returned = &$a;""";
overload cRefCast(#'T, ref a) inline --> ref returned:'T
    __c__ """$returned = &$a;""";
overload cRefCast(#'T, rvalue a) inline --> rvalue returned:'T
    __c__ """$returned = &$a;""";
