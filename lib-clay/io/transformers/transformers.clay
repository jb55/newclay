import sequences.(captureSequence);
import values.*;
import unsafe.coordinates.(
    Coordinate?,
    RandomAccessCoordinate?,
    CoordinateRange,
    CoordinateSequence?,
    sequenceCoordinateType,
    begin,
    end
);
import unsafe.valuesemantics.(destroy);


//
// reversed
//

define Reversed['I] as NewType('I);
private initializeReversed(forward seq:'S) = Reversed['S](seq);

overload Reversed(forward seq:'S) inline | ReversibleSequence?('S)
    = initializeReversed(captureSequence(seq));

overload iterator(x:Reversed['S]) inline | Sequence?('S) and not Iterator?('S)
    = Reversed(iterator(*x));

overload hasFront?(x:Reversed['I]) inline | ReversibleIterator?('I)
    = hasBack?(*x);
overload front(x:Reversed['I]) inline | ReversibleIterator?('I)
    = forward ..back(*x);
overload incFront(ref x:Reversed['I]) inline | ReversibleIterator?('I)
    { incBack(*x); }

overload back(x:Reversed['I]) inline | ReversibleIterator?('I)
    = forward ..front(*x);
overload incBack(ref x:Reversed['I]) inline | ReversibleIterator?('I)
    { incFront(*x); }

overload seekFront(ref x:Reversed['I], distance) inline
    | ReversibleIterator?('I) and BackSeekableIterator?('I)
    { seekBack(*x, distance); }
overload seekBack(ref x:Reversed['I], distance) inline
    | ReversibleIterator?('I) and SeekableIterator?('I)
    { seekFront(*x, distance); }

overload index(ref x:Reversed['I], distance) inline
    | ReversibleIterator?('I) and IndexableIterator?('I)
    = forward ..index(*x, size(*x) - 1 - distance);

overload size(x:Reversed['I]) inline
    | SizedIterator?('I)
    = size(*x);

overload #Savable?(Reversed['I]) = Savable?('I);
overload #Reliable?(Reversed['I]) = Reliable?('I);


//
// zipped
//

define Zipped[..'I] as NewType(Tuple[..'I]);

private initializeZipped(forward ..seqs:'SS) inline = Zipped[..'SS]([..seqs]);

overload Zipped(forward ..seqs:'SS) inline | allValues?(Sequence?, ..'SS)
    = initializeZipped(..mapValues(captureSequence, ..seqs));

overload iterator(s:Zipped[..'S]) inline
    | allValues?(Sequence?, ..'S) and not allValues?(Iterator?, ..'S)
    = Zipped(..mapValues(iterator, ..**s));

// XXX zipped sources
// XXX zipped sinks

overload hasFront?(s:Zipped[..'S]) inline
    | allValues?(Iterator?, ..'S)
    = allValues?(hasFront?, ..**s);
overload front(s:Zipped[..'S]) inline
    | allValues?(Iterator?, ..'S)
    = forward ..mapValues(front, ..**s);
overload incFront(ref s:Zipped[..'S]) inline
    | allValues?(Iterator?, ..'S)
    { mapValues(incFront, ..**s); }

overload back(s:Zipped[..'S]) inline
    | allValues?(ReversibleIterator?, ..'S)
    = forward ..mapValues(back, ..**s);
overload incBack(ref s:Zipped[..'S]) inline
    | allValues?(ReversibleIterator?, ..'S)
    { mapValues(incBack, ..**s); }

overload size(s:Zipped[..'S]) inline
    | allValues?(SizedIterator?, ..'S)
    = min(..mapValues(size, ..**s));

overload index(s:Zipped[..'S], index) inline
    | allValues?(IndexableIterator?, ..'S)
    = forward ..mapValues((iter) -> iter[index], ..**s);

overload seekFront(ref s:Zipped[..'S], distance) inline
    | allValues?(SeekableIterator?, ..'S)
    { mapValues((ref iter) -> { seekFront(iter, distance); }, ..**s); }
overload seekBack(ref s:Zipped[..'S], distance) inline
    | allValues?(BackSeekableIterator?, ..'S)
    { mapValues((ref iter) -> { seekBack(iter, distance); }, ..**s); }

overload #Savable?(Zipped[..'S]) = allValues?(Savable?, ..'S);
overload #Reliable?(Zipped[..'S]) = allValues?(Reliable?, ..'S);

Enumerated(forward ..seqs:'S) inline | allValues?(Sequence?, ..'S)
    = Zipped(Range(UInt(0), UInt(-1)), ..seqs);


//
// mapped
//

define Mapped['F, 'S] as RecordType(mapf:'F, underlying:'S);

private initializeMapped(forward mapf:'F, forward underlying:'S) inline
    = Mapped['F, 'S](mapf, underlying);

overload Mapped(forward mapf:'F, forward seq:'S) inline | Sequence?('S)
    = initializeMapped(mapf, captureSequence(seq));

overload iterator(s:Mapped['F, 'S]) inline | Sequence?('S) and not Iterator?('S)
    = Mapped(s.mapf, iterator(s.underlying));

overload read1(i:Mapped['F,'I]) inline | Source?('I)
    = forward maybe(read1(i.underlying), (forward ..x) -> just(..i.mapf(..x)));

overload hasFront?(i:Mapped['F,'I]) inline | Iterator?('I)
    = hasFront?(i.underlying);
overload front(i:Mapped['F,'I]) inline | Iterator?('I)
    = forward ..i.mapf(..front(i.underlying));
overload incFront(ref i:Mapped['F,'I]) inline | Iterator?('I)
    { incFront(i.underlying); }

overload back(i:Mapped['F,'I]) inline
    | ReversibleIterator?('I)
    = forward ..i.mapf(..back(i.underlying));
overload incBack(ref i:Mapped['F,'I]) inline
    | ReversibleIterator?('I)
    { incBack(i.underlying); }

overload size(i:Mapped['F, 'I]) inline
    | SizedIterator?('I)
    = size(i.underlying);

overload index(i:Mapped['F, 'I], index:'N) inline
    | IndexableIterator?('I) and Integer?('N)
    = forward ..i.mapf(i.underlying[index]);

overload seekFront(ref i:Mapped['F, 'I], distance) inline
    | SeekableIterator?('I)
    { seekFront(i.underlying, distance); }
overload seekBack(ref i:Mapped['F, 'I], distance) inline
    | BackSeekableIterator?('I)
    { seekFront(i.underlying, distance); }

overload #Savable?(Mapped['F, 'I]) = Savable?('I);
// XXX determine whether calling 'F can throw and set Reliable? appropriately
overload #Reliable?(Mapped['F, 'I]) = Reliable?('I);


//
// filtered
//

define Filtered['F, 'I] as RecordType(
    filterf:'F,
    underlying:'I,
);

private initializeFiltered(forward filterf:'F, forward underlying:'S) inline
    = Filtered['F, 'S](filterf, underlying);

overload Filtered(forward filterf:'F, forward seq:'S) inline
    | Sequence?('S) and not Iterator?('S)
    = initializeFiltered(filterf, captureSequence(seq));
overload Filtered(forward filterf:'F, forward iter:'I) inline
    | Iterator?('I)
{
    var iter2 = iter;
    while (hasFront?(iter2) and not filterf(front(iter2)))
        incFront(iter2);
    return Filtered['F, 'I](filterf, move(iter2));
}

overload iterator(s:Filtered['F, 'S]) inline | Sequence?('S) and not Iterator?('S)
    = Filtered(s.filterf, iterator(s.underlying));

overload hasFront?(i:Filtered['F, 'I]) inline | Iterator?('I) = hasFront?(i.underlying);
overload front(i:Filtered['F, 'I]) inline | Iterator?('I) = forward front(i.underlying);
overload incFront(ref i:Filtered['F, 'I]) inline | Iterator?('I) {
    incFront(i.underlying);
    while (hasFront?(i.underlying) and not i.filterf(front(i.underlying)))
        incFront(i.underlying);
}

overload #Savable?(Filtered['F, 'I]) = Savable?('I);
// XXX determine whether calling 'F can throw and set Reliable? appropriately
overload #Reliable?(Filtered['F, 'I]) = Reliable?('I);


//
// slicedFrom
//

define SlicedFrom['S] as RecordType(seq:'S, from:UInt);

private initializeSlicedFrom(forward seq:'S, from:UInt) inline
    | Sequence?('S) and not Source?('S) and not Iterator?('S)
    = SlicedFrom['S](seq, from);

overload initializeSlicedFrom(forward src:'S, from:UInt) inline
    | Source?('S)
{
    var src2 = src;
    var i = 0u;
    while (i < from) {
        if (nothing?(read1(src2)))
            break;
        inc(i);
    }
    return move(src2);
}

overload initializeSlicedFrom(forward iter:'I, from:UInt) inline
    | Iterator?('I)
{
    var iter2 = iter;
    var i = 0u;
    while (i < from and hasFront?(iter2)) {
        incFront(iter2);
        inc(i);
    }
    return move(iter2);
}

overload initializeSlicedFrom(forward iter:'I, from:UInt) inline
    | SeekableIterator?('I)
{
    var iter2 = iter;
    seekFront(iter2, min(size(iter2), from));
    return move(iter2);
}

overload initializeSlicedFrom(forward slice:SlicedFrom['S], from:UInt) inline {
    forward seq, oldFrom = ..*slice;
    return SlicedFrom['S](seq, oldFrom + from);
}

overload SlicedFrom(forward seq:'S, from:'I) inline | Sequence?('S) and Integer?('I)
    = initializeSlicedFrom(captureSequence(seq), UInt(from));

overload source(seq:SlicedFrom['S]) | SourceSequence?('S)
    = SlicedFrom(source(seq.seq), seq.from);
overload iterator(seq:SlicedFrom['S]) | Sequence?('S) and not SourceSequence?('S)
    = SlicedFrom(iterator(seq.seq), seq.from);

overload size(seq:SlicedFrom['S]) | SizedSequence?('S) {
    var underlyingSize = size(seq.seq);
    return if (underlyingSize < seq.from) 0u else underlyingSize - seq.from;
}

overload #Savable?(SlicedFrom['S]) = Savable?('S);
overload #Reliable?(SlicedFrom['S]) = Reliable?('S);


//
// slicedUpto
//

define SlicedUpto['S] as RecordType(seq:'S, upto:UInt);

private #DirectlyHeadSliceableIterator?('S)
    = BackSeekableIterator?('S);
overload #DirectlyHeadSliceableIterator?(CoordinateRange['C]) = true;
overload #DirectlyHeadSliceableIterator?(SlicedUpto['S]) = true;

private initializeSlicedUpto(forward seq:'S, upto:UInt) inline
    | Sequence?('S) and not DirectlyHeadSliceableIterator?('S)
    = SlicedUpto['S](seq, upto);

overload initializeSlicedUpto(forward iter:'I, upto:UInt) inline
    | BackSeekableIterator?('I)
{
    var iter2 = iter;
    var sz = size(iter2);
    seekBack(iter2, if (upto <= sz) sz - upto else 0u);
    return move(iter2);
}

overload initializeSlicedUpto(forward range:CoordinateRange['C], upto:UInt) inline
    | Coordinate?('C)
{
    var b = begin(range), e = b;
    var i = 0u;
    while (i < upto) {
        inc(e);
        inc(i);
    }
    return CoordinateRange(b, e);
}

overload initializeSlicedUpto(forward range:CoordinateRange['C], upto:UInt) inline
    | RandomAccessCoordinate?('C)
{
    var b, e = ..*range;
    return CoordinateRange(b, b + min(UInt(e - b), upto));
}

overload initializeSlicedUpto(forward slice:SlicedUpto['S], upto:UInt) inline
{
    forward seq, oldUpto = ..*slice;
    return SlicedUpto['S](seq, min(oldUpto, upto));
}

overload SlicedUpto(forward seq:'S, upto:'I) inline | Sequence?('S) and Integer?('I)
    = initializeSlicedUpto(captureSequence(seq), UInt(upto));

overload source(seq:SlicedUpto['S]) | SourceSequence?('S)
    = SlicedUpto(source(seq.seq), seq.upto);
overload iterator(seq:SlicedUpto['S]) | Sequence?('S) and not SourceSequence?('S)
    = SlicedUpto(iterator(seq.seq), seq.upto);

overload size(seq:SlicedUpto['S]) | SizedSequence?('S)
    = min(size(seq.seq), seq.upto);

overload read1(seq:SlicedUpto['S]) | Source?('S) {
    if (seq.upto == 0u)
        return nothing(..#sourceValueType('S));
    else {
        dec(seq.upto);
        return read1(seq.seq);
    }
}

overload hasFront?(iter:SlicedUpto['I]) inline | Iterator?('I)
    = iter.upto > 0u and hasFront?(iter.seq);
overload front(iter:SlicedUpto['I]) inline | Iterator?('I)
    = forward ..front(iter.seq);
overload incFront(ref iter:SlicedUpto['I]) inline | Iterator?('I) {
    if (iter.upto > 0u) {
        dec(iter.upto);
        incFront(iter.seq);
    }
}

overload #Savable?(SlicedUpto['S]) = Savable?('S);
overload #Reliable?(SlicedUpto['S]) = Reliable?('S);

