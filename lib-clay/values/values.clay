import __primitives__.(staticCountValues, staticIntegers);
import unsafe.casts.(refToRvalue);
import meta.statics.(staticInt?);

define allValues?;
overload #allValues?('f) = true;
overload #allValues?('f, 'x, ..'xs) = 'f('x) and allValues?('f, ..'xs);
overload allValues?(f) inline = true;
overload allValues?(f, forward x, forward ..xs) inline
    = f(x) and allValues?(f, ..xs);

define equalValues?;
overload #equalValues?('x0) = true;
overload #equalValues?('x0, 'x1, ..'xs) = 'x0 == 'x1 and equalValues?('x0, ..'xs);
overload equalValues?(x0) inline = true;
overload equalValues?(x0, forward x1, forward ..xs) inline
    = x0 == x1 and equalValues?(x0, ..xs);

define inValues?;
overload #inValues?('x) = false;
overload #inValues?('x, 'x, ..'ys) = true;
overload #inValues?('x, 'y, ..'ys) | 'x != 'y = inValues?('x, ..'ys);
overload inValues?(x, forward ..ys) inline {
    static for (forward y in ..ys)
        if (x == y)
            return true;
    return false;
}

define filterValues;
overload #filterValues('f) = ;
overload #filterValues('f, 'x, ..'xs) = ..filterValues('f, ..'xs);
overload #filterValues('f, 'x, ..'xs) | 'f('x)
    = 'x, ..filterValues('f, ..'xs);

define countValues;
overload #countValues(..'xs) = staticCountValues(..'xs);
overload countValues(..xs:'T) inline = *#staticCountValues(..'T);

define emptyValues?;
overload #emptyValues?(..'xs) = false;
overload #emptyValues?() = true;
overload emptyValues?(..xs) inline = false;
overload emptyValues?() inline = true;

define takeValues;
overload #takeValues('n) | staticInt?('n) = ;
overload #takeValues(0, ..'xs) = ;
overload #takeValues('n, 'x, ..'xs)
    | staticInt?('n) and 'n > 0
    = 'x, ..takeValues('n - 1, ..'xs);
overload takeValues(#'n) inline | staticInt?('n) = ;
overload takeValues(#0, forward ..xs) inline = ;
overload takeValues(#'n, forward x, forward ..xs) inline
    | staticInt?('n) and 'n > 0
    = forward x, forward ..takeValues(#('n - 1), ..xs);

define dropValues;
overload #dropValues('n) | staticInt?('n) = ;
overload #dropValues(0, ..'xs) = ..'xs;
overload #dropValues('n, 'x, ..'xs)
    | staticInt?('n) and 'n > 0
    = ..dropValues('n - 1, ..'xs);
overload dropValues(#'n) inline | staticInt?('n) = ;
overload dropValues(#0, forward ..xs) inline = forward ..xs;
overload dropValues(#'n, forward x, forward ..xs) inline
    | staticInt?('n) and 'n > 0
    = forward ..dropValues(#('n - 1), ..xs);

define mapValues;
overload #mapValues('f) = ;
overload #mapValues('f, 'x, ..'xs) = ..'f('x), ..mapValues('f, ..'xs);
overload mapValues(fn) inline = ;
overload mapValues(fn, forward x:'T, forward ..xs:'TT) inline
    = forward ..fn(x), forward ..mapValues(fn, ..xs);

define intValues as RuntimeStaticProcedure();
overload #intValues('n) = ..staticIntegers('n);

define nthValue;
overload #nthValue(0, 'x, ..'xs) = 'x;
overload #nthValue('n, 'x, ..'xs)
    | staticInt?('n) and 'n > 0
    = nthValue('n - 1, ..'xs);

overload nthValue(#0, forward x, forward ..xs) inline = forward x;
overload nthValue(#'n, forward x, forward ..xs) inline
    | staticInt?('n) and 'n > 0
    = forward nthValue(#('n - 1), ..xs);

define assocValue;
overload #assocValue('key, 'kv, ..'kvs) = assocValue('key, ..'kvs);
overload #assocValue('key, ['key, 'value], ..'kvs) = 'value;

overload assocValue(#'key, forward kv, forward ..kvs) inline
    = forward assocValue(#'key, ..kvs);
overload assocValue(#'key, forward kv:Tuple[Static['key], 'V], forward ..kvs) inline
    = forward kv[#1];

define assocValue?;
overload #assocValue?('key, 'kv, ..'kvs) = assocValue?('key, ..'kvs);
overload #assocValue?('key, ['key, 'value], ..'kvs) = true;
overload #assocValue?('key) = false;

overload assocValue?(#'key, forward kv, forward ..kvs) inline
    = assocValue?(#'key, ..kvs);
overload assocValue?(#'key, forward kv:Tuple[Static['key], 'V], forward ..kvs) inline
    = true;
overload assocValue?(#'key) inline
    = false;

define exceptValue as RuntimeStaticProcedure();
overload #exceptValue('v) = ;
overload #exceptValue('v, 'w, ..'vs) = 'w, ..exceptValue('v, ..'vs);
overload #exceptValue('v, 'v, ..'vs) = ..exceptValue('v, ..'vs);

private define indexValue2;
overload #indexValue2('n, 'v, 'w, ..'vs) = indexValue2('n + 1, 'v, ..'vs);
overload #indexValue2('n, 'v, 'v, ..'vs) = 'n;

define indexValue;
overload #indexValue('v, ..'vs) = indexValue2(0, 'v, ..'vs);

private define CapturedValue['T] as NewType('T);
private define CapturedRef['T] as NewType(Pointer['T]);
private define CapturedConst['T] as NewType(Pointer['T]);

private #Captured?('x) = false;
overload #Captured?(CapturedValue['T]) = true;
overload #Captured?(CapturedRef['T]) = true;
overload #Captured?(CapturedConst['T]) = true;

define CapturedType;
overload #CapturedType(CapturedValue['T]) = 'T;
overload #CapturedType(CapturedRef['T])   = 'T;
overload #CapturedType(CapturedConst['T]) = 'T;

#CapturedTypes(..'T) = ..mapValues(CapturedType, ..'T);

define captureValue;
overload captureValue(const x:'T) inline = CapturedConst['T](&x);
overload captureValue(ref x:'T) inline = CapturedRef['T](&x);
overload captureValue(rvalue x:'T) inline = CapturedValue['T](x);

define forwardValue;
overload forwardValue(x:CapturedConst['T]) inline = const (*x)^;
overload forwardValue(x:CapturedRef['T]) inline = ref (*x)^;
overload forwardValue(ref x:CapturedValue['T]) inline = rvalue refToRvalue(*x);

define capturedRef;
overload capturedRef(x:CapturedConst['T]) inline = const (*x)^;
overload capturedRef(x:CapturedRef['T]) inline = ref (*x)^;
overload capturedRef(x:CapturedValue['T]) inline = const *x;

captureValues(forward ..x) inline = [..mapValues(captureValue, ..x)];
forwardValues(ref x:Tuple[..'T]) inline
    | allValues?(Captured?, ..'T)
    = forward ..mapValues(forwardValue, ..*x);
capturedRefs(x:Tuple[..'T]) inline
    | allValues?(Captured?, ..'T)
    = forward ..mapValues(capturedRef, ..*x);
