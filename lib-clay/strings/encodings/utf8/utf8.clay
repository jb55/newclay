import containers.(push, Pusher, Pushable?);
import ctypes.(CString);
import strings.encodings.(stringTypeEncoding, stringBytes, EncodedString?);
import strings.unicode.(REPLACEMENT_CHAR, MAX_CODE_POINT);
import strings.(String?);
import unsafe.casts.(pointerCast);
import unsafe.coordinates.(CoordinateRange, ContiguousCoordinate, begin, end);
import values.(mapValues);


//
// UTF8Decoder
//

define UTF8Decoder['I] as NewType('I);
overload UTF8Decoder(forward x:'I) inline
    | Source?('I, UInt8)
    = UTF8Decoder['I](x);

private validSequenceByte?(d) = bitand(d, 0xC0u) == 0x80u;
private minUniChar(minCode, code) {
    if (code < minCode)
        return REPLACEMENT_CHAR;
    else
        return Char(code);
}
private rangeUniChar(minCode, maxCode, code) {
    if (code < minCode or code > maxCode)
        return REPLACEMENT_CHAR;
    else
        return Char(code);
}

private decodeTwo(c, d) {
    if (validSequenceByte?(d))
        return minUniChar(0x80_u32, bitor(
            bitshl(bitand(c, 0x1F_u32), 6),
                   bitand(d, 0x3F_u32)
        ));
    else
        return REPLACEMENT_CHAR;
}
private decodeThree(c, d, e) {
    if (validSequenceByte?(d) and validSequenceByte?(e))
        return minUniChar(0x800_u32, bitor(
            bitshl(bitand(c, 0x0F_u32), 12),
            bitshl(bitand(d, 0x3F_u32),  6),
                   bitand(e, 0x3F_u32)
        ));
    else
        return REPLACEMENT_CHAR;
}
private decodeFour(c, d, e, f) {
    if (validSequenceByte?(d) and validSequenceByte?(e) and validSequenceByte?(f))
        return rangeUniChar(0x10000_u32, UInt(MAX_CODE_POINT), bitor(
            bitshl(bitand(c, 0x07_u32), 18),
            bitshl(bitand(d, 0x3F_u32), 12),
            bitshl(bitand(e, 0x3F_u32),  6),
                   bitand(f, 0x3F_u32)
        ));
    else
        return REPLACEMENT_CHAR;
}

private utf8maybe(forward x, forward then) inline = forward maybe(x, then, -> REPLACEMENT_CHAR);

overload read1(ref i:UTF8Decoder['I]) {
    ref source = *i;
    return maybe(read1(source), (c) ->
        just(if (c < 0x80u)
            Char(c)
        else if (c >= 0xC0u) (
            if (c < 0xE0u)
                utf8maybe(read1(source), (d) -> decodeTwo(c, d))
            else if (c < 0xF0u)
                utf8maybe(read1(source), (d) ->
                    utf8maybe(read1(source), (e) -> decodeThree(c, d, e))
                )
            else if (c < 0xF8u)
                utf8maybe(read1(source), (d) ->
                    utf8maybe(read1(source), (e) ->
                        utf8maybe(read1(source), (f) -> decodeFour(c, d, e, f))
                    )
                )
            else REPLACEMENT_CHAR
        ) else REPLACEMENT_CHAR)
    );
}

overload flush(ref s:UTF8Decoder['I]) | Buffered?('I) {
    flush(*s);
}

overload #Reliable?(UTF8Decoder['I]) = Reliable?('I);


//
// UTF8Encoder
//

define UTF8Encoder['I] as NewType('I);
overload UTF8Encoder(forward x:'I) inline
    | Sink?('I, UInt8)
    = UTF8Encoder['I](x);

private encodeTwo(code)
    = bitor(0xC0_u8, UInt8(bitshr(bitand(code, 0x7C0u), 6))),
      bitor(0x80_u8, UInt8(       bitand(code,  0x3Fu)    ));
private encodeThree(code)
    = bitor(0xE0_u8, UInt8(bitshr(bitand(code, 0xF000u), 12))),
      bitor(0x80_u8, UInt8(bitshr(bitand(code,  0xFC0u),  6))),
      bitor(0x80_u8, UInt8(       bitand(code,   0x3Fu)     ));
private encodeFour(code)
    = bitor(0xF0_u8, UInt8(bitshr(bitand(code, 0x1C0000u), 18))),
      bitor(0x80_u8, UInt8(bitshr(bitand(code,  0x3F000u), 12))),
      bitor(0x80_u8, UInt8(bitshr(bitand(code,    0xFC0u),  6))),
      bitor(0x80_u8, UInt8(       bitand(code,     0x3Fu)     ));

overload hasFront?(s:UTF8Encoder['I]) = hasFront?(*s);
overload write1(ref s:UTF8Encoder['I], c:Char) {
    ref sink = *s;
    var code = UInt(c);
    if (code > UInt(MAX_CODE_POINT))
        code = UInt(REPLACEMENT_CHAR);

    if (code < 0x80u)
        write1(sink, UInt8(c));
    else if (code < 0x800u)
        mapValues((b) -> { write1(sink, b); }, ..encodeTwo(code));
    else if (code < 0x10000u)
        mapValues((b) -> { write1(sink, b); }, ..encodeThree(code));
    else
        mapValues((b) -> { write1(sink, b); }, ..encodeFour(code));
}

overload flush(ref s:UTF8Encoder['I]) | Buffered?('I) {
    flush(*s);
}

overload #sinkValueType(UTF8Encoder['I]) = Char;
overload #Reliable?(UTF8Encoder['I]) = Reliable?('I);


//
// UTF8 sequence
//

define UTF8['S] as NewType('S);
overload UTF8(forward s:'S) inline
    | (Sequence?('S) or SinkSequence?('S)) and sequenceElementType('S) == UInt8
    = UTF8['S](s);

overload UTF8(forward s:CString) inline
    = UTF8(CoordinateRange(
        pointerCast(ContiguousCoordinate[UInt8], begin(s)),
        pointerCast(ContiguousCoordinate[UInt8], end(s)),
    ));

overload source(s:UTF8['S]) inline | Sequence?('S) = UTF8Decoder(iterator(*s));
overload source(s:UTF8['S]) inline | SourceSequence?('S) = UTF8Decoder(source(*s));
overload sink(s:UTF8['S]) inline | SinkSequence?('S) = UTF8Encoder(sink(*s));

overload push(ref s:UTF8['S], c:Char) | Pushable?('S) {
    var utf8Pusher = UTF8Encoder(Pusher(*s));
    write1(utf8Pusher, c);
}
overload push(ref s:UTF8['S], s2:'S2) | String?('S2) {
    for (c in s2)
        push(s, c);
}
overload push(ref s:UTF8['S], s2:'S2)
    | EncodedString?('S2, UTF8)
{
    push(*s, stringBytes(s2));
}

overload stringBytes(forward s:UTF8['S]) = iterator(*s);
overload #stringTypeEncoding(UTF8['S])
    | Sequence?('S) and sequenceElementType('S) == UInt8
    = UTF8;
