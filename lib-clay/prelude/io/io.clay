import unsafe.coordinates.(ContiguousCoordinate);
import unsafe.valuesemantics.(POD?, destroy);
import values.(allValues?, countValues);


//
// source operations
//

define source;
define read1;

#Source?('S, ..'E) = Source?('S) and [..sourceValueType('S)] == [..'E];
overload #Source?('S) = Regular?('S) and callDefined?(read1, Ref['S]);
#sourceValueType('S) = ..type((ref s:'S) -> ..required(read1(s)));


//
// sink operations
//

define sink;
define hasFront?;
define write1;

define sinkValueType;

#Sink?('S, ..'E) = Sink?('S) and [..sinkValueType('S)] == [..'E];
overload #Sink?('S) = Regular?('S)
    and callDefined?(hasFront?, 'S)
    and staticCallDefined?(sinkValueType, 'S)
    and callDefined?(write1, Ref['S], ..sinkValueType('S));


//
// a reliable iterator/sink/source/coordinate will not throw an exception during
// in-range data access
//

#Reliable?('I) = false;


//
// iterator operations
//

define iterator;
define front;
define incFront;

#Iterator?('I, ..'T) = Iterator?('I) and [..iteratorValueType('I)] == [..'T];
overload #Iterator?('I) = Regular?('I)
    and callDefined?(hasFront?, 'I)
    and callDefined?(front, 'I)
    and callDefined?(incFront, Ref['I]);

#MutableIterator?('I)
    = Iterator?('I) and allValues?(Ref?, ..type((i:'I) -> forward ..front(i)));

#iteratorValueType('I) | Iterator?('I) = ..type((i:'I) -> ..front(i));


//
// iterator for source
// XXX ideally a source should be directly iterable, and iterators should be
// inherently savable
//

define SourceIterator['S] as RecordType(source:'S, value:Maybe[sourceValueType('S)]);

overload SourceIterator(forward x:'S) --> returned:SourceIterator['S] | Source?('S) {
    returned.source <-- x;
    try {
        returned.value <-- read1(returned.source);
    } catch (ex) {
        destroy(returned.source);
        throw ex;
    }
}

overload hasFront?(i:SourceIterator['S]) inline = just?(i.value);
overload front(i:SourceIterator['S]) inline = const required(i.value);
overload incFront(ref i:SourceIterator['S]) inline {
    i.value = read1(i.source);
}

overload #Reliable?(SourceIterator['S]) = Reliable?('S);


//
// savable iterators
// an iterator, source, or sink is savable if it can be copied, and the copy
// can be iterated independently of the original iterator
//

#Savable?('X) = false;

save(x:'X) | Savable?('X) = x;


//
// idempotent source/sink/iterator accessors
//

overload iterator(forward x:'I) inline | Iterator?('I) = forward x;
overload source(forward x:'S) inline | Source?('S) = forward x;
overload sink(forward x:'S) inline | Sink?('S) = forward x;


//
// iterator as source
//

overload read1(ref i:'I) inline --> returned:Maybe[..iteratorValueType('I)]
    | Iterator?('I) and countValues(..iteratorValueType('I)) == 1 // XXX multi-value maybe
{
    if (hasFront?(i)) {
        returned <-- just(..front(i));
        try {
            incFront(i);
        } catch (ex) {
            destroy(returned);
            throw ex;
        }
    } else
        returned <-- nothing(..#iteratorValueType('I));
}


//
// mutable iterator as sink
//

overload #sinkValueType('I) | MutableIterator?('I) = ..iteratorValueType('I);

overload write1(ref i:'I, forward ..v:'E) inline
    | MutableIterator?('I) and [..'E] == [..iteratorValueType('I)]
{
    assert(-> hasFront?(i));
    ..front(i) = ..v;
    incFront(i);
}


//
// sized iterator operations
//

define size;

#Sized?('I) = definedWithType?((i:'I) -> size(i), UInt);
#SizedIterator?('I) = Iterator?('I) and Sized?('I);
#SizedSource?('I) = Source?('I) and Sized?('I);
#SizedSink?('I) = Sink?('I) and Sized?('I);

overload hasFront?(i:'I) inline | defined?(-> size(i) > 0u) = size(i) > 0u;

#Infinite?('I) = false;
#InfiniteIterator?('I) = Iterator?('I) and Infinite?('I);
#InfiniteSource?('I) = Source?('I) and Infinite?('I);
#InfiniteSink?('I) = Sink?('I) and Infinite?('I);

overload size(x:'I) | Infinite?('I) = UInt(-1);


//
// reversible iterator
//

define back;
define incBack;

#ReversibleIterator?('I) = Iterator?('I)
    and callDefined?(back, 'I)
    and callDefined?(incBack, Ref['I]);

hasBack?(x:'I) inline | ReversibleIterator?('I) = hasFront?(x);


//
// seekable iterator
//

define seekFront;
define seekBack;

#SeekableSource?('I) = SizedSource?('I)
    and callDefined?(seekFront, Ref['I], UInt);
#SeekableSink?('I) = SizedSink?('I)
    and callDefined?(seekFront, Ref['I], UInt);
#SeekableIterator?('I) = SizedIterator?('I)
    and callDefined?(seekFront, Ref['I], UInt);
#BackSeekableIterator?('I) = SizedIterator?('I)
    and callDefined?(seekBack, Ref['I], UInt);


//
// indexable iterator
//

#IndexableIterator?('I) = SizedIterator?('I) and callDefined?(index, 'I, UInt);


//
// buffered iterator/sink/source
//

define flush;

#Buffered?('I) = callDefined?(flush, 'I);



//
// common iterator concepts
//

#ForwardIterator?('I) = Iterator?('I) and Savable?('I);
#BidirectionalIterator?('I) = ForwardIterator?('I) and ReversibleIterator?('I);
#RandomAccessIterator?('I) = BidirectionalIterator?('I)
    and SeekableIterator?('I)
    and BackSeekableIterator?('I)
    and IndexableIterator?('I);


//
// empty?
//

empty?(x) | defined?(-> hasFront?(x)) = not hasFront?(x);


//
// bulk-readable source
//

define readN;

#BulkReadableSource?('S) = Source?('S)
    and POD?(sourceValueType('S))
    and callDefined?(readN, Ref['S], ContiguousCoordinate[sourceValueType('S)], UInt);

// size to use for read loops etc.
idealReadSize(s:'S) | BulkReadableSource?('S) = 4096u;


//
// bulk-writable sink
//

define writeN;

#BulkWritableSink?('S) = Sink?('S)
    and POD?(sinkValueType('S))
    and callDefined?(writeN, Ref['S], ContiguousCoordinate[sinkValueType('S)], UInt);

// size to use for write loops etc.
idealWriteSize(s:'S) | BulkWritableSink?('S) = 4096u;

