import values.*;
import meta.c.*;
import meta.statics.*;
import meta.lltypes.*;

public import unsafe.valuesemantics.(copy, move);
import unsafe.valuesemantics.(moveRvalue);

import __primitives__.(
    staticPlus,
    staticMinus,
    staticMultiply,
    staticQuotient,
    staticRemainder,
    staticAdd,
    staticSubtract,
    staticString?,
    staticStringChars,
    staticModuleMember,
    staticLesser?,
    staticLesserEquals?,
    staticGreater?,
    staticGreaterEquals?,
    staticEquals?,
    staticNotEquals?,
    staticBitnot,
    staticBitor,
    staticBitand,
    staticBitxor,
    staticBitshl,
    staticBitshr,
);


//
// tupleLiteral
//

tupleLiteral(forward ..elements:'T) inline = Tuple[..'T](..elements);
overload #tupleLiteral(..'x) = [..'x];



//
// index
//

define index;
overload index(forward a, #'n) inline
    | staticInt?('n) and defined?(-> forward ..a['n])
    = forward ..a['n];

overload index(a, n:'I) inline
    | Integer?('I) and defined?(-> forward ..((a + n)^))
    = forward ..((a + n)^);


//
// dereference
//

dereference(forward a:'T) inline
    | Pointer?('T) and staticCallDefined?(pointerReferencedType, 'T)
    = forward cDereference(#pointerReferencedType('T), a);



//
// staticIndex, fieldRef
//

staticIndex(forward a, #'n) inline
    | defined?(-> forward ..a[#'n])
    = forward ..a[#'n];
fieldRef(forward a, #'field) inline
    | defined?(-> forward ..a[#'field])
    = forward ..a[#'field];


//
// static accessors

overload #staticIndex('a, 'x) = 'a['x];
overload #index('a, ..'x) = ..'a[..'x];
overload #fieldRef('a, 'x) = staticModuleMember('a, 'x);
overload #call('a, ..'x) = ..'a(..'x);


//
// arithmetic operators
//

define plus;
define minus;
define multiply as VariadicBinaryOperatorProcedure();
define divide;
define quotient;
define remainder;
define add as VariadicBinaryOperatorProcedure();
define subtract;


//
// arithmetic over statics
//

overload #plus('x) = staticPlus('x);
overload #minus('x) = staticMinus('x);
overload #multiply('x, 'y) = staticMultiply('x, 'y);
overload #quotient('x, 'y) = staticQuotient('x, 'y);
overload #remainder('x, 'y) = staticRemainder('x, 'y);
overload #add('x, 'y) = staticAdd('x, 'y);
overload #subtract('x, 'y) = staticSubtract('x, 'y);


//
// arithmetic operators over c types
//

overload plus(a:'N) inline | Number?('N) = a;
overload minus(a:'N) inline | Number?('N) = cMinus('N, a);

overload multiply(a:'A, b:'B) inline | ArithmeticCompatiblePrimitiveTypes?('A, 'B)
    = cMultiply(#biggerNumberType('A, 'B), a, b);
overload divide(a:'A, b:'B) inline | ArithmeticCompatiblePrimitiveFloatTypes?('A, 'B)
    = cDivide(#biggerNumberType('A, 'B), a, b);
overload divide(a:'A, b:'B) inline | ArithmeticCompatiblePrimitiveIntTypes?('A, 'B)
    = Float64(a) / Float64(b);
overload quotient(a:'A, b:'B) inline | ArithmeticCompatiblePrimitiveIntTypes?('A, 'B)
    = cDivide(#biggerNumberType('A, 'B), a, b);
overload remainder(a:'A, b:'B) inline | ArithmeticCompatiblePrimitiveIntTypes?('A, 'B)
    = cRemainder(#biggerNumberType('A, 'B), a, b);

overload add(a:'A, b:'B) inline | ArithmeticCompatiblePrimitiveTypes?('A, 'B)
    = cAdd(#biggerNumberType('A, 'B), a, b);
overload subtract(a:'A, b:'B) inline | ArithmeticCompatiblePrimitiveTypes?('A, 'B)
    = cSubtract(#biggerNumberType('A, 'B), a, b);


//
// comparison operators
//

define lesser?;
lesserEquals?(a, b) | defined?(-> b < a) = not b < a;
greater?(a, b) | defined?(-> b < a) = b < a;
greaterEquals?(a, b) | defined?(-> a < b) = not a < b;

define equals?;
notEquals?(a, b) | defined?(-> a == b) = not a == b;

// XXX use intrinsic ordered/unordered conditions
ordered?(a, b)
    | defined?(-> a <= b) and defined?(-> b <= a)
    = a <= b or b <= a;

nan?(a:'A) | Float?('A) = a != a;

overload lesser?(#'a, #'b) = *#('a < 'b);
overload equals?(#'a, #'b) = *#('a == 'b);


//
// comparison operators on numbers
//

overload lesser?(a:'A, b:'B) inline | ComparablePrimitiveTypes?('A, 'B)
    = cLesser?(a, b);
overload lesserEquals?(a:'A, b:'B) inline | ComparablePrimitiveTypes?('A, 'B)
    = cLesserEquals?(a, b);
overload greater?(a:'A, b:'B) inline | ComparablePrimitiveTypes?('A, 'B)
    = cGreater?(a, b);
overload greaterEquals?(a:'A, b:'B) inline | ComparablePrimitiveTypes?('A, 'B)
    = cGreaterEquals?(a, b);

overload equals?(a:'A, b:'B) inline | EqualityComparablePrimitiveTypes?('A, 'B)
    = cEquals?(a, b);
overload notEquals?(a:'A, b:'B) inline | EqualityComparablePrimitiveTypes?('A, 'B)
    = cNotEquals?(a, b);


//
// comparison operators on statics

overload #lesser?('a, 'b) = staticLesser?('a, 'b);
overload #lesserEquals?('a, 'b) = staticLesserEquals?('a, 'b);
overload #greater?('a, 'b) = staticGreater?('a, 'b);
overload #greaterEquals?('a, 'b) = staticGreaterEquals?('a, 'b);
overload #equals?('a, 'b) = staticEquals?('a, 'b);
overload #notEquals?('a, 'b) = staticNotEquals?('a, 'b);


//
// swap -- swap two values without copying, resetting, or destroying
//

swap(ref a, ref b) {
    rvalue temp = moveRvalue(a);
    a <-- moveRvalue(b);
    b <-- temp;
}


//
// update assignment
//

updateAssign(#'op, ref a, forward b) inline
    | defined?(-> { a = 'op(a, b); })
    { a = 'op(a, b); }

inc(ref a:'T) inline | defined?(-> { a += 1; }) { a += 1; }
dec(ref a:'T) inline | defined?(-> { a -= 1; }) { a -= 1; }

overload inc(ref a:'T) inline | defined?(-> { a += 1u; }) { a += 1u; }
overload dec(ref a:'T) inline | defined?(-> { a -= 1u; }) { a -= 1u; }


//
// accessor assignment
//

callAssign(forward b, #'f, forward ..args) inline
    | defined?(-> { ref a = 'f(..args); a = b;})
    { ref a = 'f(..args); a = b; }

updateCallAssign(#'op, forward b, #'f, forward ..args) inline
    | defined?(-> { ref a = 'f(..args); a = 'op(a, b); })
    { ref a = 'f(..args); a = 'op(a, b); }



//
// call
//

define call;

overload call(#'f, forward ..args) inline = forward ..'f(..args);

// non-variadic external code pointer
overload call(f:ExternalCodePointer['ABI, false, [..'I], [..'O]], ..args:'Args) inline
    : ..'O
    | [..'I] == [..'Args]
    = ..cExternalCall(f, ..args);

// variadic external code pointer
overload call(f:ExternalCodePointer['ABI, true, [..'I], [..'O]], ..args:'Args) inline
    : ..'O
    | allValues?(RequireExternalPOD?, ..'Args)
      and 'I == [..takeValues(countValues(..'I), ..'Args)]
    = ..cExternalCall(f, ..args);



//
// unpack
//

define unpack;
overload unpack(..#'x) = ..'x;
overload #unpack([..'x]) = ..'x;
overload #unpack('s) | staticString?('s) = ..staticStringChars('s);


//
// max, min
//

define max as VariadicBinaryOperatorProcedure();
define min as VariadicBinaryOperatorProcedure();

overload max(a:'A, b:'A) inline | defined?(-> a < b)
    = if (a < b) b else a;
overload min(a:'A, b:'A) inline | defined?(-> a < b)
    = if (a < b) a else b;

overload max(a:'A, b:'A) inline | Float?('A)
    = if (a >= b or nan?(b)) a else b;
overload min(a:'A, b:'A) inline | Float?('A)
    = if (a <= b or nan?(b)) a else b;

overload #max('a, 'b) = if ('a < 'b) 'b else 'a;
overload #min('a, 'b) = if ('a < 'b) 'a else 'b;


//
// case?
//

case?(value:'T, forward ..cases:'UU) inline
    | allValues?((#'U) -> callDefined?(equals?, 'T, 'U), ..'UU)
    = inValues?(value, ..cases);


//
// bitand, bitor, bitxor, bitnot
//

define bitand as VariadicBinaryOperatorProcedure();
overload bitand(a:'A, b:'B) | BitwiseCompatiblePrimitiveTypes?('A, 'B)
    = cBitand(#biggerNumberType('A, 'B), a, b);

define bitor as VariadicBinaryOperatorProcedure();
overload bitor(a:'A, b:'B) | BitwiseCompatiblePrimitiveTypes?('A, 'B)
    = cBitor(#biggerNumberType('A, 'B), a, b);

define bitxor as VariadicBinaryOperatorProcedure();
overload bitxor(a:'A, b:'B) | BitwiseCompatiblePrimitiveTypes?('A, 'B)
    = cBitxor(#biggerNumberType('A, 'B), a, b);

define bitnot;
overload bitnot(a:'A) | Integer?('A) = cBitnot('A, a);

define bitandc;
overload bitandc(a:'A, b:'B) | BitwiseCompatiblePrimitiveTypes?('A, 'B)
    = bitand(a, bitnot(b));

define bitshl;
overload bitshl(a:'A, shift:'N) | Integer?('A) and Integer?('N)
    = cBitshl('A, a, shift);

define bitshr;
overload bitshr(a:'A, shift:'N) | Integer?('A) and Integer?('N)
    = cBitshr('A, a, shift);

define bitrol;
overload bitrol(a:'A, shift:'N) | Integer?('A) and Integer?('N)
    = bitor(bitshl(a, shift), bitshr(a, typeSize('A)*8u - UInt(shift)));

define bitror;
overload bitror(a:'A, shift:'N) | Integer?('A) and Integer?('N)
    = bitor(bitshr(a, shift), bitshl(a, typeSize('A)*8u - UInt(shift)));


//
// bitwise static operations
//

overload #bitnot('x) = staticBitnot('x);
overload #bitand('x, 'y) = staticBitand('x, 'y);
overload #bitor('x, 'y) = staticBitor('x, 'y);
overload #bitxor('x, 'y) = staticBitxor('x, 'y);
overload #bitshl('x, 'y) = staticBitshl('x, 'y);
overload #bitshr('x, 'y) = staticBitshr('x, 'y);

overload #bitandc('x, 'y) = staticBitand('x, staticBitnot('y));


//
// identity function
//

identity(forward ..x) inline = forward ..x;


//
// monad operations
//

define bind as VariadicBinaryOperatorProcedure();
