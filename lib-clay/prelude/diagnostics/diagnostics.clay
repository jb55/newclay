public import __primitives__.(
    staticObserve,
    staticError,
    staticAssert,
    commandlineVariable,
);
import libc.(abort);
import libc.stdio.(puts, printf);
import ctypes.(CUInt, CString);
import meta.lambdas.(lambdaString, lambdaLocation);

private assertLocation(file, line, column) = CString(file), CUInt(line), CUInt(column);

#assertionsEnabled?() = not commandlineVariable("NDEBUG");

define assert;
overload assert(f, ..msg) inline | not assertionsEnabled?() {}
overload assert(f, ..msg) inline
    | definedWithType?(-> f(), Bool) and assertionsEnabled?()
{
    if (not f()) {
        // XXX show message
        printf(CString("assertion %s failed at %s(%u,%u)\n"),
            CString(lambdaString(f)),
            ..assertLocation(..lambdaLocation(f))
        );
        abort();
        __unreachable__; // XXX not needed when external noreturns are implemented
    }
}

define assertUnreachable;
overload assertUnreachable(f, ..msg) noreturn inline | not assertionsEnabled?() {
    __unreachable__;
}
overload assertUnreachable(f, ..msg) noreturn inline | assertionsEnabled?() {
    // XXX show message
    printf(CString("unreachable code reached at %s(%u,%u)\n"),
        ..assertLocation(..lambdaLocation(f))
    );
    abort();
    __unreachable__; // XXX not needed when external noreturns are implemented
}

