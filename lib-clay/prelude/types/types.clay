import meta.platform.*;
import meta.statics.*;
import meta.symbols.*;
import values.*;
import meta.lltypes.*;
import unsafe.coordinates.(ContiguousCoordinate);
import unsafe.valuesemantics.(Copyable?, Movable?, Assignable?, MoveAssignable?);

public import __primitives__.(
    returns?,
    type,
    staticDefined?,
    defined?,
);


//
// definedWithType?

#definedWithType?('f, ..'TT) = defined?('f) and [..type('f)] == [..'TT];


//
// typeSize, typeAlign
//

define typeSize  as RuntimeStaticProcedure();
define typeAlign as RuntimeStaticProcedure();

overload #typeSize ('T) | type?('T) = llTypeSize (llType('T));
overload #typeAlign('T) | type?('T) = llTypeAlign(llType('T));


//
// basic type predicate
//

#type?('x) = staticCallDefined?(llType, 'x);
    /* and allValues?(type?, ..recursiveTypes('x));*/
#recursiveTypes('T) = ;


//
// reference kinds
//

define Ref['T];
define Rvalue['T];
define Const['T];

#ReferenceKindTemplate?('x) = false;
overload #ReferenceKindTemplate?(Ref) = true;
overload #ReferenceKindTemplate?(Rvalue) = true;
overload #ReferenceKindTemplate?(Const) = true;

#ReferenceType?('T) = type?('T);
overload #ReferenceType?(Ref['T])    = type?('T);
overload #ReferenceType?(Rvalue['T]) = type?('T);
overload #ReferenceType?(Const['T])  = type?('T);

#referenceBaseType('T) | type?('T) = 'T;
overload #referenceBaseType(Ref['T])    | type?('T) = 'T;
overload #referenceBaseType(Rvalue['T]) | type?('T) = 'T;
overload #referenceBaseType(Const['T])  | type?('T) = 'T;

#Ref?('X) = false;
overload #Ref?(Ref['T]) | type?('T) = true;

#Rvalue?('X) = false;
overload #Rvalue?(Rvalue['T]) | type?('T) = true;

#Const?('X) = false;
overload #Const?(Const['T]) | type?('T) = true;


//
// external ABIs
//

define CdeclABI;
define StdcallABI;

#ABI?('x) = false;
overload #ABI?(CdeclABI) = true;
overload #ABI?(StdcallABI) = true;

#ABISupportsVariadics?('x) = false;
overload #ABISupportsVariadics?(CdeclABI) = true;



//
// primitive type predicates
//

#Integer?('x) = false;
overload #Integer?(Int   ) = true;
overload #Integer?(Int8  ) = true;
overload #Integer?(Int16 ) = true;
overload #Integer?(Int32 ) = true;
overload #Integer?(Int64 ) = true;
overload #Integer?(UInt  ) = true;
overload #Integer?(UInt8 ) = true;
overload #Integer?(UInt16) = true;
overload #Integer?(UInt32) = true;
overload #Integer?(UInt64) = true;

#SignedInteger?('x) = false;
overload #SignedInteger?(Int  ) = true;
overload #SignedInteger?(Int8 ) = true;
overload #SignedInteger?(Int16) = true;
overload #SignedInteger?(Int32) = true;
overload #SignedInteger?(Int64) = true;

#UnsignedInteger?('x) = false;
overload #UnsignedInteger?(UInt  ) = true;
overload #UnsignedInteger?(UInt8 ) = true;
overload #UnsignedInteger?(UInt16) = true;
overload #UnsignedInteger?(UInt32) = true;
overload #UnsignedInteger?(UInt64) = true;

#Float?('x) = false;
overload #Float?(Float32) = true;
overload #Float?(Float64) = true;

#Number?('T) = Integer?('T) or Float?('T);

#Char?('x) = false;
overload #Char?(Char) = true;

#Static?('X) = false;
overload #Static?(Static['x]) = true;

#Pointer?('X) = false;
overload #Pointer?(Pointer['T]) = true;
overload #Pointer?(ContiguousCoordinate['T]) = true;
overload #Pointer?(OpaquePointer) = true;
overload #Pointer?(CodePointer['I,'O])
    | type?(CodePointer['I,'O]) = true;
overload #Pointer?(ExternalCodePointer['A,'V,'I,'O])
    | type?(ExternalCodePointer['A,'V,'I,'O]) = true;


#Array?('X) = false;
overload #Array?(Array['T, 'n]) | type?(Array['T, 'n]) = true;


#Tuple?('X) = false;
overload #Tuple?(Tuple[..'T]) | type?(Tuple[..'T]) = true;


#Union?('X) = false;
overload #Union?(Union[..'T]) | type?(Union[..'T]) = true;


//
// ValidStaticIndex? for unions or tuples
//

#validStaticIndex?('n, ..'T) = staticInt?('n) and 'n >= 0 and 'n < countValues(..'T);



//
// WithAlignment symbol attribute

#WithAlignment('n) | staticInt?('n) = [WithAlignment, 'n];
#WithAlignment?('T) = type?('T) and symbolWithTag?('T, WithAlignment);

overload #typeAlign('T)
    | type?('T) and WithAlignment?('T)
    = max(UInt(symbolTagBody('T, WithAlignment)), llTypeAlign(llType('T)));


//
// regular type
//

#Regular?('T) = Copyable?('T) and Movable?('T)
    and Assignable?('T) and MoveAssignable?('T);
