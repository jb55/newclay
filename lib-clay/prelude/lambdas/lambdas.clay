import meta.lambdas.*;
import values.(captureValues, capturedRefs);

define Lambda['L, 'C] as NewType('C);

overload Lambda(#'L, captures:'C) = Lambda['L, 'C](captures);

define captureLambda;
define lambdaCaptures;

overload captureLambda(#'L, forward ..captures)
    | lambdaSymbol?('L) and lambdaCapturesByReference?('L)
    = Lambda(#'L, captureValues(..captures));
overload lambdaCaptures(l:Lambda['L, 'C])
    | lambdaSymbol?('L) and lambdaCapturesByReference?('L)
    = forward ..capturedRefs(*l);

overload captureLambda(#'L, forward ..captures)
    | lambdaSymbol?('L) and lambdaCapturesByValue?('L)
    = Lambda(#'L, [..captures]);
overload lambdaCaptures(forward l:Lambda['L, 'C])
    | lambdaSymbol?('L) and lambdaCapturesByValue?('L)
    = forward ..unpack(*l);

overload call(forward l:Lambda['L, 'C], forward ..args)
    | lambdaSymbol?('L) and defined?(-> { 'L(..lambdaCaptures(l), ..args); })
    = forward ..'L(..lambdaCaptures(l), ..args);

#Lambda?('T) = false;
overload #Lambda?(Static['L]) | lambdaSymbol?('L) and lambdaStateless?('L) = true;
overload #Lambda?(Lambda['L, 'C]) | lambdaSymbol?('L) and type?('C) = true;
