import variants.*;
import variants.representation.*;
import values.*;
import unsafe.valuesemantics.(reset, ResetDoesNothing?);

define Nothing;

private #maybeRepr('T) = TaggedUnionRepr;
overload #maybeRepr('T)
    | reprAcceptsMemberTypes?(NullablePointerRepr[Static[Nothing], 'T])
    = NullablePointerRepr;

define Maybe['T] as VariantType(Static[Nothing], 'T),
    WithDefaultMemberType(Static[Nothing]),
    WithReprType(maybeRepr('T));

#Maybe?('T) = false;
overload #Maybe?(Maybe['T]) = true;

just(forward x:'T) inline = Maybe['T](x);
nothing(#'T) inline = Maybe['T]();

just?(m:Maybe['T]) inline = variantIs?('T, m);
nothing?(m:Maybe['T]) inline = variantIs?(Static[Nothing], m);

required(forward m:Maybe['T]) inline = forward m['T];

requiredUnsafe(forward m:Maybe['T]) inline = forward variantAsUnsafe('T, m);

private define maybe2;
overload maybe2(forward x, forward justf, forward nothingf) inline = forward ..justf(x);
overload maybe2(#Nothing, forward justf, forward nothingf) inline = forward ..nothingf();

maybe(forward m:Maybe['T], forward justf, forward nothingf) inline
    = forward ..dispatch(m, (forward x) -> forward ..maybe2(x, justf, nothingf));

private maybe3(forward m, forward f, ..#'ReturnTypes) inline
    = ..maybe(m, f, -> ..mapValues(call, ..#'ReturnTypes));

overload maybe(forward m:Maybe['T], forward f) inline
    | allValues?(Maybe?, ..type(-> forward ..f(required(m))))
    = ..maybe3(m, f, ..#type(-> ..f(required(m))));

overload bind(forward m:Maybe['T], forward f) inline
    | allValues?(Maybe?, ..type(-> ..f(required(m))))
    = forward ..maybe(m, (forward x) -> ..f(x));

overload reset(m:Maybe['T]) | not ResetDoesNothing?(Maybe['T]) {
    m <-- nothing('T);
}


//
// conveniences for handling maybe-pointers
//

alias MPointer['T] = Maybe[Pointer['T]];
null(#'T) inline = nothing(Pointer['T]);

alias MOpaquePointer = Maybe[OpaquePointer];
nullOpaque() inline = nothing(OpaquePointer);
