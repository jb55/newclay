import __primitives__.(
    callDefinedForSymbol?,
    makeCodePointer,
    makeExternalCodePointer,
    callCodePointer,
    monomorphic?,
    monomorphicInputTypes,
);
import meta.symbols.(symbolWithTag?, symbol?, private symbolBodyWithTag?);
import unsafe.valuesemantics.(POD?);
import values.(allValues?, mapValues, countValues);

public import __primitives__.(staticCallDefined?);

define callDefined?;
overload #callDefined?('fn, ..'T) = callDefinedForSymbol?('fn, ..'T);
overload callDefined?(fn:'F, ..#'T) = *#callDefinedForSymbol?(call, 'F, ..'T);
overload callDefined?(#'fn, ..#'T) = *#callDefinedForSymbol?('fn, ..'T);

#callDefinedForType?('F, ..'T) = callDefinedForSymbol?(call, 'F, ..'T);
overload #callDefinedForType?(Static['f], ..'T)
    = callDefinedForSymbol?('f, ..'T);


//
// procedure tags
//

// VariadicBinaryOperatorProcedure -- define variadic version of procedure
// as left fold of the binary procedure
#VariadicBinaryOperatorProcedure() = [VariadicBinaryOperatorProcedure];

overload 'fn(forward x:'X, forward y:'Y, forward z:'Z, forward ..w:'W) inline
    | VariadicBinaryOperatorProcedure?('fn)
      and callDefined?('fn, 'X, 'Y)
      and callDefined?('fn, type(-> 'fn(x, y)), 'Z, ..'W)
    = forward 'fn('fn(x, y), z, ..w);

overload 'fn(forward x) inline
    | VariadicBinaryOperatorProcedure?('fn)
    = forward x;

overload #'fn('x, 'y, 'z, ..'w)
    | VariadicBinaryOperatorProcedure?('fn)
      and staticCallDefined?('fn, 'x, 'y)
    = 'fn('fn('x, 'y), 'z, ..'w);

overload #'fn('x)
    | VariadicBinaryOperatorProcedure?('fn)
    = 'x;

#VariadicBinaryOperatorProcedure?('fn)
    = symbolWithTag?('fn, VariadicBinaryOperatorProcedure);


// RuntimeStaticProcedure -- make a static function callable as a runtime procedure

#RuntimeStaticProcedure() = [RuntimeStaticProcedure];
#RuntimeStaticProcedure?('fn) = symbolWithTag?('fn, RuntimeStaticProcedure);
overload 'fn(..#'xs) inline
    | RuntimeStaticProcedure?('fn)
      and staticCallDefined?('fn, ..'xs)
    = ..unpack(..#'fn(..'xs));


//
// code pointers
//

overload CodePointer[[..'I], [..'O]](#'f) inline
    | definedWithType?(-> forward ..'f(..arg(..'I)), ..'O)
    = makeCodePointer(#'f, ..'I);

overload CodePointer(#'f) inline
    | monomorphic?('f)
    = makeCodePointer(#'f, ..#monomorphicInputTypes('f));

overload call(c:CodePointer[[..'I], [..'O]], forward ..args) inline
    | defined?(-> forward callCodePointer(c, ..args))
    = forward ..callCodePointer(c, ..args);

overload ExternalCodePointer['A, false, [..'I], [..'O]](#'f) inline
    | allValues?(POD?, ..'I, ..'O)
      and definedWithType?((..args:'I) -> ..'f(..args), ..'O)
    = makeExternalCodePointer(#'f, 'A, ..'I);

overload CCodePointer(#'f) inline
    | monomorphic?('f)
      and allValues?(POD?, ..monomorphicInputTypes('f))
    = makeExternalCodePointer(#'f, CdeclABI, ..#monomorphicInputTypes('f));

overload StdcallCodePointer(#'f) inline
    | monomorphic?('f)
      and allValues?(POD?, ..monomorphicInputTypes('f))
    = makeExternalCodePointer(#'f, StdcallABI, ..#monomorphicInputTypes('f));


//
// XXX
// type-to-argument conversions for CodePointer() constructor
// ideally you'd be able to say type((x:Ref[Int]) -> foo(x)) and have x be a
// ref Int, but that's not the case yet.
//

private define arg;
overload arg(#'T)         --> const  x:'T __c__ """abort();""";
overload arg(#Const['T])  --> const  x:'T __c__ """abort();""";
overload arg(#Ref['T])    --> ref    x:'T __c__ """abort();""";
overload arg(#Rvalue['T]) --> rvalue x:'T __c__ """abort();""";

overload arg(..#'T) | countValues(..'T) != 1 = forward ..mapValues(arg, ..'T);

