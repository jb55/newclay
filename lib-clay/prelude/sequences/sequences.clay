import meta.statics.(staticString?, staticStringSize);
import values.*;


//
// Range
//

define Range['T] as RecordType(begin:'T, end:'T, step:'T);

overload Range(to:'N) = Range['N]('N(0), to, 'N(1));
overload Range(from:'N, to:'N) = Range['N](from, to, 'N(1));
overload Range(from:'N, to:'N, step) = Range['N](from, to, 'N(step));

overload hasFront?(x:Range['T]) = x.begin < x.end;
overload front(x:Range['T]) = x.begin;
overload incFront(ref x:Range['T]) { x.begin += x.step; }

overload back(x:Range['T]) = x.end - x.step;
overload incBack(ref x:Range['T]) { x.end -= x.step; }

overload seekFront(ref x:Range['T], distance:'I) inline
    | Integer?('I)
    { x.begin += x.step * 'T(distance); }
overload seekBack(ref x:Range['T], distance:'I) inline
    | Integer?('I)
    { x.end -= x.step * 'T(distance); }
overload index(x:Range['T], distance:'I) inline
    | Integer?('I)
    = x.begin + x.step * 'T(distance);
overload size(x:Range['T]) inline
    = UInt((x.end - x.begin) div x.step);

overload #Savable?(Range['T]) = true;
overload #Reliable?(Range['T]) = true;


//
// static aggregate sizes
//

overload #size('s) | staticString?('s) = staticStringSize('s);
overload #size([..'t]) = countValues(..'t);


//
// sequence-related predicates and properties
//

#SourceSequence?('S) = callDefined?(source, 'S);
#SinkSequence?('S) = callDefined?(sink, Ref['S]);
#Sequence?('S) = callDefined?(iterator, 'S);

#sequenceIteratorType('S) | Sequence?('S) = type((s:'S) -> iterator(s));
#sequenceSourceType('S) | SourceSequence?('S) = type((s:'S) -> source(s));
#sequenceSinkType('S) | SinkSequence?('S) = type((s:'S) -> sink(s));

#sequenceElementType('S) | SinkSequence?('S)
    = ..sinkValueType(sequenceSinkType('S));
overload #sequenceElementType('S) | Sequence?('S)
    = ..iteratorValueType(sequenceIteratorType('S));

#SizedSequence?('S) = Sequence?('S) and callDefined?(size, 'S);

#ReversibleSequence?('S) = ReversibleIterator?(sequenceIteratorType('S));


//
// get the iterator from a source sequence
//

overload iterator(s:'S) inline | SourceSequence?('S) = SourceIterator(source(s));

