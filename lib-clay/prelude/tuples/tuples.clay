import values.*;
import libc.*;
import unsafe.compositetypes.(unpackFields);
import meta.statics.*;
import meta.c.*;
import meta.lltypes.*;
import unsafe.casts.(rvalueToRef);
import unsafe.valuesemantics.*;


//
// Tuple[..T]
//

define Tuple[..'T];
overload #inheritsPredicatesFromTypes(Tuple[..'T]) = true, ..'T;
overload #llType(Tuple[..'T])
    | allValues?(type?, ..'T)
    = llTupleType[..'T];


//
// indexing
//

overload index(forward t:Tuple[..'T], #'n) inline
    | validStaticIndex?('n, ..'T)
    = forward cFieldRef(#nthValue('n, ..'T), t, #llTupleFieldName('n));

overload index(rvalue t:Tuple[..'T], #'n) inline
    --> rvalue returned:nthValue('n, ..'T)
    | validStaticIndex?('n, ..'T) and not DestroyDoesNothing?(Tuple[..'T])
{
    ref rt = rvalueToRef(t);
    returned = &cFieldRef(#nthValue('n, ..'T), rt, #llTupleFieldName('n));

    static for (#'m in ..#exceptValue('n, ..intValues('n)))
        destroy(rt[#'m]);
}


//
// unpack
//

overload unpack(forward x:Tuple[..'T]) inline
    = forward ..unpackFields(x, ..#intValues(countValues(..'T)));


//
// default initialization
//

overload #BitwiseZeroInitialized?(Tuple[..'T])
    = allValues?(BitwiseZeroInitialized?, ..'T);

overload Tuple[..'T]() inline --> returned:Tuple[..'T]
    | allValues?(DefaultInitializable?, ..'T)
{
    ..*returned <-- ..mapValues(call, ..'T);
}

overload Tuple[..'T]() inline --> returned:Tuple[..'T]
    | allValues?(BitwiseZeroInitialized?, ..'T)
{
    memset(OpaquePointer(&returned), 0_i32, typeSize(Tuple[..'T]));
}


//
// memberwise initialization
//

overload Tuple[..'T](forward ..x:'T) inline --> returned:Tuple[..'T] {
    ..*returned <-- ..x;
}

overload Tuple(forward ..x:'T) inline = Tuple[..'T](..x);


//
// value semantics
//

overload destroy(ref x:Tuple[..'T]) inline
    | not DestroyDoesNothing?(Tuple[..'T])
{
    static for (ref f in ..*x)
        destroy(f);
}

overload reset(ref x:Tuple[..'T]) inline
    | not ResetDoesNothing?(Tuple[..'T])
{
    static for (ref f in ..*x)
        reset(f);
}

overload moveRvalue(forward x:Tuple[..'T]) inline
    | not BitwiseMoved?(Tuple[..'T]) and allValues?(Movable?, ..'T)
    = Tuple[..'T](..mapValues(moveRvalue, ..*x));

overload copy(x:Tuple[..'T]) inline
    | not BitwiseCopied?(Tuple[..'T]) and allValues?(Copyable?, ..'T)
    = Tuple[..'T](..mapValues(copy, ..*x));

#CompatibleTupleTypes?('fn, [..'T], [..'U])
    = countValues(..'T) == countValues(..'U)
      and compatibleTupleTypes2?('fn, [..'T], [..'U]);

private #compatibleTupleTypes2?('fn, ['T, ..'TT], ['U, ..'UU])
    = callDefined?('fn, 'T, 'U) and compatibleTupleTypes2?('fn, [..'TT], [..'UU]);
overload #compatibleTupleTypes2?('fn, [], []) = true;

overload copyAssign(ref to:Tuple[..'T], from:Tuple[..'U]) inline
    | not ([..'T] == [..'U] and BitwiseAssigned?(Tuple[..'T]))
      and CompatibleTupleTypes?(copyAssign, [..'T], [..'U])
{
    static for (#'n in ..#intValues(countValues(..'T)))
        to[#'n] = from[#'n];
}


//
// comparison
//

overload equals?(x:Tuple[..'T], y:Tuple[..'U]) inline
    | CompatibleTupleTypes?(equals?, [..'T], [..'U])
{
    static for (#'n in ..#intValues(countValues(..'T)))
        if (x[#'n] != y[#'n])
            return false;
    return true;
}

overload lesser?(x:Tuple[..'T], y:Tuple[..'U]) inline
    | CompatibleTupleTypes?(lesser?, [..'T], [..'U])
{
    static for (#'n in ..#intValues(countValues(..'T))) {
        if (x[#'n] < y[#'n])
            return true;
        if (y[#'n] < x[#'n])
            return false;
    }
    return false;
}
