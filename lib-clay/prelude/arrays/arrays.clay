import meta.c.*;
import meta.statics.*;
import prelude.sequences.*;
import meta.lltypes.*;
import values.*;
import libc.*;
import sequences.(equalSequence?, lesserSequence?);
import unsafe.casts.(pointerCast, refToRvalue, rvalueToRef);
import unsafe.coordinates.(begin, end, ContiguousCoordinate);
import unsafe.valuesemantics.*;


//
// Array[T,n]
//

define Array['T, 'n];
overload #inheritsPredicatesFromTypes(Array['T, 'n]) = true, 'T;
overload #llType(Array['T, 'n])
    | type?('T) and staticInt?('n) and 'n >= 0
    = llArrayType['T, 'n];


//
// size
//

overload size(x:Array['T, 'n]) inline = UInt('n);


//
// begin and end coordinates
//

overload begin(x:Array['T, 'n]) inline = pointerCast(ContiguousCoordinate['T], &x);
overload end(x:Array['T, 'n]) inline = pointerCast(ContiguousCoordinate['T], &x) + 'n;


//
// indexing
//

overload index(forward a:Array['T, 'n], i:'I) inline | Integer?('I) {
    assert(-> i >= 'I(0) and UInt(i) < UInt('n), Array['T, 'n], " index out of bounds");
    return forward cIndex('T, a, i);
}
overload index(rvalue a:Array['T, 'n], i:'I) inline --> returned:'T
    | Integer?('I) and not DestroyDoesNothing?('T)
{
    assert(-> i >= 'I(0) and UInt(i) < UInt('n), Array['T, 'n], " index out of bounds");
    ref ra = rvalueToRef(a);
    returned <-- refToRvalue(cIndex('T, ra, i));
    var n = 0u;
    for (ref elt in ra) {
        if (n != i)
            destroy(elt);
        inc(n);
    }
}



//
// default initialization
//

overload #BitwiseZeroInitialized?(Array['T, 'n])
    = BitwiseZeroInitialized?('T);

overload Array['T, 'n]() inline --> returned:Array['T, 'n]
    | DefaultInitializable?('T)
{
    for (ref r in returned)
        r <-- 'T();
}

overload Array['T, 'n]() inline --> returned:Array['T, 'n]
    | BitwiseZeroInitialized?('T)
{
    memset(OpaquePointer(&returned), 0_i32, typeSize(Array['T, 'n]));
}


//
// memberwise initialization
//

overload Array['T, 'n](forward ..xs:'TT) inline --> returned:Array['T, 'n]
    | countValues(..'TT) == 'n
      and allValues?((t) -> t == 'T, ..'TT)
{
    var i = begin(returned);
    static for (forward x in ..xs) {
        i^ <-- x;
        inc(i);
    }
}


//
// unsafe iterator for consuming rvalue array
// this ONLY works for fully consuming an array
//

private define RvalueCoordinateRangeUnsafe['C] as RecordType(begin:'C, end:'C);

overload hasFront?(i:RvalueCoordinateRangeUnsafe['C]) inline = i.begin < i.end;
overload front(i:RvalueCoordinateRangeUnsafe['C]) inline {
    return rvalue refToRvalue(i.begin^);
}
overload incFront(i:RvalueCoordinateRangeUnsafe['C]) inline {
    inc(i.begin);
}

private rvalueIteratorUnsafe(rvalue x:Array['T, 'n]) {
    ref rx = rvalueToRef(x);
    return RvalueCoordinateRangeUnsafe(begin(rx), end(rx));
}

private define forwardIteratorUnsafe;
overload forwardIteratorUnsafe(x:Array['T, 'n]) inline = iterator(x);
overload forwardIteratorUnsafe(rvalue x:Array['T, 'n]) inline = rvalueIteratorUnsafe(x);


//
// value semantics
//

overload destroy(ref x:Array['T, 'n]) inline
    | not DestroyDoesNothing?('T)
{
    for (ref y in x)
        destroy(y);
}

overload reset(ref x:Array['T, 'n]) inline
    | not ResetDoesNothing?('T)
{
    for (ref y in x)
        reset(y);
}

overload moveRvalue(forward x:Array['T, 'n]) inline --> returned:Array['T, 'n]
    | not BitwiseMoved?('T) and Movable?('T)
{
    var ri = iterator(returned), xi = forwardIteratorUnsafe(x);
    while (hasFront?(ri)) {
        front(ri) <-- moveRvalue(front(xi));
        incFront(ri);
    }
}

overload copy(x:Array['T, 'n]) inline --> returned:Array['T, 'n]
    | not BitwiseCopied?('T) and Copyable?('T)
{
    var ri = iterator(returned), xi = iterator(x);
    while (hasFront?(ri)) {
        front(ri) <-- front(xi);
        incFront(ri); incFront(xi);
    }
}

overload copyAssign(ref to:Array['T, 'n], from:Array['U, 'n]) inline
    | not ('T == 'U and BitwiseAssigned?('T))
      and callDefined?(copyAssign, Ref['T], 'U)
{
    var ti = iterator(to), fi = iterator(from);
    while (hasFront?(ti)) {
        front(ti) = front(fi);
        incFront(ti); incFront(fi);
    }
}


//
// comparison
//

overload equals?(x:Array['T, 'n], y:Array['U, 'n]) inline
    | callDefined?(equals?, 'T, 'U)
{
    var xi = iterator(x), yi = iterator(y);
    while (hasFront?(xi)) {
        if (front(xi) != front(yi))
            return false;
        incFront(xi); incFront(yi);
    }
    return true;
}

overload lesser?(x:Array['T, 'n], y:Array['U, 'n]) inline
    | callDefined?(lesser?, 'T, 'U)
{
    var xi = iterator(x), yi = iterator(y);
    while (hasFront?(xi)) {
        const xe = front(xi), ye = front(yi);
        if (xe < ye)
            return true;
        if (ye < xe)
            return false;
        incFront(xi); incFront(yi);
    }
    return false;
}

