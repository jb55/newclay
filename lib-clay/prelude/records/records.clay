import unsafe.compositetypes.*;
import meta.statics.*;
import meta.symbols.*;
import libc.*;
import values.*;
import meta.c.*;
import meta.lltypes.*;
import unsafe.casts.(rvalueToRef);
import unsafe.valuesemantics.*;


//
// RecordType definer
//

#RecordType(..'fields) | validFields?(..'fields) = [RecordType, ..'fields];

#RecordType?('T) = symbolWithTag?('T, RecordType);

#validField?('x) = false;
overload #validField?(['name, 'T]) | staticString?('name) and type?('T) = true;

#validFields?(..'x) = allValues?(validField?, ..'x);


//
// record type metadata
//

define fields;
overload #fields('T)
    | CompositeType?('T) and not RecordType?('T)
    = ..symbolTagBody('T, CompositeType);
overload #fields('T)
    | RecordType?('T)
    = ..symbolTagBody('T, RecordType);

#fieldNames('T) | staticCallDefined?(fields, 'T)
    = ..mapValues((x) -> x.0, ..fields('T));

#fieldTypes('T) | staticCallDefined?(fields, 'T)
    = ..mapValues((x) -> x.1, ..fields('T));

overload #llType('T) | CompositeType?('T) = llTupleType[..fields('T)];

#field?('T, 'field) = inValues?('field, ..fieldNames('T));

#fieldType('T, 'field) = fieldType2('field, ..fields('T));
private define fieldType2;
overload #fieldType2('field, 'x, ..'fields) = fieldType2('field, ..'fields);
overload #fieldType2('field, ['field, 'T], ..'fields) = 'T;

overload #inheritsPredicatesFromTypes('T) | RecordType?('T) = true, ..fieldTypes('T);


//
// unpack
//

overload unpack(forward x:'T) inline | RecordType?('T) = forward ..unpackRecord(x);


//
// record indexing
//

overload index(forward x:'T, #'field) inline
    | CompositeType?('T) and field?('T, 'field)
    = forward cFieldRef(#fieldType('T, 'field), x, #llMangle('field));

overload index(rvalue x:'T, #'field) inline
    --> rvalue returned:fieldType('T, 'field)
    | RecordType?('T) and field?('T, 'field)
{
    ref rx = rvalueToRef(x);
    returned = &cFieldRef(#fieldType('T, 'field), rx, #llMangle('field));

    static for (#'f in ..#exceptValue('field, ..fieldNames('T)))
        destroy(rx[#'f]);
}


//
// record constructors
//

overload 'T(forward ..args) inline
    | RecordType?('T) and defined?(-> initializeRecord('T, ..args))
    = initializeRecord('T, ..args);


//
// record value semantics
//

overload destroy(ref x:'T) inline
    | RecordType?('T) and not DestroyDoesNothing?('T)
{
    destroyRecord(x);
}

overload reset(ref x:'T) inline
    | RecordType?('T) and not ResetDoesNothing?('T)
{
    resetRecord(x);
}

overload moveRvalue(ref x:'T) inline
    | RecordType?('T)
      and not BitwiseMoved?('T)
      and allValues?(Movable?, ..fieldTypes('T))
    = moveRvalueRecord(x);

overload copy(x:'T) inline
    | RecordType?('T)
      and not BitwiseCopied?('T)
      and allValues?(Copyable?, ..fieldTypes('T))
    = copyRecord(x);

overload copyAssign(ref to:'T, from:'T) inline
    | RecordType?('T)
      and not BitwiseAssigned?('T)
      and allValues?(Assignable?, ..fieldTypes('T))
{
    copyAssignRecord(to, from);
}


//
// comparison
//

overload equals?(a:'T, b:'T) inline | RecordType?('T) = equalRecords?(a, b);
