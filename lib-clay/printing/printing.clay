import containers.(Container?);
import ctypes.(CChar, CString, CInt, CUInt);
import io.stdio.(stdout);
import libc.stdio.(sprintf);
import meta.statics.(staticString?, staticStringConcat, staticInt?, staticName);
import strings.(String, String?);
import strings.encodings.utf8.(UTF8);
import unsafe.coordinates.(begin);
import variants.(VariantType?, dispatch);


//
// printable protocol
//

define printObject;
define printObjectRepr;

overload printObject(ref sink, forward o) inline
    | defined?(-> { printObjectRepr(sink, o); })
{
    printObjectRepr(sink, o);
}
overload printObjectRepr(ref sink, o:'T) inline
{
    printTo(sink, 'T, "(...)");
}

#PrintableSink?('S) = Sink?('S) and sinkValueType('S) == Char;
#PrintableSinkSequence?('S) = SinkSequence?('S) and sequenceElementType('S) == Char;


//
// printing interface
//

printTo(ref seq:'S, forward ..objects) inline | PrintableSinkSequence?('S) {
    var seqSink = sink(seq);
    printTo(seqSink, ..objects);
}

overload printTo(ref sink:'S, forward ..objects) inline | PrintableSink?('S) {
    static for (forward object in ..objects)
        printObject(sink, object);
}

printlnTo(ref sink, forward ..objects) inline {
    printTo(sink, ..objects, '\n');
}

printReprTo(ref seq:'S, forward ..objects) inline | PrintableSinkSequence?('S) {
    var seqSink = sink(seq);
    printTo(seqSink, ..objects);
}
overload printReprTo(ref sink:'S, forward o1, forward ..os) inline | PrintableSink?('S) {
    printObjectRepr(sink, o1);
    static for (forward o in ..os) {
        printTo(sink, ", ");
        printObjectRepr(sink, o);
    }
}
overload printReprTo(ref sink:'S) inline | PrintableSink?('S) {}

printlnReprTo(ref sink, forward ..objects) inline {
    printReprTo(sink, ..objects);
    printObject(sink, '\n');
}

print(forward ..objects) inline {
    printTo(stdout, ..objects);
}
println(forward ..objects) inline {
    printlnTo(stdout, ..objects);
}
printRepr(forward ..objects) inline {
    printReprTo(stdout, ..objects);
}
printlnRepr(forward ..objects) inline {
    printlnReprTo(stdout, ..objects);
}

str['S](forward ..objects) inline {
    var s = 'S();
    printTo(s, ..objects);
    return s;
}

overload str(forward ..objects) = str[String](..objects);


//
// printWithSprintf helper
//

// XXX specialize if the sink is a stdio file sink, or UTF-8 encoded, or bulk writable
printWithSprintf(ref sink, #'fmt, #'sz, object)
    | staticString?('fmt) and staticInt?('sz)
{
    var buffer = Array[CChar, 'sz]();
    var cstring = CString(begin(buffer));
    sprintf(cstring, CString('fmt), object);

    for (c in UTF8(cstring)) {
        if (not hasFront?(sink))
            break;
        write1(sink, c);
    }
}

#bufferSizeForInt('T, 10)
    = 2 // negative sign, null terminator
    + (typeSize('T) * 240824 + 99999) div 100000; // log10(2^8) ~= 2.40824

overload #bufferSizeForInt('T, 16)
    = 2 // negative sign, null terminator
    + typeSize('T) * 2; // log16(2^8) == 2


//
// printing of standard aggregates
//

overload printObjectRepr(ref sink, s:Tuple[..'T]) {
    printObject(sink, '[');
    printReprTo(sink, ..*s);
    printObject(sink, ']');
}

overload printObjectRepr(ref sink, r:'R) | RecordType?('R) {
    printTo(sink, 'R, '(');
    printReprTo(sink, ..*r);
    printTo(sink, ')');
}

overload printObjectRepr(ref sink, n:'N) | NewType?('N) {
    printTo(sink, 'N, '(');
    printReprTo(sink, *n);
    printTo(sink, ')');
}

overload printObjectRepr(ref sink, v:'V) | VariantType?('V) {
    printTo(sink, 'V, '(');
    dispatch(v, (x) -> { printReprTo(sink, x); });
    printTo(sink, ')');
}

overload printObjectRepr(ref sink, m:Maybe['T]) {
    maybe(m,
        (x) -> {
            printTo(sink, "just(");
            printReprTo(sink, x);
            printTo(sink, ')');
        },
        -> { printTo(sink, "nothing(", 'T, ')'); }
    );
}

overload printObjectRepr(ref sink, m:Maybe[Pointer['T]]) {
    maybe(m,
        (x) -> {
            printTo(sink, "M");
            printReprTo(sink, x);
        },
        -> { printTo(sink, "null(", 'T, ')'); }
    );
}

overload printObjectRepr(ref sink, m:Maybe[OpaquePointer]) {
    maybe(m,
        (x) -> {
            printTo(sink, "M");
            printReprTo(sink, x);
        },
        -> { printTo(sink, "nullOpaque()"); }
    );
}


//
// printing of container sequences
//

overload printObjectRepr(ref sink, s:'S) | Container?('S) and Sequence?('S) {
    printTo(sink, 'S, '(');
    var i = iterator(s);
    if (hasFront?(i)) {
        printReprTo(sink, front(i));
        incFront(i);
        for (elt in i) {
            printTo(sink, ", ");
            printReprTo(sink, elt);
        }
    }
    printTo(sink, ')');
}


//
// printing of basic types
//

overload printObject(ref sink, s:'S) | String?('S) {
    for (c in s) {
        if (not hasFront?(sink))
            break;
        write1(sink, c);
    }
}

printStringRepr(ref sink, s:'S) | String?('S) {
    printObject(sink, '"');
    for (c in s) {
        printCharRepr(sink, c);
    }
    printObject(sink, '"');
}

printCharRepr(ref sink, c:Char) {
    var codePoint = CInt(c);
    if (c == '\'') {
        printObject(sink, "\\'");
    } else if (c == '\"') {
        printObject(sink, "\\\"");
    } else if (c == '\n') {
        printObject(sink, "\\n");
    } else if (c == '\t') {
        printObject(sink, "\\t");
    } else if (c == '\r') {
        printObject(sink, "\\r");
    } else if (codePoint >= 0x20 and codePoint < 0x7e) {
        printWithSprintf(sink, #"%c", #2, codePoint);
    } else if (codePoint < 0x80) {
        printWithSprintf(sink, #"\\x%02X", #5, codePoint);
    } else {
        printWithSprintf(sink, #"\\u%06X", #9, codePoint);
    }
}

overload printObjectRepr(ref sink, s:'S) inline
    | String?('S) and callDefined?('S, StringConstant)
{
    printTo(sink, 'S, '(');
    printStringRepr(sink, s);
    printTo(sink, ')');
}

overload printObjectRepr(ref sink, s:StringConstant) inline {
    printStringRepr(sink, s);
}

overload printObject(ref sink, c:Char) {
    if (hasFront?(sink))
        write1(sink, c);
}
overload printObjectRepr(ref sink, c:Char) {
    printObject(sink, '\'');
    printCharRepr(sink, c);
    printObject(sink, '\'');
}

overload printObjectRepr(ref sink, b:Bool) {
    printObject(sink, if (b) "true" else "false");
}

overload printObject(ref sink, i:'I)
    | SignedInteger?('I) and typeSize('I) <= typeSize(CInt)
{
    printWithSprintf(sink, #"%d", #bufferSizeForInt('I, 10), i);
}

overload printObject(ref sink, u:'U)
    | UnsignedInteger?('U) and typeSize('U) <= typeSize(CUInt)
{
    printWithSprintf(sink, #"%u", #bufferSizeForInt('U, 10), u);
}

// XXX platform dependency
overload printObject(ref sink, i:'I)
    | SignedInteger?('I) and typeSize('I) == 8
{
    printWithSprintf(sink, #"%lld", #bufferSizeForInt('I, 10), i);
}

// XXX platform dependency
overload printObject(ref sink, u:'U)
    | UnsignedInteger?('U) and typeSize('U) == 8
{
    printWithSprintf(sink, #"%llu", #bufferSizeForInt('U, 10), u);
}

overload printObjectRepr(ref sink, i:Int8) {
    printTo(sink, i, "i8");
}
overload printObjectRepr(ref sink, i:Int16) {
    printTo(sink, i, "i16");
}
overload printObjectRepr(ref sink, i:Int32) {
    printTo(sink, i, "i32");
}
overload printObjectRepr(ref sink, i:Int64) {
    printTo(sink, i, "i64");
}
overload printObjectRepr(ref sink, i:Int) {
    printTo(sink, i, "i");
}
overload printObjectRepr(ref sink, i:UInt8) {
    printTo(sink, i, "u8");
}
overload printObjectRepr(ref sink, i:UInt16) {
    printTo(sink, i, "u16");
}
overload printObjectRepr(ref sink, i:UInt32) {
    printTo(sink, i, "u32");
}
overload printObjectRepr(ref sink, i:UInt64) {
    printTo(sink, i, "u64");
}
overload printObjectRepr(ref sink, i:UInt) {
    printTo(sink, i, "u");
}

overload printObject(ref sink, f:Float32) {
    // 25 = 18 significant digits + sign + "e" + 3 exponent digits + exponent sign + null
    printWithSprintf(sink, #"%.18g", #25, f);
}

overload printObject(ref sink, f:Float64) {
    // 16 = 9 significant digits + sign + "e" + 3 exponent digits + exponent sign + null
    printWithSprintf(sink, #"%.9g", #16, f);
}

overload printObjectRepr(ref sink, i:Int8) {
    printTo(sink, i, "i8");
}
overload printObjectRepr(ref sink, i:Int16) {
    printTo(sink, i, "i16");
}
overload printObjectRepr(ref sink, i:Int32) {
    printTo(sink, i, "i32");
}
overload printObjectRepr(ref sink, i:Int64) {
    printTo(sink, i, "i64");
}
overload printObjectRepr(ref sink, i:Int) {
    printTo(sink, i, "i");
}
overload printObjectRepr(ref sink, i:UInt8) {
    printTo(sink, i, "u8");
}
overload printObjectRepr(ref sink, i:UInt16) {
    printTo(sink, i, "u16");
}
overload printObjectRepr(ref sink, i:UInt32) {
    printTo(sink, i, "u32");
}
overload printObjectRepr(ref sink, i:UInt64) {
    printTo(sink, i, "u64");
}
overload printObjectRepr(ref sink, i:UInt) {
    printTo(sink, i, "u");
}

// XXX platform dependency. windows sprintf doesn't support %a
overload printObjectRepr(ref sink, f:Float32) {
    // 19 = 6 mantissa digits + "-0x1." + "p" + 4 exponent digits + exponent sign + "f" + null
    printWithSprintf(sink, #"%.6af", #19, f);
}
overload printObjectRepr(ref sink, f:Float64) {
    // 25 = 13 mantissa digits + "-0x1." + "p" + 4 exponent digits + exponent sign + null
    printWithSprintf(sink, #"%.13a", #25, f);
}

overload printObjectRepr(ref sink, p:'P) | Pointer?('P) {
    // 25 = 13 mantissa digits + "-0x1." + "p" + 4 exponent digits + exponent sign + null
    printTo(sink, 'P, "(...");
    printWithSprintf(sink, #"%p", #128, p);
    printTo(sink, ")");
}

overload printObject(ref sink, #'x) inline {
    printObject(sink, *#staticName('x));
}
overload printObject(ref sink, #'x) inline | staticString?('x) {
    printObject(sink, 'x);
}
overload printObjectRepr(ref sink, #'x) inline {
    printTo(sink, *#(staticStringConcat("#", staticName('x))));
}
