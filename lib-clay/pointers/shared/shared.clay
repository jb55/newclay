import unsafe.memory.(allocateUninitializedValue, freeUninitializedValue);
import unsafe.compositetypes.*;
import unsafe.valuesemantics.*;

define RefCounted['T] as RecordType(refCount:UInt, value:'T);

define SharedPointer['T] as CompositeType(ptr:MPointer[RefCounted['T]]);

alias MSharedPointer['T] = Maybe[SharedPointer['T]];

overload SharedPointer['T](f, forward ..args) inline
    | type(-> f(..args)) == 'T
{
    var ptr = allocateUninitializedValue(RefCounted['T]);
    ptr^.refCount <-- 1u;
    try {
        ptr^.value <-- f(..args);
    } catch (ex) {
        freeUninitializedValue(ptr);
        throw ex;
    }
    return initializeRecord(SharedPointer['T], just(ptr));
}

overload SharedPointer(f, forward ..args) inline
    | defined?(-> f(..args))
    = SharedPointer[#type(-> f(..args))](f, ..args);

overload destroy(ref p:SharedPointer['T]) inline {
    maybe(p.ptr, (ptr) -> {
        dec(ptr^.refCount);
        if (ptr^.refCount == 0u) {
            destroy(ptr^.value);
            freeUninitializedValue(ptr);
        }
    });
}

overload reset(ref p:SharedPointer['T]) inline {
    p.ptr <-- nothing(Pointer[RefCounted['T]]);
}

overload copy(p:SharedPointer['T]) inline {
    inc(required(p.ptr)^.refCount);
    return initializeRecord(SharedPointer['T], p.ptr);
}

overload copyAssign(ref to:SharedPointer['T], from:SharedPointer['T]) inline {
    if (to.ptr == from.ptr)
        return;
    to = copy(from);
}

overload dereference(p:SharedPointer['T]) inline = forward required(p.ptr)^.value;

overload equals?(p:SharedPointer['T], q:SharedPointer['T])
    = p.ptr == q.ptr;
