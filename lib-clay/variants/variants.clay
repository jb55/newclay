import values.*;
import meta.lltypes.*;
import meta.symbols.*;
import variants.representation.*;
import libc.(memset);
import unsafe.casts.(llcast, refToRvalue, rvalueToRef);
import unsafe.valuesemantics.*;


//
// VariantType
//

#VariantType(..'members) = [VariantType, ..'members];
#VariantType?('T) = symbolWithTag?('T, VariantType);

#variantMemberTypes('T) | VariantType?('T) = ..symbolTagBody('T, VariantType);
#VariantMember?('T, 'M) | VariantType?('T)
    = inValues?('M, ..variantMemberTypes('T));

#WithReprType('R) = [WithReprType, 'R];
#WithReprType?('V) = VariantType?('V) and symbolWithTag?('V, WithReprType);

#variantReprType('T) | VariantType?('T) and not WithReprType?('T)
    = TaggedUnionRepr[..variantMemberTypes('T)];
overload #variantReprType('T) | VariantType?('T) and WithReprType?('T)
    and reprAcceptsMemberTypes?(symbolTagBody('T, WithReprType)[..variantMemberTypes('T)])
    = symbolTagBody('T, WithReprType)[..variantMemberTypes('T)];
overload #variantReprType('T) | VariantType?('T) and WithReprType?('T)
    and not reprAcceptsMemberTypes?(symbolTagBody('T, WithReprType)[..variantMemberTypes('T)])
    = staticError("variant ", 'T, " representation ", symbolTagBody('T, WithReprType),
        " does not accept member types ", [..variantMemberTypes('T)]
    );

#WithDefaultMemberType('T) = [WithDefaultMemberType, 'T];
#WithDefaultMemberType?('V) = VariantType?('V) and symbolWithTag?('V, WithDefaultMemberType);

#variantDefaultMemberType('T)
    | VariantType?('T) and WithDefaultMemberType?('T)
      and VariantMember?('T, symbolTagBody('T, WithDefaultMemberType))
    = symbolTagBody('T, WithDefaultMemberType);

overload #variantDefaultMemberType('T)
    | VariantType?('T) and WithDefaultMemberType?('T)
      and not VariantMember?('T, symbolTagBody('T, WithDefaultMemberType))
    = staticError("variant ", 'T, " default member type ",
        symbolTagBody('T, WithDefaultMemberType),
        " is not one of its member types ", [..variantMemberTypes('T)]
    );

overload #BitwiseZeroInitialized?('V)
    | VariantType?('V) and WithDefaultMemberType?('V)
    = reprZeroInitializedWithMemberType?(variantReprType('V), variantDefaultMemberType('V));

private repr(forward v:'T) | VariantType?('T) = forward llcast(#variantReprType('T), v);

overload #llType('T) | VariantType?('T) = llType(variantReprType('T));

overload #inheritsPredicatesFromTypes('T) | VariantType?('T)
    = true, ..variantMemberTypes('T);

overload 'T() --> returned:'T
    | VariantType?('T) and WithDefaultMemberType?('T)
{
    initializeRepr(repr(returned), (#variantDefaultMemberType('T))());
}

overload 'T() inline --> returned:'T
    | VariantType?('T) and WithDefaultMemberType?('T) and BitwiseZeroInitialized?('T)
{
    memset(OpaquePointer(&returned), 0_i32, typeSize('T));
}

overload 'T(forward m:'M) inline --> returned:'T
    | VariantType?('T) and VariantMember?('T, 'M)
{
    initializeRepr(repr(returned), m);
}

dispatch(forward v:'T, forward fn) inline | VariantType?('T)
    = forward ..dispatchRepr(repr(v), fn);

overload destroy(ref v:'T) inline | VariantType?('T) and not DestroyDoesNothing?('T) {
    dispatchRepr(repr(v), destroy);
}

overload reset(ref v:'T) inline | VariantType?('T) and not ResetDoesNothing?('T) {
    dispatchRepr(repr(v), reset);
}

overload copy(v:'T) inline --> returned:'T | VariantType?('T) and not BitwiseCopied?('T) {
    copyRepr(repr(returned), repr(v));
}

overload moveRvalue(ref v:'T) inline --> returned:'T | VariantType?('T) and not BitwiseMoved?('T) {
    moveRepr(repr(returned), repr(v));
}

variantIs?(#'M, v:'T) inline | VariantType?('T) and VariantMember?('T, 'M)
    = reprIs?(#'M, repr(v));
variantAs(#'M, forward v:'T) inline | VariantType?('T) and VariantMember?('T, 'M) {
    assert(-> variantIs?(#'M, v));
    return forward reprAs(#'M, repr(v));
}
overload variantAs(#'M, rvalue v:'T) inline
    | VariantType?('T) and VariantMember?('T, 'M)
{
    ref rv = rvalueToRef(v);
    assert(-> variantIs?(#'M, rv));
    return forward reprAs(#'M, repr(refToRvalue(rv)));
}
variantAsUnsafe(#'M, forward v:'T) inline
    | VariantType?('T) and VariantMember?('T, 'M)
    = forward reprAs(#'M, repr(v));

overload index(forward v:'T, #'M) inline
    | VariantType?('T) and VariantMember?('T, 'M)
    = forward variantAs(#'M, v);


//
// equality
//

overload equals?(v:'V, w:'V)
    | VariantType?('V)
      and allValues?((#'T) -> callDefined?(equals?, 'T, 'T), ..variantMemberTypes('V))
    = dispatch(v, (vm:'M) -> variantIs?('M, w) and vm == variantAsUnsafe('M, w));
